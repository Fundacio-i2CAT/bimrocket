/*
 * BIMROCKET
 *
 * Copyright (C) 2021, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 * http://www.gnu.org/licenses/
 * and
 * https://www.gnu.org/licenses/lgpl.txt
 */

package org.bimrocket.generators;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import org.bimrocket.express.ExpressAttribute;
import org.bimrocket.express.ExpressDefinedType;
import org.bimrocket.express.ExpressEntity;
import org.bimrocket.express.ExpressSchema;
import org.bimrocket.express.ExpressType;
import org.bimrocket.express.io.ExpressLoader;

/**
 *
 * @author realor
 */
public class IfcJavascriptClassesGenerator
{
  private PrintWriter writer;
  private String schemaVersion = "IFC2X3";
  private final HashSet<String> generatedClasses = new HashSet<>();

  public String getSchemaVersion()
  {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion)
  {
    this.schemaVersion = schemaVersion;
  }

  public void generateClasses(String schemaFileName, File outputFile)
    throws IOException
  {
    generatedClasses.clear();

    ExpressLoader loader = new ExpressLoader();
    ExpressSchema schema = loader.load(schemaFileName);

    writer = new PrintWriter(outputFile, "UTF-8");
    try
    {
      writeHeader(schemaFileName);
      List<ExpressEntity> entities = schema.getNamedTypes(ExpressEntity.class);
      for (ExpressEntity entity : entities)
      {
        writeEntity(entity);
      }
      writer.println();

      List<ExpressDefinedType> definedTypes =
        schema.getNamedTypes(ExpressDefinedType.class);
      for (ExpressDefinedType definedType : definedTypes)
      {
        writeDefinedType(definedType);
      }

      writeFooter();
    }
    finally
    {
      writer.close();
    }
  }

  protected void writeHeader(String schemaFileName)
  {
    Date date = new Date();
    writer.println("/*");
    writer.println("  Autogenerated IFC classes");
    writer.println("  Express schema file: " + schemaFileName);
    writer.println("  Schema version: " + schemaVersion);
    writer.println("  Generation date: " + date);
    writer.println("*/");
    writer.println();

    writer.println("import { BaseEntity, registerIfcClass } " +
      "from \"../BaseEntity.js\";");
    writer.println();

    writer.println("class SchemaBase extends BaseEntity");
    writer.println("{");
    writer.println("  static schemaName = \"" + schemaVersion + "\";");
    writer.println("  static schema = null;");
    writer.println("};");
    writer.println();
  }

  protected void writeFooter()
  {
  }

  protected void writeEntity(ExpressEntity entity)
  {
    if (generatedClasses.contains(entity.getName())) return;

    ExpressEntity superEntity = entity.getSuperEntity();

    // write super entity first
    if (superEntity != null)
    {
      writeEntity(superEntity);
    }

    // write this entity
    writer.print("class " + entity.getName());
    writer.println(" extends " + (superEntity == null ?
      "SchemaBase" : superEntity.getName()));
    writer.println("{");

    List<ExpressAttribute> attributes = entity.getAttributes();
    if (!attributes.isEmpty())
    {
      for (ExpressAttribute attribute : attributes)
      {
        writer.print("  " + attribute.getName() + " = null; // ");
        writer.println(attribute.getType());
      }
    }
    writer.println("};");
    writer.println("registerIfcClass(" + entity.getName() + ");");
    writer.println();
    generatedClasses.add(entity.getName());
  }

  protected void writeDefinedType(ExpressDefinedType type)
  {
    ExpressType definition = type.getDefinition();

    writer.println("class " + type.getName() + " extends SchemaBase");
    writer.println("{");
    writer.println("  Value = null; // " + definition);
    writer.println("};");
    writer.println("registerIfcClass(" + type.getName() + ");");
    writer.println();
  }

  public static void main(String[] args) throws IOException
  {
    if (args.length < 2)
    {
      System.out.println("Arguments: schemaFile outputFile " +
        "[-v:schemaVersion]");
    }
    else
    {
      IfcJavascriptClassesGenerator generator =
        new IfcJavascriptClassesGenerator();

      String schemaFileName = null;
      File outputFile = null;

      for (String arg : args)
      {
        if (arg.startsWith("-v:"))
        {
          generator.setSchemaVersion(arg.substring(3));
        }
        else if (schemaFileName == null)
        {
          schemaFileName = arg;
        }
        else if (outputFile == null)
        {
          outputFile = new File(arg);
        }
      }
      if (schemaFileName != null && outputFile != null)
      {
        if (outputFile.exists())
        {
          System.out.println(outputFile + " already exists.");
        }
        else
        {
          generator.generateClasses(schemaFileName, outputFile);
        }
      }
    }
  }
}
