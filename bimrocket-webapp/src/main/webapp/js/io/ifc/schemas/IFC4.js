/*
  Autogenerated IFC classes
  Express schema file: schema:IFC4
  Schema version: IFC4
  Generation date: Mon Jul 19 19:31:55 CEST 2021
*/

import { BaseEntity, registerIfcClass } from "../BaseEntity.js";

export const schema = {};

class SchemaBase extends BaseEntity
{
  static schemaName = "IFC4";
  static schema = schema;
};

class IfcRoot extends SchemaBase
{
  GlobalId = null; // TYPE IfcGloballyUniqueId = STRING
  OwnerHistory = null; // ENTITY IfcOwnerHistory
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcRoot, schema);

class IfcObjectDefinition extends IfcRoot
{
};
registerIfcClass(IfcObjectDefinition, schema);

class IfcTypeObject extends IfcObjectDefinition
{
  ApplicableOccurrence = null; // TYPE IfcIdentifier = STRING
  HasPropertySets = null; // SET[1:0] OF IfcPropertySetDefinition
};
registerIfcClass(IfcTypeObject, schema);

class IfcTypeProduct extends IfcTypeObject
{
  RepresentationMaps = null; // LIST[1:0] OF IfcRepresentationMap
  Tag = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcTypeProduct, schema);

class IfcElementType extends IfcTypeProduct
{
  ElementType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcElementType, schema);

class IfcDistributionElementType extends IfcElementType
{
};
registerIfcClass(IfcDistributionElementType, schema);

class IfcDistributionFlowElementType extends IfcDistributionElementType
{
};
registerIfcClass(IfcDistributionFlowElementType, schema);

class IfcEnergyConversionDeviceType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcEnergyConversionDeviceType, schema);

class IfcCooledBeamType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcCooledBeamTypeEnum = ENUMERATION OF [ACTIVE, PASSIVE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCooledBeamType, schema);

class IfcRepresentationItem extends SchemaBase
{
};
registerIfcClass(IfcRepresentationItem, schema);

class IfcGeometricRepresentationItem extends IfcRepresentationItem
{
};
registerIfcClass(IfcGeometricRepresentationItem, schema);

class IfcSolidModel extends IfcGeometricRepresentationItem
{
};
registerIfcClass(IfcSolidModel, schema);

class IfcManifoldSolidBrep extends IfcSolidModel
{
  Outer = null; // ENTITY IfcClosedShell SUBTYPE OF IfcConnectedFaceSet
};
registerIfcClass(IfcManifoldSolidBrep, schema);

class IfcAdvancedBrep extends IfcManifoldSolidBrep
{
};
registerIfcClass(IfcAdvancedBrep, schema);

class IfcPropertyDefinition extends IfcRoot
{
};
registerIfcClass(IfcPropertyDefinition, schema);

class IfcPropertyTemplateDefinition extends IfcPropertyDefinition
{
};
registerIfcClass(IfcPropertyTemplateDefinition, schema);

class IfcPropertyTemplate extends IfcPropertyTemplateDefinition
{
};
registerIfcClass(IfcPropertyTemplate, schema);

class IfcFlowSegmentType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowSegmentType, schema);

class IfcCableCarrierSegmentType extends IfcFlowSegmentType
{
  PredefinedType = null; // TYPE IfcCableCarrierSegmentTypeEnum = ENUMERATION OF [CABLELADDERSEGMENT, CABLETRAYSEGMENT, CABLETRUNKINGSEGMENT, CONDUITSEGMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableCarrierSegmentType, schema);

class IfcObject extends IfcObjectDefinition
{
  ObjectType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcObject, schema);

class IfcProduct extends IfcObject
{
  ObjectPlacement = null; // ENTITY IfcObjectPlacement
  Representation = null; // ENTITY IfcProductRepresentation
};
registerIfcClass(IfcProduct, schema);

class IfcElement extends IfcProduct
{
  Tag = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcElement, schema);

class IfcFeatureElement extends IfcElement
{
};
registerIfcClass(IfcFeatureElement, schema);

class IfcSweptAreaSolid extends IfcSolidModel
{
  SweptArea = null; // ENTITY IfcProfileDef
  Position = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcSweptAreaSolid, schema);

class IfcElectricMotorType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcElectricMotorTypeEnum = ENUMERATION OF [DC, INDUCTION, POLYPHASE, RELUCTANCESYNCHRONOUS, SYNCHRONOUS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricMotorType, schema);

class IfcCurve extends IfcGeometricRepresentationItem
{
};
registerIfcClass(IfcCurve, schema);

class IfcBoundedCurve extends IfcCurve
{
};
registerIfcClass(IfcBoundedCurve, schema);

class IfcCompositeCurve extends IfcBoundedCurve
{
  Segments = null; // LIST[1:0] OF IfcCompositeCurveSegment
  SelfIntersect = null; // TYPE IfcLogical = LOGICAL
};
registerIfcClass(IfcCompositeCurve, schema);

class IfcCompositeCurveOnSurface extends IfcCompositeCurve
{
};
registerIfcClass(IfcCompositeCurveOnSurface, schema);

class IfcBoundaryCurve extends IfcCompositeCurveOnSurface
{
};
registerIfcClass(IfcBoundaryCurve, schema);

class IfcOuterBoundaryCurve extends IfcBoundaryCurve
{
};
registerIfcClass(IfcOuterBoundaryCurve, schema);

class IfcCoilType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcCoilTypeEnum = ENUMERATION OF [DXCOOLINGCOIL, ELECTRICHEATINGCOIL, GASHEATINGCOIL, HYDRONICCOIL, STEAMHEATINGCOIL, WATERCOOLINGCOIL, WATERHEATINGCOIL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCoilType, schema);

class IfcBuildingElement extends IfcElement
{
};
registerIfcClass(IfcBuildingElement, schema);

class IfcPile extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcPileTypeEnum = ENUMERATION OF [BORED, DRIVEN, JETGROUTING, COHESION, FRICTION, SUPPORT, USERDEFINED, NOTDEFINED]
  ConstructionType = null; // TYPE IfcPileConstructionEnum = ENUMERATION OF [CAST_IN_PLACE, COMPOSITE, PRECAST_CONCRETE, PREFAB_STEEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPile, schema);

class IfcExternalInformation extends SchemaBase
{
};
registerIfcClass(IfcExternalInformation, schema);

class IfcLibraryInformation extends IfcExternalInformation
{
  Name = null; // TYPE IfcLabel = STRING
  Version = null; // TYPE IfcLabel = STRING
  Publisher = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  VersionDate = null; // TYPE IfcDateTime = STRING
  Location = null; // TYPE IfcURIReference = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcLibraryInformation, schema);

class IfcDistributionElement extends IfcElement
{
};
registerIfcClass(IfcDistributionElement, schema);

class IfcDistributionFlowElement extends IfcDistributionElement
{
};
registerIfcClass(IfcDistributionFlowElement, schema);

class IfcFlowFitting extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowFitting, schema);

class IfcDuctFitting extends IfcFlowFitting
{
  PredefinedType = null; // TYPE IfcDuctFittingTypeEnum = ENUMERATION OF [BEND, CONNECTOR, ENTRY, EXIT, JUNCTION, OBSTRUCTION, TRANSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDuctFitting, schema);

class IfcOrganization extends SchemaBase
{
  Identification = null; // TYPE IfcIdentifier = STRING
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Roles = null; // LIST[1:0] OF IfcActorRole
  Addresses = null; // LIST[1:0] OF IfcAddress
};
registerIfcClass(IfcOrganization, schema);

class IfcCompositeCurveSegment extends IfcGeometricRepresentationItem
{
  Transition = null; // TYPE IfcTransitionCode = ENUMERATION OF [DISCONTINUOUS, CONTINUOUS, CONTSAMEGRADIENT, CONTSAMEGRADIENTSAMECURVATURE]
  SameSense = null; // TYPE IfcBoolean = BOOLEAN
  ParentCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcCompositeCurveSegment, schema);

class IfcReparametrisedCompositeCurveSegment extends IfcCompositeCurveSegment
{
  ParamLength = null; // TYPE IfcParameterValue = REAL
};
registerIfcClass(IfcReparametrisedCompositeCurveSegment, schema);

class IfcSectionedSpine extends IfcGeometricRepresentationItem
{
  SpineCurve = null; // ENTITY IfcCompositeCurve SUBTYPE OF IfcBoundedCurve
  CrossSections = null; // LIST[2:0] OF IfcProfileDef
  CrossSectionPositions = null; // LIST[2:0] OF IfcAxis2Placement3D
};
registerIfcClass(IfcSectionedSpine, schema);

class IfcFixedReferenceSweptAreaSolid extends IfcSweptAreaSolid
{
  Directrix = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  StartParam = null; // TYPE IfcParameterValue = REAL
  EndParam = null; // TYPE IfcParameterValue = REAL
  FixedReference = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcFixedReferenceSweptAreaSolid, schema);

class IfcRepresentationMap extends SchemaBase
{
  MappingOrigin = null; // TYPE IfcAxis2Placement = SELECT [IfcAxis2Placement2D, IfcAxis2Placement3D]
  MappedRepresentation = null; // ENTITY IfcRepresentation
};
registerIfcClass(IfcRepresentationMap, schema);

class IfcGroup extends IfcObject
{
};
registerIfcClass(IfcGroup, schema);

class IfcInventory extends IfcGroup
{
  PredefinedType = null; // TYPE IfcInventoryTypeEnum = ENUMERATION OF [ASSETINVENTORY, SPACEINVENTORY, FURNITUREINVENTORY, USERDEFINED, NOTDEFINED]
  Jurisdiction = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  ResponsiblePersons = null; // SET[1:0] OF IfcPerson
  LastUpdateDate = null; // TYPE IfcDate = STRING
  CurrentValue = null; // ENTITY IfcCostValue SUBTYPE OF IfcAppliedValue
  OriginalValue = null; // ENTITY IfcCostValue SUBTYPE OF IfcAppliedValue
};
registerIfcClass(IfcInventory, schema);

class IfcLightSource extends IfcGeometricRepresentationItem
{
  Name = null; // TYPE IfcLabel = STRING
  LightColour = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
  AmbientIntensity = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  Intensity = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcLightSource, schema);

class IfcLightSourceAmbient extends IfcLightSource
{
};
registerIfcClass(IfcLightSourceAmbient, schema);

class IfcPhysicalQuantity extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcPhysicalQuantity, schema);

class IfcPhysicalSimpleQuantity extends IfcPhysicalQuantity
{
  Unit = null; // ENTITY IfcNamedUnit
};
registerIfcClass(IfcPhysicalSimpleQuantity, schema);

class IfcQuantityWeight extends IfcPhysicalSimpleQuantity
{
  WeightValue = null; // TYPE IfcMassMeasure = REAL
  Formula = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcQuantityWeight, schema);

class IfcExternalReference extends SchemaBase
{
  Location = null; // TYPE IfcURIReference = STRING
  Identification = null; // TYPE IfcIdentifier = STRING
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcExternalReference, schema);

class IfcPropertyAbstraction extends SchemaBase
{
};
registerIfcClass(IfcPropertyAbstraction, schema);

class IfcProperty extends IfcPropertyAbstraction
{
  Name = null; // TYPE IfcIdentifier = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcProperty, schema);

class IfcEnergyConversionDevice extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcEnergyConversionDevice, schema);

class IfcAirToAirHeatRecovery extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF [FIXEDPLATECOUNTERFLOWEXCHANGER, FIXEDPLATECROSSFLOWEXCHANGER, FIXEDPLATEPARALLELFLOWEXCHANGER, ROTARYWHEEL, RUNAROUNDCOILLOOP, HEATPIPE, TWINTOWERENTHALPYRECOVERYLOOPS, THERMOSIPHONSEALEDTUBEHEATEXCHANGERS, THERMOSIPHONCOILTYPEHEATEXCHANGERS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAirToAirHeatRecovery, schema);

class IfcDistributionChamberElement extends IfcDistributionFlowElement
{
  PredefinedType = null; // TYPE IfcDistributionChamberElementTypeEnum = ENUMERATION OF [FORMEDDUCT, INSPECTIONCHAMBER, INSPECTIONPIT, MANHOLE, METERCHAMBER, SUMP, TRENCH, VALVECHAMBER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDistributionChamberElement, schema);

class IfcRelationship extends IfcRoot
{
};
registerIfcClass(IfcRelationship, schema);

class IfcRelDecomposes extends IfcRelationship
{
};
registerIfcClass(IfcRelDecomposes, schema);

class IfcRelAggregates extends IfcRelDecomposes
{
  RelatingObject = null; // ENTITY IfcObjectDefinition SUBTYPE OF IfcRoot
  RelatedObjects = null; // SET[1:0] OF IfcObjectDefinition
};
registerIfcClass(IfcRelAggregates, schema);

class IfcBuildingElementProxy extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcBuildingElementProxyTypeEnum = ENUMERATION OF [COMPLEX, ELEMENT, PARTIAL, PROVISIONFORVOID, PROVISIONFORSPACE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBuildingElementProxy, schema);

class IfcFlowTerminalType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowTerminalType, schema);

class IfcFireSuppressionTerminalType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcFireSuppressionTerminalTypeEnum = ENUMERATION OF [BREECHINGINLET, FIREHYDRANT, HOSEREEL, SPRINKLER, SPRINKLERDEFLECTOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFireSuppressionTerminalType, schema);

class IfcRelDeclares extends IfcRelationship
{
  RelatingContext = null; // ENTITY IfcContext SUBTYPE OF IfcObjectDefinition
  RelatedDefinitions = null; // SET[1:0] OF IfcDefinitionSelect
};
registerIfcClass(IfcRelDeclares, schema);

class IfcQuantityArea extends IfcPhysicalSimpleQuantity
{
  AreaValue = null; // TYPE IfcAreaMeasure = REAL
  Formula = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcQuantityArea, schema);

class IfcSanitaryTerminalType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcSanitaryTerminalTypeEnum = ENUMERATION OF [BATH, BIDET, CISTERN, SHOWER, SINK, SANITARYFOUNTAIN, TOILETPAN, URINAL, WASHHANDBASIN, WCSEAT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSanitaryTerminalType, schema);

class IfcFlowControllerType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowControllerType, schema);

class IfcFlowMeterType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcFlowMeterTypeEnum = ENUMERATION OF [ENERGYMETER, GASMETER, OILMETER, WATERMETER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFlowMeterType, schema);

class IfcPresentationItem extends SchemaBase
{
};
registerIfcClass(IfcPresentationItem, schema);

class IfcTextureCoordinate extends IfcPresentationItem
{
  Maps = null; // LIST[1:0] OF IfcSurfaceTexture
};
registerIfcClass(IfcTextureCoordinate, schema);

class IfcIndexedTextureMap extends IfcTextureCoordinate
{
  MappedTo = null; // ENTITY IfcTessellatedFaceSet SUBTYPE OF IfcTessellatedItem
  TexCoords = null; // ENTITY IfcTextureVertexList SUBTYPE OF IfcPresentationItem
};
registerIfcClass(IfcIndexedTextureMap, schema);

class IfcPreDefinedItem extends IfcPresentationItem
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcPreDefinedItem, schema);

class IfcPreDefinedColour extends IfcPreDefinedItem
{
};
registerIfcClass(IfcPreDefinedColour, schema);

class IfcFlowFittingType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowFittingType, schema);

class IfcPipeFittingType extends IfcFlowFittingType
{
  PredefinedType = null; // TYPE IfcPipeFittingTypeEnum = ENUMERATION OF [BEND, CONNECTOR, ENTRY, EXIT, JUNCTION, OBSTRUCTION, TRANSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPipeFittingType, schema);

class IfcSchedulingTime extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  DataOrigin = null; // TYPE IfcDataOriginEnum = ENUMERATION OF [MEASURED, PREDICTED, SIMULATED, USERDEFINED, NOTDEFINED]
  UserDefinedDataOrigin = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcSchedulingTime, schema);

class IfcResourceTime extends IfcSchedulingTime
{
  ScheduleWork = null; // TYPE IfcDuration = STRING
  ScheduleUsage = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
  ScheduleStart = null; // TYPE IfcDateTime = STRING
  ScheduleFinish = null; // TYPE IfcDateTime = STRING
  ScheduleContour = null; // TYPE IfcLabel = STRING
  LevelingDelay = null; // TYPE IfcDuration = STRING
  IsOverAllocated = null; // TYPE IfcBoolean = BOOLEAN
  StatusTime = null; // TYPE IfcDateTime = STRING
  ActualWork = null; // TYPE IfcDuration = STRING
  ActualUsage = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
  ActualStart = null; // TYPE IfcDateTime = STRING
  ActualFinish = null; // TYPE IfcDateTime = STRING
  RemainingWork = null; // TYPE IfcDuration = STRING
  RemainingUsage = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
  Completion = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcResourceTime, schema);

class IfcRoof extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcRoofTypeEnum = ENUMERATION OF [FLAT_ROOF, SHED_ROOF, GABLE_ROOF, HIP_ROOF, HIPPED_GABLE_ROOF, GAMBREL_ROOF, MANSARD_ROOF, BARREL_ROOF, RAINBOW_ROOF, BUTTERFLY_ROOF, PAVILION_ROOF, DOME_ROOF, FREEFORM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRoof, schema);

class IfcFacetedBrep extends IfcManifoldSolidBrep
{
};
registerIfcClass(IfcFacetedBrep, schema);

class IfcSurfaceStyleWithTextures extends IfcPresentationItem
{
  Textures = null; // LIST[1:0] OF IfcSurfaceTexture
};
registerIfcClass(IfcSurfaceStyleWithTextures, schema);

class IfcTableRow extends SchemaBase
{
  RowCells = null; // LIST[1:0] OF IfcValue
  IsHeading = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcTableRow, schema);

class IfcProfileDef extends SchemaBase
{
  ProfileType = null; // TYPE IfcProfileTypeEnum = ENUMERATION OF [CURVE, AREA]
  ProfileName = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcProfileDef, schema);

class IfcParameterizedProfileDef extends IfcProfileDef
{
  Position = null; // ENTITY IfcAxis2Placement2D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcParameterizedProfileDef, schema);

class IfcZShapeProfileDef extends IfcParameterizedProfileDef
{
  Depth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  EdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcZShapeProfileDef, schema);

class IfcResource extends IfcObject
{
  Identification = null; // TYPE IfcIdentifier = STRING
  LongDescription = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcResource, schema);

class IfcConstructionResource extends IfcResource
{
  Usage = null; // ENTITY IfcResourceTime SUBTYPE OF IfcSchedulingTime
  BaseCosts = null; // LIST[1:0] OF IfcAppliedValue
  BaseQuantity = null; // ENTITY IfcPhysicalQuantity
};
registerIfcClass(IfcConstructionResource, schema);

class IfcConstructionProductResource extends IfcConstructionResource
{
  PredefinedType = null; // TYPE IfcConstructionProductResourceTypeEnum = ENUMERATION OF [ASSEMBLY, FORMWORK, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcConstructionProductResource, schema);

class IfcRepresentation extends SchemaBase
{
  ContextOfItems = null; // ENTITY IfcRepresentationContext
  RepresentationIdentifier = null; // TYPE IfcLabel = STRING
  RepresentationType = null; // TYPE IfcLabel = STRING
  Items = null; // SET[1:0] OF IfcRepresentationItem
};
registerIfcClass(IfcRepresentation, schema);

class IfcShapeModel extends IfcRepresentation
{
};
registerIfcClass(IfcShapeModel, schema);

class IfcActorRole extends SchemaBase
{
  Role = null; // TYPE IfcRoleEnum = ENUMERATION OF [SUPPLIER, MANUFACTURER, CONTRACTOR, SUBCONTRACTOR, ARCHITECT, STRUCTURALENGINEER, COSTENGINEER, CLIENT, BUILDINGOWNER, BUILDINGOPERATOR, MECHANICALENGINEER, ELECTRICALENGINEER, PROJECTMANAGER, FACILITIESMANAGER, CIVILENGINEER, COMMISSIONINGENGINEER, ENGINEER, OWNER, CONSULTANT, CONSTRUCTIONMANAGER, FIELDCONSTRUCTIONMANAGER, RESELLER, USERDEFINED]
  UserDefinedRole = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcActorRole, schema);

class IfcCsgSolid extends IfcSolidModel
{
  TreeRootExpression = null; // TYPE IfcCsgSelect = SELECT [IfcBooleanResult, IfcCsgPrimitive3D]
};
registerIfcClass(IfcCsgSolid, schema);

class IfcLibraryReference extends IfcExternalReference
{
  Description = null; // TYPE IfcText = STRING
  Language = null; // TYPE IfcLanguageId = TYPE IfcIdentifier = STRING
  ReferencedLibrary = null; // ENTITY IfcLibraryInformation SUBTYPE OF IfcExternalInformation
};
registerIfcClass(IfcLibraryReference, schema);

class IfcFlowMovingDeviceType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowMovingDeviceType, schema);

class IfcStyleModel extends IfcRepresentation
{
};
registerIfcClass(IfcStyleModel, schema);

class IfcResourceLevelRelationship extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcResourceLevelRelationship, schema);

class IfcDocumentInformationRelationship extends IfcResourceLevelRelationship
{
  RelatingDocument = null; // ENTITY IfcDocumentInformation SUBTYPE OF IfcExternalInformation
  RelatedDocuments = null; // SET[1:0] OF IfcDocumentInformation
  RelationshipType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcDocumentInformationRelationship, schema);

class IfcCoordinateReferenceSystem extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  GeodeticDatum = null; // TYPE IfcIdentifier = STRING
  VerticalDatum = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcCoordinateReferenceSystem, schema);

class IfcColourSpecification extends IfcPresentationItem
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcColourSpecification, schema);

class IfcColourRgb extends IfcColourSpecification
{
  Red = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  Green = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  Blue = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcColourRgb, schema);

class IfcElementComponentType extends IfcElementType
{
};
registerIfcClass(IfcElementComponentType, schema);

class IfcDiscreteAccessoryType extends IfcElementComponentType
{
  PredefinedType = null; // TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF [ANCHORPLATE, BRACKET, SHOE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDiscreteAccessoryType, schema);

class IfcFurnishingElement extends IfcElement
{
};
registerIfcClass(IfcFurnishingElement, schema);

class IfcSurface extends IfcGeometricRepresentationItem
{
};
registerIfcClass(IfcSurface, schema);

class IfcElementarySurface extends IfcSurface
{
  Position = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcElementarySurface, schema);

class IfcPreDefinedTextFont extends IfcPreDefinedItem
{
};
registerIfcClass(IfcPreDefinedTextFont, schema);

class IfcFeatureElementSubtraction extends IfcFeatureElement
{
};
registerIfcClass(IfcFeatureElementSubtraction, schema);

class IfcPlanarExtent extends IfcGeometricRepresentationItem
{
  SizeInX = null; // TYPE IfcLengthMeasure = REAL
  SizeInY = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcPlanarExtent, schema);

class IfcPlanarBox extends IfcPlanarExtent
{
  Placement = null; // TYPE IfcAxis2Placement = SELECT [IfcAxis2Placement2D, IfcAxis2Placement3D]
};
registerIfcClass(IfcPlanarBox, schema);

class IfcFlowTerminal extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowTerminal, schema);

class IfcOutlet extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcOutletTypeEnum = ENUMERATION OF [AUDIOVISUALOUTLET, COMMUNICATIONSOUTLET, POWEROUTLET, DATAOUTLET, TELEPHONEOUTLET, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcOutlet, schema);

class IfcPort extends IfcProduct
{
};
registerIfcClass(IfcPort, schema);

class IfcRelConnects extends IfcRelationship
{
};
registerIfcClass(IfcRelConnects, schema);

class IfcRelSequence extends IfcRelConnects
{
  RelatingProcess = null; // ENTITY IfcProcess SUBTYPE OF IfcObject
  RelatedProcess = null; // ENTITY IfcProcess SUBTYPE OF IfcObject
  TimeLag = null; // ENTITY IfcLagTime SUBTYPE OF IfcSchedulingTime
  SequenceType = null; // TYPE IfcSequenceEnum = ENUMERATION OF [START_START, START_FINISH, FINISH_START, FINISH_FINISH, USERDEFINED, NOTDEFINED]
  UserDefinedSequenceType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcRelSequence, schema);

class IfcTimePeriod extends SchemaBase
{
  StartTime = null; // TYPE IfcTime = STRING
  EndTime = null; // TYPE IfcTime = STRING
};
registerIfcClass(IfcTimePeriod, schema);

class IfcSweptSurface extends IfcSurface
{
  SweptCurve = null; // ENTITY IfcProfileDef
  Position = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcSweptSurface, schema);

class IfcRelAssociates extends IfcRelationship
{
  RelatedObjects = null; // SET[1:0] OF IfcDefinitionSelect
};
registerIfcClass(IfcRelAssociates, schema);

class IfcRelAssociatesConstraint extends IfcRelAssociates
{
  Intent = null; // TYPE IfcLabel = STRING
  RelatingConstraint = null; // ENTITY IfcConstraint
};
registerIfcClass(IfcRelAssociatesConstraint, schema);

class IfcPresentationStyle extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcPresentationStyle, schema);

class IfcTextStyle extends IfcPresentationStyle
{
  TextCharacterAppearance = null; // ENTITY IfcTextStyleForDefinedFont SUBTYPE OF IfcPresentationItem
  TextStyle = null; // ENTITY IfcTextStyleTextModel SUBTYPE OF IfcPresentationItem
  TextFontStyle = null; // TYPE IfcTextFontSelect = SELECT [IfcExternallyDefinedTextFont, IfcPreDefinedTextFont]
  ModelOrDraughting = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcTextStyle, schema);

class IfcTopologicalRepresentationItem extends IfcRepresentationItem
{
};
registerIfcClass(IfcTopologicalRepresentationItem, schema);

class IfcConnectedFaceSet extends IfcTopologicalRepresentationItem
{
  CfsFaces = null; // SET[1:0] OF IfcFace
};
registerIfcClass(IfcConnectedFaceSet, schema);

class IfcOpenShell extends IfcConnectedFaceSet
{
};
registerIfcClass(IfcOpenShell, schema);

class IfcSlab extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcSlabTypeEnum = ENUMERATION OF [FLOOR, ROOF, LANDING, BASESLAB, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSlab, schema);

class IfcSlabStandardCase extends IfcSlab
{
};
registerIfcClass(IfcSlabStandardCase, schema);

class IfcCircleProfileDef extends IfcParameterizedProfileDef
{
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCircleProfileDef, schema);

class IfcPropertySetDefinition extends IfcPropertyDefinition
{
};
registerIfcClass(IfcPropertySetDefinition, schema);

class IfcPreDefinedPropertySet extends IfcPropertySetDefinition
{
};
registerIfcClass(IfcPreDefinedPropertySet, schema);

class IfcDoorLiningProperties extends IfcPreDefinedPropertySet
{
  LiningDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  LiningThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  ThresholdDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ThresholdThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransomThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransomOffset = null; // TYPE IfcLengthMeasure = REAL
  LiningOffset = null; // TYPE IfcLengthMeasure = REAL
  ThresholdOffset = null; // TYPE IfcLengthMeasure = REAL
  CasingThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  CasingDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ShapeAspectStyle = null; // ENTITY IfcShapeAspect
  LiningToPanelOffsetX = null; // TYPE IfcLengthMeasure = REAL
  LiningToPanelOffsetY = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcDoorLiningProperties, schema);

class IfcPersonAndOrganization extends SchemaBase
{
  ThePerson = null; // ENTITY IfcPerson
  TheOrganization = null; // ENTITY IfcOrganization
  Roles = null; // LIST[1:0] OF IfcActorRole
};
registerIfcClass(IfcPersonAndOrganization, schema);

class IfcFlowTreatmentDeviceType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowTreatmentDeviceType, schema);

class IfcDuctSilencerType extends IfcFlowTreatmentDeviceType
{
  PredefinedType = null; // TYPE IfcDuctSilencerTypeEnum = ENUMERATION OF [FLATOVAL, RECTANGULAR, ROUND, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDuctSilencerType, schema);

class IfcElementComponent extends IfcElement
{
};
registerIfcClass(IfcElementComponent, schema);

class IfcReinforcingElement extends IfcElementComponent
{
  SteelGrade = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcReinforcingElement, schema);

class IfcAddress extends SchemaBase
{
  Purpose = null; // TYPE IfcAddressTypeEnum = ENUMERATION OF [OFFICE, SITE, HOME, DISTRIBUTIONPOINT, USERDEFINED]
  Description = null; // TYPE IfcText = STRING
  UserDefinedPurpose = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcAddress, schema);

class IfcPostalAddress extends IfcAddress
{
  InternalLocation = null; // TYPE IfcLabel = STRING
  AddressLines = null; // LIST[1:0] OF IfcLabel
  PostalBox = null; // TYPE IfcLabel = STRING
  Town = null; // TYPE IfcLabel = STRING
  Region = null; // TYPE IfcLabel = STRING
  PostalCode = null; // TYPE IfcLabel = STRING
  Country = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcPostalAddress, schema);

class IfcPresentationLayerAssignment extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  AssignedItems = null; // SET[1:0] OF IfcLayeredItem
  Identifier = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcPresentationLayerAssignment, schema);

class IfcPoint extends IfcGeometricRepresentationItem
{
};
registerIfcClass(IfcPoint, schema);

class IfcPointOnCurve extends IfcPoint
{
  BasisCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  PointParameter = null; // TYPE IfcParameterValue = REAL
};
registerIfcClass(IfcPointOnCurve, schema);

class IfcBuildingElementType extends IfcElementType
{
};
registerIfcClass(IfcBuildingElementType, schema);

class IfcCoveringType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcCoveringTypeEnum = ENUMERATION OF [CEILING, FLOORING, CLADDING, ROOFING, MOLDING, SKIRTINGBOARD, INSULATION, MEMBRANE, SLEEVING, WRAPPING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCoveringType, schema);

class IfcMaterialClassificationRelationship extends SchemaBase
{
  MaterialClassifications = null; // SET[1:0] OF IfcClassificationSelect
  ClassifiedMaterial = null; // ENTITY IfcMaterial SUBTYPE OF IfcMaterialDefinition
};
registerIfcClass(IfcMaterialClassificationRelationship, schema);

class IfcFlowTreatmentDevice extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowTreatmentDevice, schema);

class IfcDuctSilencer extends IfcFlowTreatmentDevice
{
  PredefinedType = null; // TYPE IfcDuctSilencerTypeEnum = ENUMERATION OF [FLATOVAL, RECTANGULAR, ROUND, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDuctSilencer, schema);

class IfcBuildingElementPartType extends IfcElementComponentType
{
  PredefinedType = null; // TYPE IfcBuildingElementPartTypeEnum = ENUMERATION OF [INSULATION, PRECASTPANEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBuildingElementPartType, schema);

class IfcMaterialDefinition extends SchemaBase
{
};
registerIfcClass(IfcMaterialDefinition, schema);

class IfcMaterialLayer extends IfcMaterialDefinition
{
  Material = null; // ENTITY IfcMaterial SUBTYPE OF IfcMaterialDefinition
  LayerThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  IsVentilated = null; // TYPE IfcLogical = LOGICAL
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Category = null; // TYPE IfcLabel = STRING
  Priority = null; // TYPE IfcInteger = INTEGER
};
registerIfcClass(IfcMaterialLayer, schema);

class IfcSystem extends IfcGroup
{
};
registerIfcClass(IfcSystem, schema);

class IfcDistributionSystem extends IfcSystem
{
  LongName = null; // TYPE IfcLabel = STRING
  PredefinedType = null; // TYPE IfcDistributionSystemEnum = ENUMERATION OF [AIRCONDITIONING, AUDIOVISUAL, CHEMICAL, CHILLEDWATER, COMMUNICATION, COMPRESSEDAIR, CONDENSERWATER, CONTROL, CONVEYING, DATA, DISPOSAL, DOMESTICCOLDWATER, DOMESTICHOTWATER, DRAINAGE, EARTHING, ELECTRICAL, ELECTROACOUSTIC, EXHAUST, FIREPROTECTION, FUEL, GAS, HAZARDOUS, HEATING, LIGHTING, LIGHTNINGPROTECTION, MUNICIPALSOLIDWASTE, OIL, OPERATIONAL, POWERGENERATION, RAINWATER, REFRIGERATION, SECURITY, SEWAGE, SIGNAL, STORMWATER, TELEPHONE, TV, VACUUM, VENT, VENTILATION, WASTEWATER, WATERSUPPLY, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDistributionSystem, schema);

class IfcRelAssigns extends IfcRelationship
{
  RelatedObjects = null; // SET[1:0] OF IfcObjectDefinition
  RelatedObjectsType = null; // TYPE IfcObjectTypeEnum = ENUMERATION OF [PRODUCT, PROCESS, CONTROL, RESOURCE, ACTOR, GROUP, PROJECT, NOTDEFINED]
};
registerIfcClass(IfcRelAssigns, schema);

class IfcRelAssignsToResource extends IfcRelAssigns
{
  RelatingResource = null; // TYPE IfcResourceSelect = SELECT [IfcResource, IfcTypeResource]
};
registerIfcClass(IfcRelAssignsToResource, schema);

class IfcCivilElementType extends IfcElementType
{
};
registerIfcClass(IfcCivilElementType, schema);

class IfcCsgPrimitive3D extends IfcGeometricRepresentationItem
{
  Position = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcCsgPrimitive3D, schema);

class IfcRectangularPyramid extends IfcCsgPrimitive3D
{
  XLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  YLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  Height = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcRectangularPyramid, schema);

class IfcTubeBundleType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcTubeBundleTypeEnum = ENUMERATION OF [FINNED, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTubeBundleType, schema);

class IfcRailing extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcRailingTypeEnum = ENUMERATION OF [HANDRAIL, GUARDRAIL, BALUSTRADE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRailing, schema);

class IfcVirtualElement extends IfcElement
{
};
registerIfcClass(IfcVirtualElement, schema);

class IfcRelSpaceBoundary extends IfcRelConnects
{
  RelatingSpace = null; // TYPE IfcSpaceBoundarySelect = SELECT [IfcExternalSpatialElement, IfcSpace]
  RelatedBuildingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  ConnectionGeometry = null; // ENTITY IfcConnectionGeometry
  PhysicalOrVirtualBoundary = null; // TYPE IfcPhysicalOrVirtualEnum = ENUMERATION OF [PHYSICAL, VIRTUAL, NOTDEFINED]
  InternalOrExternalBoundary = null; // TYPE IfcInternalOrExternalEnum = ENUMERATION OF [INTERNAL, EXTERNAL, EXTERNAL_EARTH, EXTERNAL_WATER, EXTERNAL_FIRE, NOTDEFINED]
};
registerIfcClass(IfcRelSpaceBoundary, schema);

class IfcStair extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcStairTypeEnum = ENUMERATION OF [STRAIGHT_RUN_STAIR, TWO_STRAIGHT_RUN_STAIR, QUARTER_WINDING_STAIR, QUARTER_TURN_STAIR, HALF_WINDING_STAIR, HALF_TURN_STAIR, TWO_QUARTER_WINDING_STAIR, TWO_QUARTER_TURN_STAIR, THREE_QUARTER_WINDING_STAIR, THREE_QUARTER_TURN_STAIR, SPIRAL_STAIR, DOUBLE_RETURN_STAIR, CURVED_RUN_STAIR, TWO_CURVED_RUN_STAIR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStair, schema);

class IfcStructuralConnectionCondition extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcStructuralConnectionCondition, schema);

class IfcFailureConnectionCondition extends IfcStructuralConnectionCondition
{
  TensionFailureX = null; // TYPE IfcForceMeasure = REAL
  TensionFailureY = null; // TYPE IfcForceMeasure = REAL
  TensionFailureZ = null; // TYPE IfcForceMeasure = REAL
  CompressionFailureX = null; // TYPE IfcForceMeasure = REAL
  CompressionFailureY = null; // TYPE IfcForceMeasure = REAL
  CompressionFailureZ = null; // TYPE IfcForceMeasure = REAL
};
registerIfcClass(IfcFailureConnectionCondition, schema);

class IfcFeatureElementAddition extends IfcFeatureElement
{
};
registerIfcClass(IfcFeatureElementAddition, schema);

class IfcProjectionElement extends IfcFeatureElementAddition
{
  PredefinedType = null; // TYPE IfcProjectionElementTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProjectionElement, schema);

class IfcLightFixtureType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcLightFixtureTypeEnum = ENUMERATION OF [POINTSOURCE, DIRECTIONSOURCE, SECURITYLIGHTING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcLightFixtureType, schema);

class IfcControl extends IfcObject
{
  Identification = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcControl, schema);

class IfcWorkCalendar extends IfcControl
{
  WorkingTimes = null; // SET[1:0] OF IfcWorkTime
  ExceptionTimes = null; // SET[1:0] OF IfcWorkTime
  PredefinedType = null; // TYPE IfcWorkCalendarTypeEnum = ENUMERATION OF [FIRSTSHIFT, SECONDSHIFT, THIRDSHIFT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWorkCalendar, schema);

class IfcSpatialElement extends IfcProduct
{
  LongName = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcSpatialElement, schema);

class IfcExternalSpatialStructureElement extends IfcSpatialElement
{
};
registerIfcClass(IfcExternalSpatialStructureElement, schema);

class IfcExternalSpatialElement extends IfcExternalSpatialStructureElement
{
  PredefinedType = null; // TYPE IfcExternalSpatialElementTypeEnum = ENUMERATION OF [EXTERNAL, EXTERNAL_EARTH, EXTERNAL_WATER, EXTERNAL_FIRE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcExternalSpatialElement, schema);

class IfcLightSourcePositional extends IfcLightSource
{
  Position = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ConstantAttenuation = null; // TYPE IfcReal = REAL
  DistanceAttenuation = null; // TYPE IfcReal = REAL
  QuadricAttenuation = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcLightSourcePositional, schema);

class IfcLightSourceSpot extends IfcLightSourcePositional
{
  Orientation = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  ConcentrationExponent = null; // TYPE IfcReal = REAL
  SpreadAngle = null; // TYPE IfcPositivePlaneAngleMeasure = TYPE IfcPlaneAngleMeasure = REAL
  BeamWidthAngle = null; // TYPE IfcPositivePlaneAngleMeasure = TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcLightSourceSpot, schema);

class IfcBlock extends IfcCsgPrimitive3D
{
  XLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  YLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ZLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcBlock, schema);

class IfcOffsetCurve2D extends IfcCurve
{
  BasisCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  Distance = null; // TYPE IfcLengthMeasure = REAL
  SelfIntersect = null; // TYPE IfcLogical = LOGICAL
};
registerIfcClass(IfcOffsetCurve2D, schema);

class IfcHalfSpaceSolid extends IfcGeometricRepresentationItem
{
  BaseSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
  AgreementFlag = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcHalfSpaceSolid, schema);

class IfcPolygonalBoundedHalfSpace extends IfcHalfSpaceSolid
{
  Position = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
  PolygonalBoundary = null; // ENTITY IfcBoundedCurve SUBTYPE OF IfcCurve
};
registerIfcClass(IfcPolygonalBoundedHalfSpace, schema);

class IfcDistributionControlElementType extends IfcDistributionElementType
{
};
registerIfcClass(IfcDistributionControlElementType, schema);

class IfcProtectiveDeviceTrippingUnitType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcProtectiveDeviceTrippingUnitTypeEnum = ENUMERATION OF [ELECTRONIC, ELECTROMAGNETIC, RESIDUALCURRENT, THERMAL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProtectiveDeviceTrippingUnitType, schema);

class IfcTessellatedItem extends IfcGeometricRepresentationItem
{
};
registerIfcClass(IfcTessellatedItem, schema);

class IfcTessellatedFaceSet extends IfcTessellatedItem
{
  Coordinates = null; // ENTITY IfcCartesianPointList3D SUBTYPE OF IfcCartesianPointList
};
registerIfcClass(IfcTessellatedFaceSet, schema);

class IfcTriangulatedFaceSet extends IfcTessellatedFaceSet
{
  Normals = null; // LIST[1:0] OF LIST[3:3] OF IfcParameterValue
  Closed = null; // TYPE IfcBoolean = BOOLEAN
  CoordIndex = null; // LIST[1:0] OF LIST[3:3] OF IfcPositiveInteger
  PnIndex = null; // LIST[1:0] OF IfcPositiveInteger
};
registerIfcClass(IfcTriangulatedFaceSet, schema);

class IfcDerivedProfileDef extends IfcProfileDef
{
  ParentProfile = null; // ENTITY IfcProfileDef
  Operator = null; // ENTITY IfcCartesianTransformationOperator2D SUBTYPE OF IfcCartesianTransformationOperator
  Label = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcDerivedProfileDef, schema);

class IfcMirroredProfileDef extends IfcDerivedProfileDef
{
};
registerIfcClass(IfcMirroredProfileDef, schema);

class IfcFurniture extends IfcFurnishingElement
{
  PredefinedType = null; // TYPE IfcFurnitureTypeEnum = ENUMERATION OF [CHAIR, TABLE, DESK, BED, FILECABINET, SHELF, SOFA, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFurniture, schema);

class IfcTrapeziumProfileDef extends IfcParameterizedProfileDef
{
  BottomXDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TopXDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  YDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TopXOffset = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcTrapeziumProfileDef, schema);

class IfcElectricGeneratorType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcElectricGeneratorTypeEnum = ENUMERATION OF [CHP, ENGINEGENERATOR, STANDALONE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricGeneratorType, schema);

class IfcHumidifierType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcHumidifierTypeEnum = ENUMERATION OF [STEAMINJECTION, ADIABATICAIRWASHER, ADIABATICPAN, ADIABATICWETTEDELEMENT, ADIABATICATOMIZING, ADIABATICULTRASONIC, ADIABATICRIGIDMEDIA, ADIABATICCOMPRESSEDAIRNOZZLE, ASSISTEDELECTRIC, ASSISTEDNATURALGAS, ASSISTEDPROPANE, ASSISTEDBUTANE, ASSISTEDSTEAM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcHumidifierType, schema);

class IfcWindowPanelProperties extends IfcPreDefinedPropertySet
{
  OperationType = null; // TYPE IfcWindowPanelOperationEnum = ENUMERATION OF [SIDEHUNGRIGHTHAND, SIDEHUNGLEFTHAND, TILTANDTURNRIGHTHAND, TILTANDTURNLEFTHAND, TOPHUNG, BOTTOMHUNG, PIVOTHORIZONTAL, PIVOTVERTICAL, SLIDINGHORIZONTAL, SLIDINGVERTICAL, REMOVABLECASEMENT, FIXEDCASEMENT, OTHEROPERATION, NOTDEFINED]
  PanelPosition = null; // TYPE IfcWindowPanelPositionEnum = ENUMERATION OF [LEFT, MIDDLE, RIGHT, BOTTOM, TOP, NOTDEFINED]
  FrameDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FrameThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ShapeAspectStyle = null; // ENTITY IfcShapeAspect
};
registerIfcClass(IfcWindowPanelProperties, schema);

class IfcMechanicalFastenerType extends IfcElementComponentType
{
  PredefinedType = null; // TYPE IfcMechanicalFastenerTypeEnum = ENUMERATION OF [ANCHORBOLT, BOLT, DOWEL, NAIL, NAILPLATE, RIVET, SCREW, SHEARCONNECTOR, STAPLE, STUDSHEARCONNECTOR, USERDEFINED, NOTDEFINED]
  NominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  NominalLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcMechanicalFastenerType, schema);

class IfcProductRepresentation extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Representations = null; // LIST[1:0] OF IfcRepresentation
};
registerIfcClass(IfcProductRepresentation, schema);

class IfcProductDefinitionShape extends IfcProductRepresentation
{
};
registerIfcClass(IfcProductDefinitionShape, schema);

class IfcPropertySetTemplate extends IfcPropertyTemplateDefinition
{
  TemplateType = null; // TYPE IfcPropertySetTemplateTypeEnum = ENUMERATION OF [PSET_TYPEDRIVENONLY, PSET_TYPEDRIVENOVERRIDE, PSET_OCCURRENCEDRIVEN, PSET_PERFORMANCEDRIVEN, QTO_TYPEDRIVENONLY, QTO_TYPEDRIVENOVERRIDE, QTO_OCCURRENCEDRIVEN, NOTDEFINED]
  ApplicableEntity = null; // TYPE IfcIdentifier = STRING
  HasPropertyTemplates = null; // SET[1:0] OF IfcPropertyTemplate
};
registerIfcClass(IfcPropertySetTemplate, schema);

class IfcIndexedPolygonalFace extends IfcTessellatedItem
{
  CoordIndex = null; // LIST[3:0] OF IfcPositiveInteger
};
registerIfcClass(IfcIndexedPolygonalFace, schema);

class IfcIndexedPolygonalFaceWithVoids extends IfcIndexedPolygonalFace
{
  InnerCoordIndices = null; // LIST[1:0] OF LIST[3:0] OF IfcPositiveInteger
};
registerIfcClass(IfcIndexedPolygonalFaceWithVoids, schema);

class IfcCartesianPoint extends IfcPoint
{
  Coordinates = null; // LIST[1:3] OF IfcLengthMeasure
};
registerIfcClass(IfcCartesianPoint, schema);

class IfcRevolvedAreaSolid extends IfcSweptAreaSolid
{
  Axis = null; // ENTITY IfcAxis1Placement SUBTYPE OF IfcPlacement
  Angle = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcRevolvedAreaSolid, schema);

class IfcRevolvedAreaSolidTapered extends IfcRevolvedAreaSolid
{
  EndSweptArea = null; // ENTITY IfcProfileDef
};
registerIfcClass(IfcRevolvedAreaSolidTapered, schema);

class IfcConstraint extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  ConstraintGrade = null; // TYPE IfcConstraintEnum = ENUMERATION OF [HARD, SOFT, ADVISORY, USERDEFINED, NOTDEFINED]
  ConstraintSource = null; // TYPE IfcLabel = STRING
  CreatingActor = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  CreationTime = null; // TYPE IfcDateTime = STRING
  UserDefinedGrade = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcConstraint, schema);

class IfcMetric extends IfcConstraint
{
  Benchmark = null; // TYPE IfcBenchmarkEnum = ENUMERATION OF [GREATERTHAN, GREATERTHANOREQUALTO, LESSTHAN, LESSTHANOREQUALTO, EQUALTO, NOTEQUALTO, INCLUDES, NOTINCLUDES, INCLUDEDIN, NOTINCLUDEDIN]
  ValueSource = null; // TYPE IfcLabel = STRING
  DataValue = null; // TYPE IfcMetricValueSelect = SELECT [IfcAppliedValue, IfcMeasureWithUnit, IfcReference, IfcTable, IfcTimeSeries, IfcValue]
  ReferencePath = null; // ENTITY IfcReference
};
registerIfcClass(IfcMetric, schema);

class IfcTextLiteral extends IfcGeometricRepresentationItem
{
  Literal = null; // TYPE IfcPresentableText = STRING
  Placement = null; // TYPE IfcAxis2Placement = SELECT [IfcAxis2Placement2D, IfcAxis2Placement3D]
  Path = null; // TYPE IfcTextPath = ENUMERATION OF [LEFT, RIGHT, UP, DOWN]
};
registerIfcClass(IfcTextLiteral, schema);

class IfcBSplineCurve extends IfcBoundedCurve
{
  Degree = null; // TYPE IfcInteger = INTEGER
  ControlPointsList = null; // LIST[2:0] OF IfcCartesianPoint
  CurveForm = null; // TYPE IfcBSplineCurveForm = ENUMERATION OF [POLYLINE_FORM, CIRCULAR_ARC, ELLIPTIC_ARC, PARABOLIC_ARC, HYPERBOLIC_ARC, UNSPECIFIED]
  ClosedCurve = null; // TYPE IfcLogical = LOGICAL
  SelfIntersect = null; // TYPE IfcLogical = LOGICAL
};
registerIfcClass(IfcBSplineCurve, schema);

class IfcReinforcingElementType extends IfcElementComponentType
{
};
registerIfcClass(IfcReinforcingElementType, schema);

class IfcReinforcingMeshType extends IfcReinforcingElementType
{
  PredefinedType = null; // TYPE IfcReinforcingMeshTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
  MeshLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  MeshWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  LongitudinalBarNominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransverseBarNominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  LongitudinalBarCrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  TransverseBarCrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  LongitudinalBarSpacing = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransverseBarSpacing = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  BendingShapeCode = null; // TYPE IfcLabel = STRING
  BendingParameters = null; // LIST[1:0] OF IfcBendingParameterSelect
};
registerIfcClass(IfcReinforcingMeshType, schema);

class IfcFireSuppressionTerminal extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcFireSuppressionTerminalTypeEnum = ENUMERATION OF [BREECHINGINLET, FIREHYDRANT, HOSEREEL, SPRINKLER, SPRINKLERDEFLECTOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFireSuppressionTerminal, schema);

class IfcOwnerHistory extends SchemaBase
{
  OwningUser = null; // ENTITY IfcPersonAndOrganization
  OwningApplication = null; // ENTITY IfcApplication
  State = null; // TYPE IfcStateEnum = ENUMERATION OF [READWRITE, READONLY, LOCKED, READWRITELOCKED, READONLYLOCKED]
  ChangeAction = null; // TYPE IfcChangeActionEnum = ENUMERATION OF [NOCHANGE, MODIFIED, ADDED, DELETED, NOTDEFINED]
  LastModifiedDate = null; // TYPE IfcTimeStamp = INTEGER
  LastModifyingUser = null; // ENTITY IfcPersonAndOrganization
  LastModifyingApplication = null; // ENTITY IfcApplication
  CreationDate = null; // TYPE IfcTimeStamp = INTEGER
};
registerIfcClass(IfcOwnerHistory, schema);

class IfcBoiler extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcBoilerTypeEnum = ENUMERATION OF [WATER, STEAM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBoiler, schema);

class IfcConnectionGeometry extends SchemaBase
{
};
registerIfcClass(IfcConnectionGeometry, schema);

class IfcConnectionCurveGeometry extends IfcConnectionGeometry
{
  CurveOnRelatingElement = null; // TYPE IfcCurveOrEdgeCurve = SELECT [IfcBoundedCurve, IfcEdgeCurve]
  CurveOnRelatedElement = null; // TYPE IfcCurveOrEdgeCurve = SELECT [IfcBoundedCurve, IfcEdgeCurve]
};
registerIfcClass(IfcConnectionCurveGeometry, schema);

class IfcSimpleProperty extends IfcProperty
{
};
registerIfcClass(IfcSimpleProperty, schema);

class IfcDoorStyle extends IfcTypeProduct
{
  OperationType = null; // TYPE IfcDoorStyleOperationEnum = ENUMERATION OF [SINGLE_SWING_LEFT, SINGLE_SWING_RIGHT, DOUBLE_DOOR_SINGLE_SWING, DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT, DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT, DOUBLE_SWING_LEFT, DOUBLE_SWING_RIGHT, DOUBLE_DOOR_DOUBLE_SWING, SLIDING_TO_LEFT, SLIDING_TO_RIGHT, DOUBLE_DOOR_SLIDING, FOLDING_TO_LEFT, FOLDING_TO_RIGHT, DOUBLE_DOOR_FOLDING, REVOLVING, ROLLINGUP, USERDEFINED, NOTDEFINED]
  ConstructionType = null; // TYPE IfcDoorStyleConstructionEnum = ENUMERATION OF [ALUMINIUM, HIGH_GRADE_STEEL, STEEL, WOOD, ALUMINIUM_WOOD, ALUMINIUM_PLASTIC, PLASTIC, USERDEFINED, NOTDEFINED]
  ParameterTakesPrecedence = null; // TYPE IfcBoolean = BOOLEAN
  Sizeable = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcDoorStyle, schema);

class IfcBooleanResult extends IfcGeometricRepresentationItem
{
  Operator = null; // TYPE IfcBooleanOperator = ENUMERATION OF [UNION, INTERSECTION, DIFFERENCE]
  FirstOperand = null; // TYPE IfcBooleanOperand = SELECT [IfcBooleanResult, IfcCsgPrimitive3D, IfcHalfSpaceSolid, IfcSolidModel, IfcTessellatedFaceSet]
  SecondOperand = null; // TYPE IfcBooleanOperand = SELECT [IfcBooleanResult, IfcCsgPrimitive3D, IfcHalfSpaceSolid, IfcSolidModel, IfcTessellatedFaceSet]
};
registerIfcClass(IfcBooleanResult, schema);

class IfcFlowStorageDevice extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowStorageDevice, schema);

class IfcElectricFlowStorageDevice extends IfcFlowStorageDevice
{
  PredefinedType = null; // TYPE IfcElectricFlowStorageDeviceTypeEnum = ENUMERATION OF [BATTERY, CAPACITORBANK, HARMONICFILTER, INDUCTORBANK, UPS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricFlowStorageDevice, schema);

class IfcWall extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcWallTypeEnum = ENUMERATION OF [MOVABLE, PARAPET, PARTITIONING, PLUMBINGWALL, SHEAR, SOLIDWALL, STANDARD, POLYGONAL, ELEMENTEDWALL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWall, schema);

class IfcFlowSegment extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowSegment, schema);

class IfcDuctSegment extends IfcFlowSegment
{
  PredefinedType = null; // TYPE IfcDuctSegmentTypeEnum = ENUMERATION OF [RIGIDSEGMENT, FLEXIBLESEGMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDuctSegment, schema);

class IfcCableSegment extends IfcFlowSegment
{
  PredefinedType = null; // TYPE IfcCableSegmentTypeEnum = ENUMERATION OF [BUSBARSEGMENT, CABLESEGMENT, CONDUCTORSEGMENT, CORESEGMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableSegment, schema);

class IfcStructuralActivity extends IfcProduct
{
  AppliedLoad = null; // ENTITY IfcStructuralLoad
  GlobalOrLocal = null; // TYPE IfcGlobalOrLocalEnum = ENUMERATION OF [GLOBAL_COORDS, LOCAL_COORDS]
};
registerIfcClass(IfcStructuralActivity, schema);

class IfcEvaporativeCooler extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF [DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER, DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER, DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER, DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER, DIRECTEVAPORATIVEAIRWASHER, INDIRECTEVAPORATIVEPACKAGEAIRCOOLER, INDIRECTEVAPORATIVEWETCOIL, INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER, INDIRECTDIRECTCOMBINATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcEvaporativeCooler, schema);

class IfcCovering extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcCoveringTypeEnum = ENUMERATION OF [CEILING, FLOORING, CLADDING, ROOFING, MOLDING, SKIRTINGBOARD, INSULATION, MEMBRANE, SLEEVING, WRAPPING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCovering, schema);

class IfcToroidalSurface extends IfcElementarySurface
{
  MajorRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  MinorRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcToroidalSurface, schema);

class IfcLamp extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcLampTypeEnum = ENUMERATION OF [COMPACTFLUORESCENT, FLUORESCENT, HALOGEN, HIGHPRESSUREMERCURY, HIGHPRESSURESODIUM, LED, METALHALIDE, OLED, TUNGSTENFILAMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcLamp, schema);

class IfcOpeningElement extends IfcFeatureElementSubtraction
{
  PredefinedType = null; // TYPE IfcOpeningElementTypeEnum = ENUMERATION OF [OPENING, RECESS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcOpeningElement, schema);

class IfcOpeningStandardCase extends IfcOpeningElement
{
};
registerIfcClass(IfcOpeningStandardCase, schema);

class IfcWorkControl extends IfcControl
{
  CreationDate = null; // TYPE IfcDateTime = STRING
  Creators = null; // SET[1:0] OF IfcPerson
  Purpose = null; // TYPE IfcLabel = STRING
  Duration = null; // TYPE IfcDuration = STRING
  TotalFloat = null; // TYPE IfcDuration = STRING
  StartTime = null; // TYPE IfcDateTime = STRING
  FinishTime = null; // TYPE IfcDateTime = STRING
};
registerIfcClass(IfcWorkControl, schema);

class IfcWorkPlan extends IfcWorkControl
{
  PredefinedType = null; // TYPE IfcWorkPlanTypeEnum = ENUMERATION OF [ACTUAL, BASELINE, PLANNED, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWorkPlan, schema);

class IfcWorkSchedule extends IfcWorkControl
{
  PredefinedType = null; // TYPE IfcWorkScheduleTypeEnum = ENUMERATION OF [ACTUAL, BASELINE, PLANNED, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWorkSchedule, schema);

class IfcShapeRepresentation extends IfcShapeModel
{
};
registerIfcClass(IfcShapeRepresentation, schema);

class IfcDistributionPort extends IfcPort
{
  FlowDirection = null; // TYPE IfcFlowDirectionEnum = ENUMERATION OF [SOURCE, SINK, SOURCEANDSINK, NOTDEFINED]
  PredefinedType = null; // TYPE IfcDistributionPortTypeEnum = ENUMERATION OF [CABLE, CABLECARRIER, DUCT, PIPE, USERDEFINED, NOTDEFINED]
  SystemType = null; // TYPE IfcDistributionSystemEnum = ENUMERATION OF [AIRCONDITIONING, AUDIOVISUAL, CHEMICAL, CHILLEDWATER, COMMUNICATION, COMPRESSEDAIR, CONDENSERWATER, CONTROL, CONVEYING, DATA, DISPOSAL, DOMESTICCOLDWATER, DOMESTICHOTWATER, DRAINAGE, EARTHING, ELECTRICAL, ELECTROACOUSTIC, EXHAUST, FIREPROTECTION, FUEL, GAS, HAZARDOUS, HEATING, LIGHTING, LIGHTNINGPROTECTION, MUNICIPALSOLIDWASTE, OIL, OPERATIONAL, POWERGENERATION, RAINWATER, REFRIGERATION, SECURITY, SEWAGE, SIGNAL, STORMWATER, TELEPHONE, TV, VACUUM, VENT, VENTILATION, WASTEWATER, WATERSUPPLY, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDistributionPort, schema);

class IfcArbitraryClosedProfileDef extends IfcProfileDef
{
  OuterCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcArbitraryClosedProfileDef, schema);

class IfcPlacement extends IfcGeometricRepresentationItem
{
  Location = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
};
registerIfcClass(IfcPlacement, schema);

class IfcAxis2Placement2D extends IfcPlacement
{
  RefDirection = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcAxis2Placement2D, schema);

class IfcFacetedBrepWithVoids extends IfcFacetedBrep
{
  Voids = null; // SET[1:0] OF IfcClosedShell
};
registerIfcClass(IfcFacetedBrepWithVoids, schema);

class IfcCableCarrierSegment extends IfcFlowSegment
{
  PredefinedType = null; // TYPE IfcCableCarrierSegmentTypeEnum = ENUMERATION OF [CABLELADDERSEGMENT, CABLETRAYSEGMENT, CABLETRUNKINGSEGMENT, CONDUITSEGMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableCarrierSegment, schema);

class IfcSubContractResource extends IfcConstructionResource
{
  PredefinedType = null; // TYPE IfcSubContractResourceTypeEnum = ENUMERATION OF [PURCHASE, WORK, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSubContractResource, schema);

class IfcAirTerminalBoxType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcAirTerminalBoxTypeEnum = ENUMERATION OF [CONSTANTFLOW, VARIABLEFLOWPRESSUREDEPENDANT, VARIABLEFLOWPRESSUREINDEPENDANT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAirTerminalBoxType, schema);

class IfcSurfaceTexture extends IfcPresentationItem
{
  RepeatS = null; // TYPE IfcBoolean = BOOLEAN
  RepeatT = null; // TYPE IfcBoolean = BOOLEAN
  Mode = null; // TYPE IfcIdentifier = STRING
  TextureTransform = null; // ENTITY IfcCartesianTransformationOperator2D SUBTYPE OF IfcCartesianTransformationOperator
  Parameter = null; // LIST[1:0] OF IfcIdentifier
};
registerIfcClass(IfcSurfaceTexture, schema);

class IfcPixelTexture extends IfcSurfaceTexture
{
  Width = null; // TYPE IfcInteger = INTEGER
  Height = null; // TYPE IfcInteger = INTEGER
  ColourComponents = null; // TYPE IfcInteger = INTEGER
  Pixel = null; // LIST[1:0] OF IfcBinary
};
registerIfcClass(IfcPixelTexture, schema);

class IfcTable extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Rows = null; // LIST[1:0] OF IfcTableRow
  Columns = null; // LIST[1:0] OF IfcTableColumn
};
registerIfcClass(IfcTable, schema);

class IfcRelNests extends IfcRelDecomposes
{
  RelatingObject = null; // ENTITY IfcObjectDefinition SUBTYPE OF IfcRoot
  RelatedObjects = null; // LIST[1:0] OF IfcObjectDefinition
};
registerIfcClass(IfcRelNests, schema);

class IfcJunctionBoxType extends IfcFlowFittingType
{
  PredefinedType = null; // TYPE IfcJunctionBoxTypeEnum = ENUMERATION OF [DATA, POWER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcJunctionBoxType, schema);

class IfcLaborResource extends IfcConstructionResource
{
  PredefinedType = null; // TYPE IfcLaborResourceTypeEnum = ENUMERATION OF [ADMINISTRATION, CARPENTRY, CLEANING, CONCRETE, DRYWALL, ELECTRIC, FINISHING, FLOORING, GENERAL, HVAC, LANDSCAPING, MASONRY, PAINTING, PAVING, PLUMBING, ROOFING, SITEGRADING, STEELWORK, SURVEYING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcLaborResource, schema);

class IfcStructuralLoad extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcStructuralLoad, schema);

class IfcStructuralLoadConfiguration extends IfcStructuralLoad
{
  Values = null; // LIST[1:0] OF IfcStructuralLoadOrResult
  Locations = null; // LIST[1:0] OF LIST[1:2] OF IfcLengthMeasure
};
registerIfcClass(IfcStructuralLoadConfiguration, schema);

class IfcConic extends IfcCurve
{
  Position = null; // TYPE IfcAxis2Placement = SELECT [IfcAxis2Placement2D, IfcAxis2Placement3D]
};
registerIfcClass(IfcConic, schema);

class IfcEllipse extends IfcConic
{
  SemiAxis1 = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  SemiAxis2 = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcEllipse, schema);

class IfcAxis2Placement3D extends IfcPlacement
{
  Axis = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  RefDirection = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcAxis2Placement3D, schema);

class IfcAdvancedBrepWithVoids extends IfcAdvancedBrep
{
  Voids = null; // SET[1:0] OF IfcClosedShell
};
registerIfcClass(IfcAdvancedBrepWithVoids, schema);

class IfcObjective extends IfcConstraint
{
  BenchmarkValues = null; // LIST[1:0] OF IfcConstraint
  LogicalAggregator = null; // TYPE IfcLogicalOperatorEnum = ENUMERATION OF [LOGICALAND, LOGICALOR, LOGICALXOR, LOGICALNOTAND, LOGICALNOTOR]
  ObjectiveQualifier = null; // TYPE IfcObjectiveEnum = ENUMERATION OF [CODECOMPLIANCE, CODEWAIVER, DESIGNINTENT, EXTERNAL, HEALTHANDSAFETY, MERGECONFLICT, MODELVIEW, PARAMETER, REQUIREMENT, SPECIFICATION, TRIGGERCONDITION, USERDEFINED, NOTDEFINED]
  UserDefinedQualifier = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcObjective, schema);

class IfcConstructionMaterialResource extends IfcConstructionResource
{
  PredefinedType = null; // TYPE IfcConstructionMaterialResourceTypeEnum = ENUMERATION OF [AGGREGATES, CONCRETE, DRYWALL, FUEL, GYPSUM, MASONRY, METAL, PLASTIC, WOOD, NOTDEFINED, USERDEFINED]
};
registerIfcClass(IfcConstructionMaterialResource, schema);

class IfcNamedUnit extends SchemaBase
{
  Dimensions = null; // ENTITY IfcDimensionalExponents
  UnitType = null; // TYPE IfcUnitEnum = ENUMERATION OF [ABSORBEDDOSEUNIT, AMOUNTOFSUBSTANCEUNIT, AREAUNIT, DOSEEQUIVALENTUNIT, ELECTRICCAPACITANCEUNIT, ELECTRICCHARGEUNIT, ELECTRICCONDUCTANCEUNIT, ELECTRICCURRENTUNIT, ELECTRICRESISTANCEUNIT, ELECTRICVOLTAGEUNIT, ENERGYUNIT, FORCEUNIT, FREQUENCYUNIT, ILLUMINANCEUNIT, INDUCTANCEUNIT, LENGTHUNIT, LUMINOUSFLUXUNIT, LUMINOUSINTENSITYUNIT, MAGNETICFLUXDENSITYUNIT, MAGNETICFLUXUNIT, MASSUNIT, PLANEANGLEUNIT, POWERUNIT, PRESSUREUNIT, RADIOACTIVITYUNIT, SOLIDANGLEUNIT, THERMODYNAMICTEMPERATUREUNIT, TIMEUNIT, VOLUMEUNIT, USERDEFINED]
};
registerIfcClass(IfcNamedUnit, schema);

class IfcConversionBasedUnit extends IfcNamedUnit
{
  Name = null; // TYPE IfcLabel = STRING
  ConversionFactor = null; // ENTITY IfcMeasureWithUnit
};
registerIfcClass(IfcConversionBasedUnit, schema);

class IfcStructuralReaction extends IfcStructuralActivity
{
};
registerIfcClass(IfcStructuralReaction, schema);

class IfcStructuralCurveReaction extends IfcStructuralReaction
{
  PredefinedType = null; // TYPE IfcStructuralCurveActivityTypeEnum = ENUMERATION OF [CONST, LINEAR, POLYGONAL, EQUIDISTANT, SINUS, PARABOLA, DISCRETE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStructuralCurveReaction, schema);

class IfcSpatialElementType extends IfcTypeProduct
{
  ElementType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcSpatialElementType, schema);

class IfcSpatialStructureElementType extends IfcSpatialElementType
{
};
registerIfcClass(IfcSpatialStructureElementType, schema);

class IfcStackTerminalType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcStackTerminalTypeEnum = ENUMERATION OF [BIRDCAGE, COWL, RAINWATERHOPPER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStackTerminalType, schema);

class IfcWindow extends IfcBuildingElement
{
  OverallHeight = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  OverallWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PredefinedType = null; // TYPE IfcWindowTypeEnum = ENUMERATION OF [WINDOW, SKYLIGHT, LIGHTDOME, USERDEFINED, NOTDEFINED]
  PartitioningType = null; // TYPE IfcWindowTypePartitioningEnum = ENUMERATION OF [SINGLE_PANEL, DOUBLE_PANEL_VERTICAL, DOUBLE_PANEL_HORIZONTAL, TRIPLE_PANEL_VERTICAL, TRIPLE_PANEL_BOTTOM, TRIPLE_PANEL_TOP, TRIPLE_PANEL_LEFT, TRIPLE_PANEL_RIGHT, TRIPLE_PANEL_HORIZONTAL, USERDEFINED, NOTDEFINED]
  UserDefinedPartitioningType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcWindow, schema);

class IfcCondenserType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcCondenserTypeEnum = ENUMERATION OF [AIRCOOLED, EVAPORATIVECOOLED, WATERCOOLED, WATERCOOLEDBRAZEDPLATE, WATERCOOLEDSHELLCOIL, WATERCOOLEDSHELLTUBE, WATERCOOLEDTUBEINTUBE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCondenserType, schema);

class IfcCoolingTowerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcCoolingTowerTypeEnum = ENUMERATION OF [NATURALDRAFT, MECHANICALINDUCEDDRAFT, MECHANICALFORCEDDRAFT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCoolingTowerType, schema);

class IfcCartesianTransformationOperator extends IfcGeometricRepresentationItem
{
  Axis1 = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  Axis2 = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  LocalOrigin = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
  Scale = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcCartesianTransformationOperator, schema);

class IfcCartesianTransformationOperator2D extends IfcCartesianTransformationOperator
{
};
registerIfcClass(IfcCartesianTransformationOperator2D, schema);

class IfcCartesianTransformationOperator2DnonUniform extends IfcCartesianTransformationOperator2D
{
  Scale2 = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcCartesianTransformationOperator2DnonUniform, schema);

class IfcStructuralLoadOrResult extends IfcStructuralLoad
{
};
registerIfcClass(IfcStructuralLoadOrResult, schema);

class IfcStructuralLoadStatic extends IfcStructuralLoadOrResult
{
};
registerIfcClass(IfcStructuralLoadStatic, schema);

class IfcStructuralLoadSingleForce extends IfcStructuralLoadStatic
{
  ForceX = null; // TYPE IfcForceMeasure = REAL
  ForceY = null; // TYPE IfcForceMeasure = REAL
  ForceZ = null; // TYPE IfcForceMeasure = REAL
  MomentX = null; // TYPE IfcTorqueMeasure = REAL
  MomentY = null; // TYPE IfcTorqueMeasure = REAL
  MomentZ = null; // TYPE IfcTorqueMeasure = REAL
};
registerIfcClass(IfcStructuralLoadSingleForce, schema);

class IfcStructuralLoadSingleForceWarping extends IfcStructuralLoadSingleForce
{
  WarpingMoment = null; // TYPE IfcWarpingMomentMeasure = REAL
};
registerIfcClass(IfcStructuralLoadSingleForceWarping, schema);

class IfcFurnishingElementType extends IfcElementType
{
};
registerIfcClass(IfcFurnishingElementType, schema);

class IfcFurnitureType extends IfcFurnishingElementType
{
  AssemblyPlace = null; // TYPE IfcAssemblyPlaceEnum = ENUMERATION OF [SITE, FACTORY, NOTDEFINED]
  PredefinedType = null; // TYPE IfcFurnitureTypeEnum = ENUMERATION OF [CHAIR, TABLE, DESK, BED, FILECABINET, SHELF, SOFA, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFurnitureType, schema);

class IfcOffsetCurve3D extends IfcCurve
{
  BasisCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  Distance = null; // TYPE IfcLengthMeasure = REAL
  SelfIntersect = null; // TYPE IfcLogical = LOGICAL
  RefDirection = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcOffsetCurve3D, schema);

class IfcChimney extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcChimneyTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcChimney, schema);

class IfcElectricMotor extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcElectricMotorTypeEnum = ENUMERATION OF [DC, INDUCTION, POLYPHASE, RELUCTANCESYNCHRONOUS, SYNCHRONOUS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricMotor, schema);

class IfcStructuralLoadSingleDisplacement extends IfcStructuralLoadStatic
{
  DisplacementX = null; // TYPE IfcLengthMeasure = REAL
  DisplacementY = null; // TYPE IfcLengthMeasure = REAL
  DisplacementZ = null; // TYPE IfcLengthMeasure = REAL
  RotationalDisplacementRX = null; // TYPE IfcPlaneAngleMeasure = REAL
  RotationalDisplacementRY = null; // TYPE IfcPlaneAngleMeasure = REAL
  RotationalDisplacementRZ = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcStructuralLoadSingleDisplacement, schema);

class IfcRelContainedInSpatialStructure extends IfcRelConnects
{
  RelatedElements = null; // SET[1:0] OF IfcProduct
  RelatingStructure = null; // ENTITY IfcSpatialElement SUBTYPE OF IfcProduct
};
registerIfcClass(IfcRelContainedInSpatialStructure, schema);

class IfcRelFlowControlElements extends IfcRelConnects
{
  RelatedControlElements = null; // SET[1:0] OF IfcDistributionControlElement
  RelatingFlowElement = null; // ENTITY IfcDistributionFlowElement SUBTYPE OF IfcDistributionElement
};
registerIfcClass(IfcRelFlowControlElements, schema);

class IfcWorkTime extends IfcSchedulingTime
{
  RecurrencePattern = null; // ENTITY IfcRecurrencePattern
  Start = null; // TYPE IfcDate = STRING
  Finish = null; // TYPE IfcDate = STRING
};
registerIfcClass(IfcWorkTime, schema);

class IfcFootingType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcFootingTypeEnum = ENUMERATION OF [CAISSON_FOUNDATION, FOOTING_BEAM, PAD_FOOTING, PILE_CAP, STRIP_FOOTING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFootingType, schema);

class IfcRelAssignsToControl extends IfcRelAssigns
{
  RelatingControl = null; // ENTITY IfcControl SUBTYPE OF IfcObject
};
registerIfcClass(IfcRelAssignsToControl, schema);

class IfcPolyline extends IfcBoundedCurve
{
  Points = null; // LIST[2:0] OF IfcCartesianPoint
};
registerIfcClass(IfcPolyline, schema);

class IfcRelCoversBldgElements extends IfcRelConnects
{
  RelatingBuildingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  RelatedCoverings = null; // SET[1:0] OF IfcCovering
};
registerIfcClass(IfcRelCoversBldgElements, schema);

class IfcRelDefines extends IfcRelationship
{
};
registerIfcClass(IfcRelDefines, schema);

class IfcRelDefinesByProperties extends IfcRelDefines
{
  RelatedObjects = null; // SET[1:0] OF IfcObjectDefinition
  RelatingPropertyDefinition = null; // TYPE IfcPropertySetDefinitionSelect = SELECT [IfcPropertySetDefinition, IfcPropertySetDefinitionSet]
};
registerIfcClass(IfcRelDefinesByProperties, schema);

class IfcRoofType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcRoofTypeEnum = ENUMERATION OF [FLAT_ROOF, SHED_ROOF, GABLE_ROOF, HIP_ROOF, HIPPED_GABLE_ROOF, GAMBREL_ROOF, MANSARD_ROOF, BARREL_ROOF, RAINBOW_ROOF, BUTTERFLY_ROOF, PAVILION_ROOF, DOME_ROOF, FREEFORM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRoofType, schema);

class IfcPolygonalFaceSet extends IfcTessellatedFaceSet
{
  Closed = null; // TYPE IfcBoolean = BOOLEAN
  Faces = null; // LIST[1:0] OF IfcIndexedPolygonalFace
  PnIndex = null; // LIST[1:0] OF IfcPositiveInteger
};
registerIfcClass(IfcPolygonalFaceSet, schema);

class IfcSpatialZoneType extends IfcSpatialElementType
{
  PredefinedType = null; // TYPE IfcSpatialZoneTypeEnum = ENUMERATION OF [CONSTRUCTION, FIRESAFETY, LIGHTING, OCCUPANCY, SECURITY, THERMAL, TRANSPORT, VENTILATION, USERDEFINED, NOTDEFINED]
  LongName = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcSpatialZoneType, schema);

class IfcCompressorType extends IfcFlowMovingDeviceType
{
  PredefinedType = null; // TYPE IfcCompressorTypeEnum = ENUMERATION OF [DYNAMIC, RECIPROCATING, ROTARY, SCROLL, TROCHOIDAL, SINGLESTAGE, BOOSTER, OPENTYPE, HERMETIC, SEMIHERMETIC, WELDEDSHELLHERMETIC, ROLLINGPISTON, ROTARYVANE, SINGLESCREW, TWINSCREW, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCompressorType, schema);

class IfcWallType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcWallTypeEnum = ENUMERATION OF [MOVABLE, PARAPET, PARTITIONING, PLUMBINGWALL, SHEAR, SOLIDWALL, STANDARD, POLYGONAL, ELEMENTEDWALL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWallType, schema);

class IfcTransportElement extends IfcElement
{
  PredefinedType = null; // TYPE IfcTransportElementTypeEnum = ENUMERATION OF [ELEVATOR, ESCALATOR, MOVINGWALKWAY, CRANEWAY, LIFTINGGEAR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTransportElement, schema);

class IfcSurfaceOfRevolution extends IfcSweptSurface
{
  AxisPosition = null; // ENTITY IfcAxis1Placement SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcSurfaceOfRevolution, schema);

class IfcActuatorType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcActuatorTypeEnum = ENUMERATION OF [ELECTRICACTUATOR, HANDOPERATEDACTUATOR, HYDRAULICACTUATOR, PNEUMATICACTUATOR, THERMOSTATICACTUATOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcActuatorType, schema);

class IfcPropertyEnumeratedValue extends IfcSimpleProperty
{
  EnumerationValues = null; // LIST[1:0] OF IfcValue
  EnumerationReference = null; // ENTITY IfcPropertyEnumeration SUBTYPE OF IfcPropertyAbstraction
};
registerIfcClass(IfcPropertyEnumeratedValue, schema);

class IfcTextStyleForDefinedFont extends IfcPresentationItem
{
  Colour = null; // TYPE IfcColour = SELECT [IfcColourSpecification, IfcPreDefinedColour]
  BackgroundColour = null; // TYPE IfcColour = SELECT [IfcColourSpecification, IfcPreDefinedColour]
};
registerIfcClass(IfcTextStyleForDefinedFont, schema);

class IfcReinforcingBar extends IfcReinforcingElement
{
  NominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  CrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  BarLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PredefinedType = null; // TYPE IfcReinforcingBarTypeEnum = ENUMERATION OF [ANCHORING, EDGE, LIGATURE, MAIN, PUNCHING, RING, SHEAR, STUD, USERDEFINED, NOTDEFINED]
  BarSurface = null; // TYPE IfcReinforcingBarSurfaceEnum = ENUMERATION OF [PLAIN, TEXTURED]
};
registerIfcClass(IfcReinforcingBar, schema);

class IfcRelVoidsElement extends IfcRelDecomposes
{
  RelatingBuildingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  RelatedOpeningElement = null; // ENTITY IfcFeatureElementSubtraction SUBTYPE OF IfcFeatureElement
};
registerIfcClass(IfcRelVoidsElement, schema);

class IfcSphericalSurface extends IfcElementarySurface
{
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcSphericalSurface, schema);

class IfcReinforcementDefinitionProperties extends IfcPreDefinedPropertySet
{
  DefinitionType = null; // TYPE IfcLabel = STRING
  ReinforcementSectionDefinitions = null; // LIST[1:0] OF IfcSectionReinforcementProperties
};
registerIfcClass(IfcReinforcementDefinitionProperties, schema);

class IfcPropertySingleValue extends IfcSimpleProperty
{
  NominalValue = null; // TYPE IfcValue = SELECT [IfcDerivedMeasureValue, IfcMeasureValue, IfcSimpleValue]
  Unit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
};
registerIfcClass(IfcPropertySingleValue, schema);

class IfcStackTerminal extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcStackTerminalTypeEnum = ENUMERATION OF [BIRDCAGE, COWL, RAINWATERHOPPER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStackTerminal, schema);

class IfcCableCarrierFitting extends IfcFlowFitting
{
  PredefinedType = null; // TYPE IfcCableCarrierFittingTypeEnum = ENUMERATION OF [BEND, CROSS, REDUCER, TEE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableCarrierFitting, schema);

class IfcCableFitting extends IfcFlowFitting
{
  PredefinedType = null; // TYPE IfcCableFittingTypeEnum = ENUMERATION OF [CONNECTOR, ENTRY, EXIT, JUNCTION, TRANSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableFitting, schema);

class IfcFlowController extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowController, schema);

class IfcElectricTimeControl extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcElectricTimeControlTypeEnum = ENUMERATION OF [TIMECLOCK, TIMEDELAY, RELAY, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricTimeControl, schema);

class IfcObjectPlacement extends SchemaBase
{
};
registerIfcClass(IfcObjectPlacement, schema);

class IfcTypeResource extends IfcTypeObject
{
  Identification = null; // TYPE IfcIdentifier = STRING
  LongDescription = null; // TYPE IfcText = STRING
  ResourceType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcTypeResource, schema);

class IfcConstructionResourceType extends IfcTypeResource
{
  BaseCosts = null; // LIST[1:0] OF IfcAppliedValue
  BaseQuantity = null; // ENTITY IfcPhysicalQuantity
};
registerIfcClass(IfcConstructionResourceType, schema);

class IfcConstructionMaterialResourceType extends IfcConstructionResourceType
{
  PredefinedType = null; // TYPE IfcConstructionMaterialResourceTypeEnum = ENUMERATION OF [AGGREGATES, CONCRETE, DRYWALL, FUEL, GYPSUM, MASONRY, METAL, PLASTIC, WOOD, NOTDEFINED, USERDEFINED]
};
registerIfcClass(IfcConstructionMaterialResourceType, schema);

class IfcSolarDevice extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcSolarDeviceTypeEnum = ENUMERATION OF [SOLARCOLLECTOR, SOLARPANEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSolarDevice, schema);

class IfcInterceptor extends IfcFlowTreatmentDevice
{
  PredefinedType = null; // TYPE IfcInterceptorTypeEnum = ENUMERATION OF [CYCLONIC, GREASE, OIL, PETROL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcInterceptor, schema);

class IfcArbitraryProfileDefWithVoids extends IfcArbitraryClosedProfileDef
{
  InnerCurves = null; // SET[1:0] OF IfcCurve
};
registerIfcClass(IfcArbitraryProfileDefWithVoids, schema);

class IfcCartesianTransformationOperator3D extends IfcCartesianTransformationOperator
{
  Axis3 = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcCartesianTransformationOperator3D, schema);

class IfcEvaporativeCoolerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF [DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER, DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER, DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER, DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER, DIRECTEVAPORATIVEAIRWASHER, INDIRECTEVAPORATIVEPACKAGEAIRCOOLER, INDIRECTEVAPORATIVEWETCOIL, INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER, INDIRECTDIRECTCOMBINATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcEvaporativeCoolerType, schema);

class IfcDistributionControlElement extends IfcDistributionElement
{
};
registerIfcClass(IfcDistributionControlElement, schema);

class IfcFlowInstrument extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF [PRESSUREGAUGE, THERMOMETER, AMMETER, FREQUENCYMETER, POWERFACTORMETER, PHASEANGLEMETER, VOLTMETER_PEAK, VOLTMETER_RMS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFlowInstrument, schema);

class IfcReinforcingMesh extends IfcReinforcingElement
{
  MeshLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  MeshWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  LongitudinalBarNominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransverseBarNominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  LongitudinalBarCrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  TransverseBarCrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  LongitudinalBarSpacing = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransverseBarSpacing = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PredefinedType = null; // TYPE IfcReinforcingMeshTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcReinforcingMesh, schema);

class IfcMappedItem extends IfcRepresentationItem
{
  MappingSource = null; // ENTITY IfcRepresentationMap
  MappingTarget = null; // ENTITY IfcCartesianTransformationOperator SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcMappedItem, schema);

class IfcRelDefinesByTemplate extends IfcRelDefines
{
  RelatedPropertySets = null; // SET[1:0] OF IfcPropertySetDefinition
  RelatingTemplate = null; // ENTITY IfcPropertySetTemplate SUBTYPE OF IfcPropertyTemplateDefinition
};
registerIfcClass(IfcRelDefinesByTemplate, schema);

class IfcMechanicalFastener extends IfcElementComponent
{
  NominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  NominalLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PredefinedType = null; // TYPE IfcMechanicalFastenerTypeEnum = ENUMERATION OF [ANCHORBOLT, BOLT, DOWEL, NAIL, NAILPLATE, RIVET, SCREW, SHEARCONNECTOR, STAPLE, STUDSHEARCONNECTOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMechanicalFastener, schema);

class IfcPropertyBoundedValue extends IfcSimpleProperty
{
  UpperBoundValue = null; // TYPE IfcValue = SELECT [IfcDerivedMeasureValue, IfcMeasureValue, IfcSimpleValue]
  LowerBoundValue = null; // TYPE IfcValue = SELECT [IfcDerivedMeasureValue, IfcMeasureValue, IfcSimpleValue]
  Unit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
  SetPointValue = null; // TYPE IfcValue = SELECT [IfcDerivedMeasureValue, IfcMeasureValue, IfcSimpleValue]
};
registerIfcClass(IfcPropertyBoundedValue, schema);

class IfcConstructionEquipmentResource extends IfcConstructionResource
{
  PredefinedType = null; // TYPE IfcConstructionEquipmentResourceTypeEnum = ENUMERATION OF [DEMOLISHING, EARTHMOVING, ERECTING, HEATING, LIGHTING, PAVING, PUMPING, TRANSPORTING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcConstructionEquipmentResource, schema);

class IfcMaterialUsageDefinition extends SchemaBase
{
};
registerIfcClass(IfcMaterialUsageDefinition, schema);

class IfcMaterialProfileSetUsage extends IfcMaterialUsageDefinition
{
  ForProfileSet = null; // ENTITY IfcMaterialProfileSet SUBTYPE OF IfcMaterialDefinition
  CardinalPoint = null; // TYPE IfcCardinalPointReference = INTEGER
  ReferenceExtent = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcMaterialProfileSetUsage, schema);

class IfcMember extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcMemberTypeEnum = ENUMERATION OF [BRACE, CHORD, COLLAR, MEMBER, MULLION, PLATE, POST, PURLIN, RAFTER, STRINGER, STRUT, STUD, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMember, schema);

class IfcQuantityCount extends IfcPhysicalSimpleQuantity
{
  CountValue = null; // TYPE IfcCountMeasure = NUMBER
  Formula = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcQuantityCount, schema);

class IfcController extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcControllerTypeEnum = ENUMERATION OF [FLOATING, PROGRAMMABLE, PROPORTIONAL, MULTIPOSITION, TWOPOSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcController, schema);

class IfcLoop extends IfcTopologicalRepresentationItem
{
};
registerIfcClass(IfcLoop, schema);

class IfcPolyLoop extends IfcLoop
{
  Polygon = null; // LIST[3:0] OF IfcCartesianPoint
};
registerIfcClass(IfcPolyLoop, schema);

class IfcStructuralLoadPlanarForce extends IfcStructuralLoadStatic
{
  PlanarForceX = null; // TYPE IfcPlanarForceMeasure = REAL
  PlanarForceY = null; // TYPE IfcPlanarForceMeasure = REAL
  PlanarForceZ = null; // TYPE IfcPlanarForceMeasure = REAL
};
registerIfcClass(IfcStructuralLoadPlanarForce, schema);

class IfcTelecomAddress extends IfcAddress
{
  TelephoneNumbers = null; // LIST[1:0] OF IfcLabel
  FacsimileNumbers = null; // LIST[1:0] OF IfcLabel
  PagerNumber = null; // TYPE IfcLabel = STRING
  ElectronicMailAddresses = null; // LIST[1:0] OF IfcLabel
  WWWHomePageURL = null; // TYPE IfcURIReference = STRING
  MessagingIDs = null; // LIST[1:0] OF IfcURIReference
};
registerIfcClass(IfcTelecomAddress, schema);

class IfcTypeProcess extends IfcTypeObject
{
  Identification = null; // TYPE IfcIdentifier = STRING
  LongDescription = null; // TYPE IfcText = STRING
  ProcessType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcTypeProcess, schema);

class IfcTaskType extends IfcTypeProcess
{
  PredefinedType = null; // TYPE IfcTaskTypeEnum = ENUMERATION OF [ATTENDANCE, CONSTRUCTION, DEMOLITION, DISMANTLE, DISPOSAL, INSTALLATION, LOGISTIC, MAINTENANCE, MOVE, OPERATION, REMOVAL, RENOVATION, USERDEFINED, NOTDEFINED]
  WorkMethod = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcTaskType, schema);

class IfcBuildingElementProxyType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcBuildingElementProxyTypeEnum = ENUMERATION OF [COMPLEX, ELEMENT, PARTIAL, PROVISIONFORVOID, PROVISIONFORSPACE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBuildingElementProxyType, schema);

class IfcCivilElement extends IfcElement
{
};
registerIfcClass(IfcCivilElement, schema);

class IfcContext extends IfcObjectDefinition
{
  ObjectType = null; // TYPE IfcLabel = STRING
  LongName = null; // TYPE IfcLabel = STRING
  Phase = null; // TYPE IfcLabel = STRING
  RepresentationContexts = null; // SET[1:0] OF IfcRepresentationContext
  UnitsInContext = null; // ENTITY IfcUnitAssignment
};
registerIfcClass(IfcContext, schema);

class IfcProject extends IfcContext
{
};
registerIfcClass(IfcProject, schema);

class IfcRelConnectsElements extends IfcRelConnects
{
  ConnectionGeometry = null; // ENTITY IfcConnectionGeometry
  RelatingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  RelatedElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
};
registerIfcClass(IfcRelConnectsElements, schema);

class IfcCircleHollowProfileDef extends IfcCircleProfileDef
{
  WallThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCircleHollowProfileDef, schema);

class IfcQuantityTime extends IfcPhysicalSimpleQuantity
{
  TimeValue = null; // TYPE IfcTimeMeasure = REAL
  Formula = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcQuantityTime, schema);

class IfcTextureVertex extends IfcPresentationItem
{
  Coordinates = null; // LIST[2:2] OF IfcParameterValue
};
registerIfcClass(IfcTextureVertex, schema);

class IfcCartesianPointList extends IfcGeometricRepresentationItem
{
};
registerIfcClass(IfcCartesianPointList, schema);

class IfcCartesianPointList3D extends IfcCartesianPointList
{
  CoordList = null; // LIST[1:0] OF LIST[3:3] OF IfcLengthMeasure
};
registerIfcClass(IfcCartesianPointList3D, schema);

class IfcFillAreaStyleTiles extends IfcGeometricRepresentationItem
{
  TilingPattern = null; // LIST[2:2] OF IfcVector
  Tiles = null; // SET[1:0] OF IfcStyledItem
  TilingScale = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcFillAreaStyleTiles, schema);

class IfcProcess extends IfcObject
{
  Identification = null; // TYPE IfcIdentifier = STRING
  LongDescription = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcProcess, schema);

class IfcProcedure extends IfcProcess
{
  PredefinedType = null; // TYPE IfcProcedureTypeEnum = ENUMERATION OF [ADVICE_CAUTION, ADVICE_NOTE, ADVICE_WARNING, CALIBRATION, DIAGNOSTIC, SHUTDOWN, STARTUP, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProcedure, schema);

class IfcRelAssociatesClassification extends IfcRelAssociates
{
  RelatingClassification = null; // TYPE IfcClassificationSelect = SELECT [IfcClassification, IfcClassificationReference]
};
registerIfcClass(IfcRelAssociatesClassification, schema);

class IfcCommunicationsAppliance extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcCommunicationsApplianceTypeEnum = ENUMERATION OF [ANTENNA, COMPUTER, FAX, GATEWAY, MODEM, NETWORKAPPLIANCE, NETWORKBRIDGE, NETWORKHUB, PRINTER, REPEATER, ROUTER, SCANNER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCommunicationsAppliance, schema);

class IfcCoolingTower extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcCoolingTowerTypeEnum = ENUMERATION OF [NATURALDRAFT, MECHANICALINDUCEDDRAFT, MECHANICALFORCEDDRAFT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCoolingTower, schema);

class IfcFace extends IfcTopologicalRepresentationItem
{
  Bounds = null; // SET[1:0] OF IfcFaceBound
};
registerIfcClass(IfcFace, schema);

class IfcFaceSurface extends IfcFace
{
  FaceSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
  SameSense = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcFaceSurface, schema);

class IfcAdvancedFace extends IfcFaceSurface
{
};
registerIfcClass(IfcAdvancedFace, schema);

class IfcSubContractResourceType extends IfcConstructionResourceType
{
  PredefinedType = null; // TYPE IfcSubContractResourceTypeEnum = ENUMERATION OF [PURCHASE, WORK, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSubContractResourceType, schema);

class IfcBoundedSurface extends IfcSurface
{
};
registerIfcClass(IfcBoundedSurface, schema);

class IfcBSplineSurface extends IfcBoundedSurface
{
  UDegree = null; // TYPE IfcInteger = INTEGER
  VDegree = null; // TYPE IfcInteger = INTEGER
  ControlPointsList = null; // LIST[2:0] OF LIST[2:0] OF IfcCartesianPoint
  SurfaceForm = null; // TYPE IfcBSplineSurfaceForm = ENUMERATION OF [PLANE_SURF, CYLINDRICAL_SURF, CONICAL_SURF, SPHERICAL_SURF, TOROIDAL_SURF, SURF_OF_REVOLUTION, RULED_SURF, GENERALISED_CONE, QUADRIC_SURF, SURF_OF_LINEAR_EXTRUSION, UNSPECIFIED]
  UClosed = null; // TYPE IfcLogical = LOGICAL
  VClosed = null; // TYPE IfcLogical = LOGICAL
  SelfIntersect = null; // TYPE IfcLogical = LOGICAL
};
registerIfcClass(IfcBSplineSurface, schema);

class IfcBSplineSurfaceWithKnots extends IfcBSplineSurface
{
  UMultiplicities = null; // LIST[2:0] OF IfcInteger
  VMultiplicities = null; // LIST[2:0] OF IfcInteger
  UKnots = null; // LIST[2:0] OF IfcParameterValue
  VKnots = null; // LIST[2:0] OF IfcParameterValue
  KnotSpec = null; // TYPE IfcKnotType = ENUMERATION OF [UNIFORM_KNOTS, QUASI_UNIFORM_KNOTS, PIECEWISE_BEZIER_KNOTS, UNSPECIFIED]
};
registerIfcClass(IfcBSplineSurfaceWithKnots, schema);

class IfcRelAssociatesApproval extends IfcRelAssociates
{
  RelatingApproval = null; // ENTITY IfcApproval
};
registerIfcClass(IfcRelAssociatesApproval, schema);

class IfcStructuralLoadTemperature extends IfcStructuralLoadStatic
{
  DeltaTConstant = null; // TYPE IfcThermodynamicTemperatureMeasure = REAL
  DeltaTY = null; // TYPE IfcThermodynamicTemperatureMeasure = REAL
  DeltaTZ = null; // TYPE IfcThermodynamicTemperatureMeasure = REAL
};
registerIfcClass(IfcStructuralLoadTemperature, schema);

class IfcSpaceHeater extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcSpaceHeaterTypeEnum = ENUMERATION OF [CONVECTOR, RADIATOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSpaceHeater, schema);

class IfcControllerType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcControllerTypeEnum = ENUMERATION OF [FLOATING, PROGRAMMABLE, PROPORTIONAL, MULTIPOSITION, TWOPOSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcControllerType, schema);

class IfcLightSourceDirectional extends IfcLightSource
{
  Orientation = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcLightSourceDirectional, schema);

class IfcClosedShell extends IfcConnectedFaceSet
{
};
registerIfcClass(IfcClosedShell, schema);

class IfcUnitaryControlElement extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcUnitaryControlElementTypeEnum = ENUMERATION OF [ALARMPANEL, CONTROLPANEL, GASDETECTIONPANEL, INDICATORPANEL, MIMICPANEL, HUMIDISTAT, THERMOSTAT, WEATHERSTATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcUnitaryControlElement, schema);

class IfcRelAssignsToGroup extends IfcRelAssigns
{
  RelatingGroup = null; // ENTITY IfcGroup SUBTYPE OF IfcObject
};
registerIfcClass(IfcRelAssignsToGroup, schema);

class IfcRelAssignsToGroupByFactor extends IfcRelAssignsToGroup
{
  Factor = null; // TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcRelAssignsToGroupByFactor, schema);

class IfcCircle extends IfcConic
{
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCircle, schema);

class IfcShadingDevice extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcShadingDeviceTypeEnum = ENUMERATION OF [JALOUSIE, SHUTTER, AWNING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcShadingDevice, schema);

class IfcTransformer extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcTransformerTypeEnum = ENUMERATION OF [CURRENT, FREQUENCY, INVERTER, RECTIFIER, VOLTAGE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTransformer, schema);

class IfcExtrudedAreaSolid extends IfcSweptAreaSolid
{
  ExtrudedDirection = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  Depth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcExtrudedAreaSolid, schema);

class IfcExtrudedAreaSolidTapered extends IfcExtrudedAreaSolid
{
  EndSweptArea = null; // ENTITY IfcProfileDef
};
registerIfcClass(IfcExtrudedAreaSolidTapered, schema);

class IfcDamper extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcDamperTypeEnum = ENUMERATION OF [BACKDRAFTDAMPER, BALANCINGDAMPER, BLASTDAMPER, CONTROLDAMPER, FIREDAMPER, FIRESMOKEDAMPER, FUMEHOODEXHAUST, GRAVITYDAMPER, GRAVITYRELIEFDAMPER, RELIEFDAMPER, SMOKEDAMPER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDamper, schema);

class IfcCableCarrierFittingType extends IfcFlowFittingType
{
  PredefinedType = null; // TYPE IfcCableCarrierFittingTypeEnum = ENUMERATION OF [BEND, CROSS, REDUCER, TEE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableCarrierFittingType, schema);

class IfcFanType extends IfcFlowMovingDeviceType
{
  PredefinedType = null; // TYPE IfcFanTypeEnum = ENUMERATION OF [CENTRIFUGALFORWARDCURVED, CENTRIFUGALRADIAL, CENTRIFUGALBACKWARDINCLINEDCURVED, CENTRIFUGALAIRFOIL, TUBEAXIAL, VANEAXIAL, PROPELLORAXIAL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFanType, schema);

class IfcPerformanceHistory extends IfcControl
{
  LifeCyclePhase = null; // TYPE IfcLabel = STRING
  PredefinedType = null; // TYPE IfcPerformanceHistoryTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPerformanceHistory, schema);

class IfcExternallyDefinedTextFont extends IfcExternalReference
{
};
registerIfcClass(IfcExternallyDefinedTextFont, schema);

class IfcPreDefinedCurveFont extends IfcPreDefinedItem
{
};
registerIfcClass(IfcPreDefinedCurveFont, schema);

class IfcDraughtingPreDefinedCurveFont extends IfcPreDefinedCurveFont
{
};
registerIfcClass(IfcDraughtingPreDefinedCurveFont, schema);

class IfcTransformerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcTransformerTypeEnum = ENUMERATION OF [CURRENT, FREQUENCY, INVERTER, RECTIFIER, VOLTAGE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTransformerType, schema);

class IfcHeatExchangerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcHeatExchangerTypeEnum = ENUMERATION OF [PLATE, SHELLANDTUBE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcHeatExchangerType, schema);

class IfcStructuralItem extends IfcProduct
{
};
registerIfcClass(IfcStructuralItem, schema);

class IfcStructuralConnection extends IfcStructuralItem
{
  AppliedCondition = null; // ENTITY IfcBoundaryCondition
};
registerIfcClass(IfcStructuralConnection, schema);

class IfcTendonAnchor extends IfcReinforcingElement
{
  PredefinedType = null; // TYPE IfcTendonAnchorTypeEnum = ENUMERATION OF [COUPLER, FIXED_END, TENSIONING_END, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTendonAnchor, schema);

class IfcStructuralPointConnection extends IfcStructuralConnection
{
  ConditionCoordinateSystem = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcStructuralPointConnection, schema);

class IfcStyledItem extends IfcRepresentationItem
{
  Item = null; // ENTITY IfcRepresentationItem
  Styles = null; // SET[1:0] OF IfcStyleAssignmentSelect
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcStyledItem, schema);

class IfcRelInterferesElements extends IfcRelConnects
{
  RelatingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  RelatedElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  InterferenceGeometry = null; // ENTITY IfcConnectionGeometry
  InterferenceType = null; // TYPE IfcIdentifier = STRING
  ImpliedOrder = null; // LOGICAL
};
registerIfcClass(IfcRelInterferesElements, schema);

class IfcStructuralMember extends IfcStructuralItem
{
};
registerIfcClass(IfcStructuralMember, schema);

class IfcStructuralCurveMember extends IfcStructuralMember
{
  PredefinedType = null; // TYPE IfcStructuralCurveMemberTypeEnum = ENUMERATION OF [RIGID_JOINED_MEMBER, PIN_JOINED_MEMBER, CABLE, TENSION_MEMBER, COMPRESSION_MEMBER, USERDEFINED, NOTDEFINED]
  Axis = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcStructuralCurveMember, schema);

class IfcStructuralCurveMemberVarying extends IfcStructuralCurveMember
{
};
registerIfcClass(IfcStructuralCurveMemberVarying, schema);

class IfcRailingType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcRailingTypeEnum = ENUMERATION OF [HANDRAIL, GUARDRAIL, BALUSTRADE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRailingType, schema);

class IfcPath extends IfcTopologicalRepresentationItem
{
  EdgeList = null; // LIST[1:0] OF IfcOrientedEdge
};
registerIfcClass(IfcPath, schema);

class IfcColumn extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcColumnTypeEnum = ENUMERATION OF [COLUMN, PILASTER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcColumn, schema);

class IfcColumnStandardCase extends IfcColumn
{
};
registerIfcClass(IfcColumnStandardCase, schema);

class IfcVertex extends IfcTopologicalRepresentationItem
{
};
registerIfcClass(IfcVertex, schema);

class IfcVertexPoint extends IfcVertex
{
  VertexGeometry = null; // ENTITY IfcPoint SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcVertexPoint, schema);

class IfcBoundaryCondition extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcBoundaryCondition, schema);

class IfcBoundaryFaceCondition extends IfcBoundaryCondition
{
  TranslationalStiffnessByAreaX = null; // TYPE IfcModulusOfSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfSubgradeReactionMeasure]
  TranslationalStiffnessByAreaY = null; // TYPE IfcModulusOfSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfSubgradeReactionMeasure]
  TranslationalStiffnessByAreaZ = null; // TYPE IfcModulusOfSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfSubgradeReactionMeasure]
};
registerIfcClass(IfcBoundaryFaceCondition, schema);

class IfcQuantityLength extends IfcPhysicalSimpleQuantity
{
  LengthValue = null; // TYPE IfcLengthMeasure = REAL
  Formula = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcQuantityLength, schema);

class IfcSurfaceReinforcementArea extends IfcStructuralLoadOrResult
{
  SurfaceReinforcement1 = null; // LIST[2:3] OF IfcLengthMeasure
  SurfaceReinforcement2 = null; // LIST[2:3] OF IfcLengthMeasure
  ShearReinforcement = null; // TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcSurfaceReinforcementArea, schema);

class IfcCShapeProfileDef extends IfcParameterizedProfileDef
{
  Depth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  Width = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  WallThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  Girth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  InternalFilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCShapeProfileDef, schema);

class IfcDoor extends IfcBuildingElement
{
  OverallHeight = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  OverallWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PredefinedType = null; // TYPE IfcDoorTypeEnum = ENUMERATION OF [DOOR, GATE, TRAPDOOR, USERDEFINED, NOTDEFINED]
  OperationType = null; // TYPE IfcDoorTypeOperationEnum = ENUMERATION OF [SINGLE_SWING_LEFT, SINGLE_SWING_RIGHT, DOUBLE_DOOR_SINGLE_SWING, DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT, DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT, DOUBLE_SWING_LEFT, DOUBLE_SWING_RIGHT, DOUBLE_DOOR_DOUBLE_SWING, SLIDING_TO_LEFT, SLIDING_TO_RIGHT, DOUBLE_DOOR_SLIDING, FOLDING_TO_LEFT, FOLDING_TO_RIGHT, DOUBLE_DOOR_FOLDING, REVOLVING, ROLLINGUP, SWING_FIXED_LEFT, SWING_FIXED_RIGHT, USERDEFINED, NOTDEFINED]
  UserDefinedOperationType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcDoor, schema);

class IfcDoorStandardCase extends IfcDoor
{
};
registerIfcClass(IfcDoorStandardCase, schema);

class IfcRamp extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcRampTypeEnum = ENUMERATION OF [STRAIGHT_RUN_RAMP, TWO_STRAIGHT_RUN_RAMP, QUARTER_TURN_RAMP, TWO_QUARTER_TURN_RAMP, HALF_TURN_RAMP, SPIRAL_RAMP, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRamp, schema);

class IfcEventTime extends IfcSchedulingTime
{
  ActualDate = null; // TYPE IfcDateTime = STRING
  EarlyDate = null; // TYPE IfcDateTime = STRING
  LateDate = null; // TYPE IfcDateTime = STRING
  ScheduleDate = null; // TYPE IfcDateTime = STRING
};
registerIfcClass(IfcEventTime, schema);

class IfcUnitaryEquipmentType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcUnitaryEquipmentTypeEnum = ENUMERATION OF [AIRHANDLER, AIRCONDITIONINGUNIT, DEHUMIDIFIER, SPLITSYSTEM, ROOFTOPUNIT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcUnitaryEquipmentType, schema);

class IfcAppliedValue extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  AppliedValue = null; // TYPE IfcAppliedValueSelect = SELECT [IfcMeasureWithUnit, IfcReference, IfcValue]
  UnitBasis = null; // ENTITY IfcMeasureWithUnit
  ApplicableDate = null; // TYPE IfcDate = STRING
  FixedUntilDate = null; // TYPE IfcDate = STRING
  Category = null; // TYPE IfcLabel = STRING
  Condition = null; // TYPE IfcLabel = STRING
  ArithmeticOperator = null; // TYPE IfcArithmeticOperatorEnum = ENUMERATION OF [ADD, DIVIDE, MULTIPLY, SUBTRACT]
  Components = null; // LIST[1:0] OF IfcAppliedValue
};
registerIfcClass(IfcAppliedValue, schema);

class IfcCostValue extends IfcAppliedValue
{
};
registerIfcClass(IfcCostValue, schema);

class IfcDimensionalExponents extends SchemaBase
{
  LengthExponent = null; // INTEGER
  MassExponent = null; // INTEGER
  TimeExponent = null; // INTEGER
  ElectricCurrentExponent = null; // INTEGER
  ThermodynamicTemperatureExponent = null; // INTEGER
  AmountOfSubstanceExponent = null; // INTEGER
  LuminousIntensityExponent = null; // INTEGER
};
registerIfcClass(IfcDimensionalExponents, schema);

class IfcMonetaryUnit extends SchemaBase
{
  Currency = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcMonetaryUnit, schema);

class IfcWasteTerminal extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcWasteTerminalTypeEnum = ENUMERATION OF [FLOORTRAP, FLOORWASTE, GULLYSUMP, GULLYTRAP, ROOFDRAIN, WASTEDISPOSALUNIT, WASTETRAP, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWasteTerminal, schema);

class IfcLightDistributionData extends SchemaBase
{
  MainPlaneAngle = null; // TYPE IfcPlaneAngleMeasure = REAL
  SecondaryPlaneAngle = null; // LIST[1:0] OF IfcPlaneAngleMeasure
  LuminousIntensity = null; // LIST[1:0] OF IfcLuminousIntensityDistributionMeasure
};
registerIfcClass(IfcLightDistributionData, schema);

class IfcDocumentReference extends IfcExternalReference
{
  Description = null; // TYPE IfcText = STRING
  ReferencedDocument = null; // ENTITY IfcDocumentInformation SUBTYPE OF IfcExternalInformation
};
registerIfcClass(IfcDocumentReference, schema);

class IfcRepresentationContext extends SchemaBase
{
  ContextIdentifier = null; // TYPE IfcLabel = STRING
  ContextType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcRepresentationContext, schema);

class IfcGeometricRepresentationContext extends IfcRepresentationContext
{
  CoordinateSpaceDimension = null; // TYPE IfcDimensionCount = INTEGER
  Precision = null; // TYPE IfcReal = REAL
  WorldCoordinateSystem = null; // TYPE IfcAxis2Placement = SELECT [IfcAxis2Placement2D, IfcAxis2Placement3D]
  TrueNorth = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcGeometricRepresentationContext, schema);

class IfcLagTime extends IfcSchedulingTime
{
  LagValue = null; // TYPE IfcTimeOrRatioSelect = SELECT [IfcDuration, IfcRatioMeasure]
  DurationType = null; // TYPE IfcTaskDurationEnum = ENUMERATION OF [ELAPSEDTIME, WORKTIME, NOTDEFINED]
};
registerIfcClass(IfcLagTime, schema);

class IfcPointOnSurface extends IfcPoint
{
  BasisSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
  PointParameterU = null; // TYPE IfcParameterValue = REAL
  PointParameterV = null; // TYPE IfcParameterValue = REAL
};
registerIfcClass(IfcPointOnSurface, schema);

class IfcFaceBasedSurfaceModel extends IfcGeometricRepresentationItem
{
  FbsmFaces = null; // SET[1:0] OF IfcConnectedFaceSet
};
registerIfcClass(IfcFaceBasedSurfaceModel, schema);

class IfcStructuralLoadLinearForce extends IfcStructuralLoadStatic
{
  LinearForceX = null; // TYPE IfcLinearForceMeasure = REAL
  LinearForceY = null; // TYPE IfcLinearForceMeasure = REAL
  LinearForceZ = null; // TYPE IfcLinearForceMeasure = REAL
  LinearMomentX = null; // TYPE IfcLinearMomentMeasure = REAL
  LinearMomentY = null; // TYPE IfcLinearMomentMeasure = REAL
  LinearMomentZ = null; // TYPE IfcLinearMomentMeasure = REAL
};
registerIfcClass(IfcStructuralLoadLinearForce, schema);

class IfcRelConnectsPorts extends IfcRelConnects
{
  RelatingPort = null; // ENTITY IfcPort SUBTYPE OF IfcProduct
  RelatedPort = null; // ENTITY IfcPort SUBTYPE OF IfcProduct
  RealizingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
};
registerIfcClass(IfcRelConnectsPorts, schema);

class IfcTableColumn extends SchemaBase
{
  Identifier = null; // TYPE IfcIdentifier = STRING
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Unit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
  ReferencePath = null; // ENTITY IfcReference
};
registerIfcClass(IfcTableColumn, schema);

class IfcSurfaceCurve extends IfcCurve
{
  Curve3D = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  AssociatedGeometry = null; // LIST[1:2] OF IfcPcurve
  MasterRepresentation = null; // TYPE IfcPreferredSurfaceCurveRepresentation = ENUMERATION OF [CURVE3D, PCURVE_S1, PCURVE_S2]
};
registerIfcClass(IfcSurfaceCurve, schema);

class IfcTubeBundle extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcTubeBundleTypeEnum = ENUMERATION OF [FINNED, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTubeBundle, schema);

class IfcTransportElementType extends IfcElementType
{
  PredefinedType = null; // TYPE IfcTransportElementTypeEnum = ENUMERATION OF [ELEVATOR, ESCALATOR, MOVINGWALKWAY, CRANEWAY, LIFTINGGEAR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTransportElementType, schema);

class IfcPcurve extends IfcCurve
{
  BasisSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
  ReferenceCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcPcurve, schema);

class IfcSurfaceStyleLighting extends IfcPresentationItem
{
  DiffuseTransmissionColour = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
  DiffuseReflectionColour = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
  TransmissionColour = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
  ReflectanceColour = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
};
registerIfcClass(IfcSurfaceStyleLighting, schema);

class IfcSeamCurve extends IfcSurfaceCurve
{
};
registerIfcClass(IfcSeamCurve, schema);

class IfcLocalPlacement extends IfcObjectPlacement
{
  PlacementRelTo = null; // ENTITY IfcObjectPlacement
  RelativePlacement = null; // TYPE IfcAxis2Placement = SELECT [IfcAxis2Placement2D, IfcAxis2Placement3D]
};
registerIfcClass(IfcLocalPlacement, schema);

class IfcSlabType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcSlabTypeEnum = ENUMERATION OF [FLOOR, ROOF, LANDING, BASESLAB, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSlabType, schema);

class IfcElectricDistributionBoardType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcElectricDistributionBoardTypeEnum = ENUMERATION OF [CONSUMERUNIT, DISTRIBUTIONBOARD, MOTORCONTROLCENTRE, SWITCHBOARD, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricDistributionBoardType, schema);

class IfcUnitAssignment extends SchemaBase
{
  Units = null; // SET[1:0] OF IfcUnit
};
registerIfcClass(IfcUnitAssignment, schema);

class IfcRelAssignsToProcess extends IfcRelAssigns
{
  RelatingProcess = null; // TYPE IfcProcessSelect = SELECT [IfcProcess, IfcTypeProcess]
  QuantityInProcess = null; // ENTITY IfcMeasureWithUnit
};
registerIfcClass(IfcRelAssignsToProcess, schema);

class IfcEdgeLoop extends IfcLoop
{
  EdgeList = null; // LIST[1:0] OF IfcOrientedEdge
};
registerIfcClass(IfcEdgeLoop, schema);

class IfcRelAssignsToActor extends IfcRelAssigns
{
  RelatingActor = null; // ENTITY IfcActor SUBTYPE OF IfcObject
  ActingRole = null; // ENTITY IfcActorRole
};
registerIfcClass(IfcRelAssignsToActor, schema);

class IfcBoundaryEdgeCondition extends IfcBoundaryCondition
{
  TranslationalStiffnessByLengthX = null; // TYPE IfcModulusOfTranslationalSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfLinearSubgradeReactionMeasure]
  TranslationalStiffnessByLengthY = null; // TYPE IfcModulusOfTranslationalSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfLinearSubgradeReactionMeasure]
  TranslationalStiffnessByLengthZ = null; // TYPE IfcModulusOfTranslationalSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfLinearSubgradeReactionMeasure]
  RotationalStiffnessByLengthX = null; // TYPE IfcModulusOfRotationalSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfRotationalSubgradeReactionMeasure]
  RotationalStiffnessByLengthY = null; // TYPE IfcModulusOfRotationalSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfRotationalSubgradeReactionMeasure]
  RotationalStiffnessByLengthZ = null; // TYPE IfcModulusOfRotationalSubgradeReactionSelect = SELECT [IfcBoolean, IfcModulusOfRotationalSubgradeReactionMeasure]
};
registerIfcClass(IfcBoundaryEdgeCondition, schema);

class IfcBSplineCurveWithKnots extends IfcBSplineCurve
{
  KnotMultiplicities = null; // LIST[2:0] OF IfcInteger
  Knots = null; // LIST[2:0] OF IfcParameterValue
  KnotSpec = null; // TYPE IfcKnotType = ENUMERATION OF [UNIFORM_KNOTS, QUASI_UNIFORM_KNOTS, PIECEWISE_BEZIER_KNOTS, UNSPECIFIED]
};
registerIfcClass(IfcBSplineCurveWithKnots, schema);

class IfcRationalBSplineCurveWithKnots extends IfcBSplineCurveWithKnots
{
  WeightsData = null; // LIST[2:0] OF IfcReal
};
registerIfcClass(IfcRationalBSplineCurveWithKnots, schema);

class IfcZone extends IfcSystem
{
  LongName = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcZone, schema);

class IfcRelConnectsStructuralActivity extends IfcRelConnects
{
  RelatingElement = null; // TYPE IfcStructuralActivityAssignmentSelect = SELECT [IfcElement, IfcStructuralItem]
  RelatedStructuralActivity = null; // ENTITY IfcStructuralActivity SUBTYPE OF IfcProduct
};
registerIfcClass(IfcRelConnectsStructuralActivity, schema);

class IfcElectricGenerator extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcElectricGeneratorTypeEnum = ENUMERATION OF [CHP, ENGINEGENERATOR, STANDALONE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricGenerator, schema);

class IfcFlowMovingDevice extends IfcDistributionFlowElement
{
};
registerIfcClass(IfcFlowMovingDevice, schema);

class IfcRampFlightType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcRampFlightTypeEnum = ENUMERATION OF [STRAIGHT, SPIRAL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRampFlightType, schema);

class IfcDistributionChamberElementType extends IfcDistributionFlowElementType
{
  PredefinedType = null; // TYPE IfcDistributionChamberElementTypeEnum = ENUMERATION OF [FORMEDDUCT, INSPECTIONCHAMBER, INSPECTIONPIT, MANHOLE, METERCHAMBER, SUMP, TRENCH, VALVECHAMBER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDistributionChamberElementType, schema);

class IfcPumpType extends IfcFlowMovingDeviceType
{
  PredefinedType = null; // TYPE IfcPumpTypeEnum = ENUMERATION OF [CIRCULATOR, ENDSUCTION, SPLITCASE, SUBMERSIBLEPUMP, SUMPPUMP, VERTICALINLINE, VERTICALTURBINE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPumpType, schema);

class IfcSphere extends IfcCsgPrimitive3D
{
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcSphere, schema);

class IfcColumnType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcColumnTypeEnum = ENUMERATION OF [COLUMN, PILASTER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcColumnType, schema);

class IfcLightIntensityDistribution extends SchemaBase
{
  LightDistributionCurve = null; // TYPE IfcLightDistributionCurveEnum = ENUMERATION OF [TYPE_A, TYPE_B, TYPE_C, NOTDEFINED]
  DistributionData = null; // LIST[1:0] OF IfcLightDistributionData
};
registerIfcClass(IfcLightIntensityDistribution, schema);

class IfcCurrencyRelationship extends IfcResourceLevelRelationship
{
  RelatingMonetaryUnit = null; // ENTITY IfcMonetaryUnit
  RelatedMonetaryUnit = null; // ENTITY IfcMonetaryUnit
  ExchangeRate = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
  RateDateTime = null; // TYPE IfcDateTime = STRING
  RateSource = null; // ENTITY IfcLibraryInformation SUBTYPE OF IfcExternalInformation
};
registerIfcClass(IfcCurrencyRelationship, schema);

class IfcAirTerminal extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcAirTerminalTypeEnum = ENUMERATION OF [DIFFUSER, GRILLE, LOUVRE, REGISTER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAirTerminal, schema);

class IfcBeam extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcBeamTypeEnum = ENUMERATION OF [BEAM, JOIST, HOLLOWCORE, LINTEL, SPANDREL, T_BEAM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBeam, schema);

class IfcCurtainWall extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcCurtainWallTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCurtainWall, schema);

class IfcTextStyleTextModel extends IfcPresentationItem
{
  TextIndent = null; // TYPE IfcSizeSelect = SELECT [IfcDescriptiveMeasure, IfcLengthMeasure, IfcNormalisedRatioMeasure, IfcPositiveLengthMeasure, IfcPositiveRatioMeasure, IfcRatioMeasure]
  TextAlign = null; // TYPE IfcTextAlignment = STRING
  TextDecoration = null; // TYPE IfcTextDecoration = STRING
  LetterSpacing = null; // TYPE IfcSizeSelect = SELECT [IfcDescriptiveMeasure, IfcLengthMeasure, IfcNormalisedRatioMeasure, IfcPositiveLengthMeasure, IfcPositiveRatioMeasure, IfcRatioMeasure]
  WordSpacing = null; // TYPE IfcSizeSelect = SELECT [IfcDescriptiveMeasure, IfcLengthMeasure, IfcNormalisedRatioMeasure, IfcPositiveLengthMeasure, IfcPositiveRatioMeasure, IfcRatioMeasure]
  TextTransform = null; // TYPE IfcTextTransformation = STRING
  LineHeight = null; // TYPE IfcSizeSelect = SELECT [IfcDescriptiveMeasure, IfcLengthMeasure, IfcNormalisedRatioMeasure, IfcPositiveLengthMeasure, IfcPositiveRatioMeasure, IfcRatioMeasure]
};
registerIfcClass(IfcTextStyleTextModel, schema);

class IfcTopologyRepresentation extends IfcShapeModel
{
};
registerIfcClass(IfcTopologyRepresentation, schema);

class IfcMaterialDefinitionRepresentation extends IfcProductRepresentation
{
  RepresentedMaterial = null; // ENTITY IfcMaterial SUBTYPE OF IfcMaterialDefinition
};
registerIfcClass(IfcMaterialDefinitionRepresentation, schema);

class IfcSystemFurnitureElement extends IfcFurnishingElement
{
  PredefinedType = null; // TYPE IfcSystemFurnitureElementTypeEnum = ENUMERATION OF [PANEL, WORKSURFACE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSystemFurnitureElement, schema);

class IfcPipeSegmentType extends IfcFlowSegmentType
{
  PredefinedType = null; // TYPE IfcPipeSegmentTypeEnum = ENUMERATION OF [CULVERT, FLEXIBLESEGMENT, RIGIDSEGMENT, GUTTER, SPOOL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPipeSegmentType, schema);

class IfcPropertyDependencyRelationship extends IfcResourceLevelRelationship
{
  DependingProperty = null; // ENTITY IfcProperty SUBTYPE OF IfcPropertyAbstraction
  DependantProperty = null; // ENTITY IfcProperty SUBTYPE OF IfcPropertyAbstraction
  Expression = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcPropertyDependencyRelationship, schema);

class IfcWindowType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcWindowTypeEnum = ENUMERATION OF [WINDOW, SKYLIGHT, LIGHTDOME, USERDEFINED, NOTDEFINED]
  PartitioningType = null; // TYPE IfcWindowTypePartitioningEnum = ENUMERATION OF [SINGLE_PANEL, DOUBLE_PANEL_VERTICAL, DOUBLE_PANEL_HORIZONTAL, TRIPLE_PANEL_VERTICAL, TRIPLE_PANEL_BOTTOM, TRIPLE_PANEL_TOP, TRIPLE_PANEL_LEFT, TRIPLE_PANEL_RIGHT, TRIPLE_PANEL_HORIZONTAL, USERDEFINED, NOTDEFINED]
  ParameterTakesPrecedence = null; // TYPE IfcBoolean = BOOLEAN
  UserDefinedPartitioningType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcWindowType, schema);

class IfcEvaporatorType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcEvaporatorTypeEnum = ENUMERATION OF [DIRECTEXPANSION, DIRECTEXPANSIONSHELLANDTUBE, DIRECTEXPANSIONTUBEINTUBE, DIRECTEXPANSIONBRAZEDPLATE, FLOODEDSHELLANDTUBE, SHELLANDCOIL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcEvaporatorType, schema);

class IfcRelAssociatesDocument extends IfcRelAssociates
{
  RelatingDocument = null; // TYPE IfcDocumentSelect = SELECT [IfcDocumentInformation, IfcDocumentReference]
};
registerIfcClass(IfcRelAssociatesDocument, schema);

class IfcStyledRepresentation extends IfcStyleModel
{
};
registerIfcClass(IfcStyledRepresentation, schema);

class IfcStructuralLoadGroup extends IfcGroup
{
  PredefinedType = null; // TYPE IfcLoadGroupTypeEnum = ENUMERATION OF [LOAD_GROUP, LOAD_CASE, LOAD_COMBINATION, USERDEFINED, NOTDEFINED]
  ActionType = null; // TYPE IfcActionTypeEnum = ENUMERATION OF [PERMANENT_G, VARIABLE_Q, EXTRAORDINARY_A, USERDEFINED, NOTDEFINED]
  ActionSource = null; // TYPE IfcActionSourceTypeEnum = ENUMERATION OF [DEAD_LOAD_G, COMPLETION_G1, LIVE_LOAD_Q, SNOW_S, WIND_W, PRESTRESSING_P, SETTLEMENT_U, TEMPERATURE_T, EARTHQUAKE_E, FIRE, IMPULSE, IMPACT, TRANSPORT, ERECTION, PROPPING, SYSTEM_IMPERFECTION, SHRINKAGE, CREEP, LACK_OF_FIT, BUOYANCY, ICE, CURRENT, WAVE, RAIN, BRAKES, USERDEFINED, NOTDEFINED]
  Coefficient = null; // TYPE IfcRatioMeasure = REAL
  Purpose = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcStructuralLoadGroup, schema);

class IfcStructuralLoadCase extends IfcStructuralLoadGroup
{
  SelfWeightCoefficients = null; // LIST[3:3] OF IfcRatioMeasure
};
registerIfcClass(IfcStructuralLoadCase, schema);

class IfcFilterType extends IfcFlowTreatmentDeviceType
{
  PredefinedType = null; // TYPE IfcFilterTypeEnum = ENUMERATION OF [AIRPARTICLEFILTER, COMPRESSEDAIRFILTER, ODORFILTER, OILFILTER, STRAINER, WATERFILTER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFilterType, schema);

class IfcCableFittingType extends IfcFlowFittingType
{
  PredefinedType = null; // TYPE IfcCableFittingTypeEnum = ENUMERATION OF [CONNECTOR, ENTRY, EXIT, JUNCTION, TRANSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableFittingType, schema);

class IfcPropertyEnumeration extends IfcPropertyAbstraction
{
  Name = null; // TYPE IfcLabel = STRING
  EnumerationValues = null; // LIST[1:0] OF IfcValue
  Unit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
};
registerIfcClass(IfcPropertyEnumeration, schema);

class IfcDuctFittingType extends IfcFlowFittingType
{
  PredefinedType = null; // TYPE IfcDuctFittingTypeEnum = ENUMERATION OF [BEND, CONNECTOR, ENTRY, EXIT, JUNCTION, OBSTRUCTION, TRANSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDuctFittingType, schema);

class IfcProjectedCRS extends IfcCoordinateReferenceSystem
{
  MapProjection = null; // TYPE IfcIdentifier = STRING
  MapZone = null; // TYPE IfcIdentifier = STRING
  MapUnit = null; // ENTITY IfcNamedUnit
};
registerIfcClass(IfcProjectedCRS, schema);

class IfcStructuralAction extends IfcStructuralActivity
{
  DestabilizingLoad = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcStructuralAction, schema);

class IfcStructuralPointAction extends IfcStructuralAction
{
};
registerIfcClass(IfcStructuralPointAction, schema);

class IfcCurveBoundedPlane extends IfcBoundedSurface
{
  BasisSurface = null; // ENTITY IfcPlane SUBTYPE OF IfcElementarySurface
  OuterBoundary = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  InnerBoundaries = null; // SET[0:0] OF IfcCurve
};
registerIfcClass(IfcCurveBoundedPlane, schema);

class IfcRecurrencePattern extends SchemaBase
{
  RecurrenceType = null; // TYPE IfcRecurrenceTypeEnum = ENUMERATION OF [DAILY, WEEKLY, MONTHLY_BY_DAY_OF_MONTH, MONTHLY_BY_POSITION, BY_DAY_COUNT, BY_WEEKDAY_COUNT, YEARLY_BY_DAY_OF_MONTH, YEARLY_BY_POSITION]
  DayComponent = null; // SET[1:0] OF IfcDayInMonthNumber
  WeekdayComponent = null; // SET[1:0] OF IfcDayInWeekNumber
  MonthComponent = null; // SET[1:0] OF IfcMonthInYearNumber
  Position = null; // TYPE IfcInteger = INTEGER
  Interval = null; // TYPE IfcInteger = INTEGER
  Occurrences = null; // TYPE IfcInteger = INTEGER
  TimePeriods = null; // LIST[1:0] OF IfcTimePeriod
};
registerIfcClass(IfcRecurrencePattern, schema);

class IfcGrid extends IfcProduct
{
  UAxes = null; // LIST[1:0] OF IfcGridAxis
  VAxes = null; // LIST[1:0] OF IfcGridAxis
  WAxes = null; // LIST[1:0] OF IfcGridAxis
  PredefinedType = null; // TYPE IfcGridTypeEnum = ENUMERATION OF [RECTANGULAR, RADIAL, TRIANGULAR, IRREGULAR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcGrid, schema);

class IfcSurfaceStyleRefraction extends IfcPresentationItem
{
  RefractionIndex = null; // TYPE IfcReal = REAL
  DispersionFactor = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcSurfaceStyleRefraction, schema);

class IfcPermeableCoveringProperties extends IfcPreDefinedPropertySet
{
  OperationType = null; // TYPE IfcPermeableCoveringOperationEnum = ENUMERATION OF [GRILL, LOUVER, SCREEN, USERDEFINED, NOTDEFINED]
  PanelPosition = null; // TYPE IfcWindowPanelPositionEnum = ENUMERATION OF [LEFT, MIDDLE, RIGHT, BOTTOM, TOP, NOTDEFINED]
  FrameDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FrameThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ShapeAspectStyle = null; // ENTITY IfcShapeAspect
};
registerIfcClass(IfcPermeableCoveringProperties, schema);

class IfcTextStyleFontModel extends IfcPreDefinedTextFont
{
  FontFamily = null; // LIST[1:0] OF IfcTextFontName
  FontStyle = null; // TYPE IfcFontStyle = STRING
  FontVariant = null; // TYPE IfcFontVariant = STRING
  FontWeight = null; // TYPE IfcFontWeight = STRING
  FontSize = null; // TYPE IfcSizeSelect = SELECT [IfcDescriptiveMeasure, IfcLengthMeasure, IfcNormalisedRatioMeasure, IfcPositiveLengthMeasure, IfcPositiveRatioMeasure, IfcRatioMeasure]
};
registerIfcClass(IfcTextStyleFontModel, schema);

class IfcMaterialProfileSetUsageTapering extends IfcMaterialProfileSetUsage
{
  ForProfileEndSet = null; // ENTITY IfcMaterialProfileSet SUBTYPE OF IfcMaterialDefinition
  CardinalEndPoint = null; // TYPE IfcCardinalPointReference = INTEGER
};
registerIfcClass(IfcMaterialProfileSetUsageTapering, schema);

class IfcExtendedProperties extends IfcPropertyAbstraction
{
  Name = null; // TYPE IfcIdentifier = STRING
  Description = null; // TYPE IfcText = STRING
  Properties = null; // SET[1:0] OF IfcProperty
};
registerIfcClass(IfcExtendedProperties, schema);

class IfcProfileProperties extends IfcExtendedProperties
{
  ProfileDefinition = null; // ENTITY IfcProfileDef
};
registerIfcClass(IfcProfileProperties, schema);

class IfcRectangularTrimmedSurface extends IfcBoundedSurface
{
  BasisSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
  U1 = null; // TYPE IfcParameterValue = REAL
  V1 = null; // TYPE IfcParameterValue = REAL
  U2 = null; // TYPE IfcParameterValue = REAL
  V2 = null; // TYPE IfcParameterValue = REAL
  Usense = null; // TYPE IfcBoolean = BOOLEAN
  Vsense = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcRectangularTrimmedSurface, schema);

class IfcRelAssignsToProduct extends IfcRelAssigns
{
  RelatingProduct = null; // TYPE IfcProductSelect = SELECT [IfcProduct, IfcTypeProduct]
};
registerIfcClass(IfcRelAssignsToProduct, schema);

class IfcTextureCoordinateGenerator extends IfcTextureCoordinate
{
  Mode = null; // TYPE IfcLabel = STRING
  Parameter = null; // LIST[1:0] OF IfcReal
};
registerIfcClass(IfcTextureCoordinateGenerator, schema);

class IfcSlabElementedCase extends IfcSlab
{
};
registerIfcClass(IfcSlabElementedCase, schema);

class IfcCurveStyleFontAndScaling extends IfcPresentationItem
{
  Name = null; // TYPE IfcLabel = STRING
  CurveFont = null; // TYPE IfcCurveStyleFontSelect = SELECT [IfcCurveStyleFont, IfcPreDefinedCurveFont]
  CurveFontScaling = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcCurveStyleFontAndScaling, schema);

class IfcPreDefinedProperties extends IfcPropertyAbstraction
{
};
registerIfcClass(IfcPreDefinedProperties, schema);

class IfcSectionReinforcementProperties extends IfcPreDefinedProperties
{
  LongitudinalStartPosition = null; // TYPE IfcLengthMeasure = REAL
  LongitudinalEndPosition = null; // TYPE IfcLengthMeasure = REAL
  TransversePosition = null; // TYPE IfcLengthMeasure = REAL
  ReinforcementRole = null; // TYPE IfcReinforcingBarRoleEnum = ENUMERATION OF [MAIN, SHEAR, LIGATURE, STUD, PUNCHING, EDGE, RING, ANCHORING, USERDEFINED, NOTDEFINED]
  SectionDefinition = null; // ENTITY IfcSectionProperties SUBTYPE OF IfcPreDefinedProperties
  CrossSectionReinforcementDefinitions = null; // SET[1:0] OF IfcReinforcementBarProperties
};
registerIfcClass(IfcSectionReinforcementProperties, schema);

class IfcMedicalDeviceType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcMedicalDeviceTypeEnum = ENUMERATION OF [AIRSTATION, FEEDAIRUNIT, OXYGENGENERATOR, OXYGENPLANT, VACUUMSTATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMedicalDeviceType, schema);

class IfcProjectOrder extends IfcControl
{
  PredefinedType = null; // TYPE IfcProjectOrderTypeEnum = ENUMERATION OF [CHANGEORDER, MAINTENANCEWORKORDER, MOVEORDER, PURCHASEORDER, WORKORDER, USERDEFINED, NOTDEFINED]
  Status = null; // TYPE IfcLabel = STRING
  LongDescription = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcProjectOrder, schema);

class IfcJunctionBox extends IfcFlowFitting
{
  PredefinedType = null; // TYPE IfcJunctionBoxTypeEnum = ENUMERATION OF [DATA, POWER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcJunctionBox, schema);

class IfcRelConnectsStructuralMember extends IfcRelConnects
{
  RelatingStructuralMember = null; // ENTITY IfcStructuralMember SUBTYPE OF IfcStructuralItem
  RelatedStructuralConnection = null; // ENTITY IfcStructuralConnection SUBTYPE OF IfcStructuralItem
  AppliedCondition = null; // ENTITY IfcBoundaryCondition
  AdditionalConditions = null; // ENTITY IfcStructuralConnectionCondition
  SupportedLength = null; // TYPE IfcLengthMeasure = REAL
  ConditionCoordinateSystem = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
};
registerIfcClass(IfcRelConnectsStructuralMember, schema);

class IfcRelConnectsWithEccentricity extends IfcRelConnectsStructuralMember
{
  ConnectionConstraint = null; // ENTITY IfcConnectionGeometry
};
registerIfcClass(IfcRelConnectsWithEccentricity, schema);

class IfcPropertyTableValue extends IfcSimpleProperty
{
  DefiningValues = null; // LIST[1:0] OF IfcValue
  DefinedValues = null; // LIST[1:0] OF IfcValue
  Expression = null; // TYPE IfcText = STRING
  DefiningUnit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
  DefinedUnit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
  CurveInterpolation = null; // TYPE IfcCurveInterpolationEnum = ENUMERATION OF [LINEAR, LOG_LINEAR, LOG_LOG, NOTDEFINED]
};
registerIfcClass(IfcPropertyTableValue, schema);

class IfcWallElementedCase extends IfcWall
{
};
registerIfcClass(IfcWallElementedCase, schema);

class IfcCommunicationsApplianceType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcCommunicationsApplianceTypeEnum = ENUMERATION OF [ANTENNA, COMPUTER, FAX, GATEWAY, MODEM, NETWORKAPPLIANCE, NETWORKBRIDGE, NETWORKHUB, PRINTER, REPEATER, ROUTER, SCANNER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCommunicationsApplianceType, schema);

class IfcTank extends IfcFlowStorageDevice
{
  PredefinedType = null; // TYPE IfcTankTypeEnum = ENUMERATION OF [BASIN, BREAKPRESSURE, EXPANSION, FEEDANDEXPANSION, PRESSUREVESSEL, STORAGE, VESSEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTank, schema);

class IfcDamperType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcDamperTypeEnum = ENUMERATION OF [BACKDRAFTDAMPER, BALANCINGDAMPER, BLASTDAMPER, CONTROLDAMPER, FIREDAMPER, FIRESMOKEDAMPER, FUMEHOODEXHAUST, GRAVITYDAMPER, GRAVITYRELIEFDAMPER, RELIEFDAMPER, SMOKEDAMPER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDamperType, schema);

class IfcRelDefinesByType extends IfcRelDefines
{
  RelatedObjects = null; // SET[1:0] OF IfcObject
  RelatingType = null; // ENTITY IfcTypeObject SUBTYPE OF IfcObjectDefinition
};
registerIfcClass(IfcRelDefinesByType, schema);

class IfcQuantitySet extends IfcPropertySetDefinition
{
};
registerIfcClass(IfcQuantitySet, schema);

class IfcTimeSeries extends SchemaBase
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  StartTime = null; // TYPE IfcDateTime = STRING
  EndTime = null; // TYPE IfcDateTime = STRING
  TimeSeriesDataType = null; // TYPE IfcTimeSeriesDataTypeEnum = ENUMERATION OF [CONTINUOUS, DISCRETE, DISCRETEBINARY, PIECEWISEBINARY, PIECEWISECONSTANT, PIECEWISECONTINUOUS, NOTDEFINED]
  DataOrigin = null; // TYPE IfcDataOriginEnum = ENUMERATION OF [MEASURED, PREDICTED, SIMULATED, USERDEFINED, NOTDEFINED]
  UserDefinedDataOrigin = null; // TYPE IfcLabel = STRING
  Unit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
};
registerIfcClass(IfcTimeSeries, schema);

class IfcIrregularTimeSeries extends IfcTimeSeries
{
  Values = null; // LIST[1:0] OF IfcIrregularTimeSeriesValue
};
registerIfcClass(IfcIrregularTimeSeries, schema);

class IfcMeasureWithUnit extends SchemaBase
{
  ValueComponent = null; // TYPE IfcValue = SELECT [IfcDerivedMeasureValue, IfcMeasureValue, IfcSimpleValue]
  UnitComponent = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
};
registerIfcClass(IfcMeasureWithUnit, schema);

class IfcCompositeProfileDef extends IfcProfileDef
{
  Profiles = null; // SET[2:0] OF IfcProfileDef
  Label = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcCompositeProfileDef, schema);

class IfcVoidingFeature extends IfcFeatureElementSubtraction
{
  PredefinedType = null; // TYPE IfcVoidingFeatureTypeEnum = ENUMERATION OF [CUTOUT, NOTCH, HOLE, MITER, CHAMFER, EDGE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcVoidingFeature, schema);

class IfcAnnotation extends IfcProduct
{
};
registerIfcClass(IfcAnnotation, schema);

class IfcSanitaryTerminal extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcSanitaryTerminalTypeEnum = ENUMERATION OF [BATH, BIDET, CISTERN, SHOWER, SINK, SANITARYFOUNTAIN, TOILETPAN, URINAL, WASHHANDBASIN, WCSEAT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSanitaryTerminal, schema);

class IfcMaterialProperties extends IfcExtendedProperties
{
  Material = null; // ENTITY IfcMaterialDefinition
};
registerIfcClass(IfcMaterialProperties, schema);

class IfcGridAxis extends SchemaBase
{
  AxisTag = null; // TYPE IfcLabel = STRING
  AxisCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  SameSense = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcGridAxis, schema);

class IfcRectangleProfileDef extends IfcParameterizedProfileDef
{
  XDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  YDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcRectangleProfileDef, schema);

class IfcGeometricSet extends IfcGeometricRepresentationItem
{
  Elements = null; // SET[1:0] OF IfcGeometricSetSelect
};
registerIfcClass(IfcGeometricSet, schema);

class IfcGeometricCurveSet extends IfcGeometricSet
{
};
registerIfcClass(IfcGeometricCurveSet, schema);

class IfcBeamType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcBeamTypeEnum = ENUMERATION OF [BEAM, JOIST, HOLLOWCORE, LINTEL, SPANDREL, T_BEAM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBeamType, schema);

class IfcCartesianTransformationOperator3DnonUniform extends IfcCartesianTransformationOperator3D
{
  Scale2 = null; // TYPE IfcReal = REAL
  Scale3 = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcCartesianTransformationOperator3DnonUniform, schema);

class IfcExternallyDefinedHatchStyle extends IfcExternalReference
{
};
registerIfcClass(IfcExternallyDefinedHatchStyle, schema);

class IfcStructuralSurfaceAction extends IfcStructuralAction
{
  ProjectedOrTrue = null; // TYPE IfcProjectedOrTrueLengthEnum = ENUMERATION OF [PROJECTED_LENGTH, TRUE_LENGTH]
  PredefinedType = null; // TYPE IfcStructuralSurfaceActivityTypeEnum = ENUMERATION OF [CONST, BILINEAR, DISCRETE, ISOCONTOUR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStructuralSurfaceAction, schema);

class IfcStructuralSurfaceConnection extends IfcStructuralConnection
{
};
registerIfcClass(IfcStructuralSurfaceConnection, schema);

class IfcDiscreteAccessory extends IfcElementComponent
{
  PredefinedType = null; // TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF [ANCHORPLATE, BRACKET, SHOE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDiscreteAccessory, schema);

class IfcCompressor extends IfcFlowMovingDevice
{
  PredefinedType = null; // TYPE IfcCompressorTypeEnum = ENUMERATION OF [DYNAMIC, RECIPROCATING, ROTARY, SCROLL, TROCHOIDAL, SINGLESTAGE, BOOSTER, OPENTYPE, HERMETIC, SEMIHERMETIC, WELDEDSHELLHERMETIC, ROLLINGPISTON, ROTARYVANE, SINGLESCREW, TWINSCREW, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCompressor, schema);

class IfcSectionProperties extends IfcPreDefinedProperties
{
  SectionType = null; // TYPE IfcSectionTypeEnum = ENUMERATION OF [UNIFORM, TAPERED]
  StartProfile = null; // ENTITY IfcProfileDef
  EndProfile = null; // ENTITY IfcProfileDef
};
registerIfcClass(IfcSectionProperties, schema);

class IfcSurfaceFeature extends IfcFeatureElement
{
  PredefinedType = null; // TYPE IfcSurfaceFeatureTypeEnum = ENUMERATION OF [MARK, TAG, TREATMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSurfaceFeature, schema);

class IfcRampType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcRampTypeEnum = ENUMERATION OF [STRAIGHT_RUN_RAMP, TWO_STRAIGHT_RUN_RAMP, QUARTER_TURN_RAMP, TWO_QUARTER_TURN_RAMP, HALF_TURN_RAMP, SPIRAL_RAMP, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRampType, schema);

class IfcDistributionCircuit extends IfcDistributionSystem
{
};
registerIfcClass(IfcDistributionCircuit, schema);

class IfcBooleanClippingResult extends IfcBooleanResult
{
};
registerIfcClass(IfcBooleanClippingResult, schema);

class IfcReinforcingBarType extends IfcReinforcingElementType
{
  PredefinedType = null; // TYPE IfcReinforcingBarTypeEnum = ENUMERATION OF [ANCHORING, EDGE, LIGATURE, MAIN, PUNCHING, RING, SHEAR, STUD, USERDEFINED, NOTDEFINED]
  NominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  CrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  BarLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  BarSurface = null; // TYPE IfcReinforcingBarSurfaceEnum = ENUMERATION OF [PLAIN, TEXTURED]
  BendingShapeCode = null; // TYPE IfcLabel = STRING
  BendingParameters = null; // LIST[1:0] OF IfcBendingParameterSelect
};
registerIfcClass(IfcReinforcingBarType, schema);

class IfcVertexLoop extends IfcLoop
{
  LoopVertex = null; // ENTITY IfcVertex SUBTYPE OF IfcTopologicalRepresentationItem
};
registerIfcClass(IfcVertexLoop, schema);

class IfcSurfaceStyle extends IfcPresentationStyle
{
  Side = null; // TYPE IfcSurfaceSide = ENUMERATION OF [POSITIVE, NEGATIVE, BOTH]
  Styles = null; // SET[1:5] OF IfcSurfaceStyleElementSelect
};
registerIfcClass(IfcSurfaceStyle, schema);

class IfcCurveStyle extends IfcPresentationStyle
{
  CurveFont = null; // TYPE IfcCurveFontOrScaledCurveFontSelect = SELECT [IfcCurveStyleFontAndScaling, IfcCurveStyleFontSelect]
  CurveWidth = null; // TYPE IfcSizeSelect = SELECT [IfcDescriptiveMeasure, IfcLengthMeasure, IfcNormalisedRatioMeasure, IfcPositiveLengthMeasure, IfcPositiveRatioMeasure, IfcRatioMeasure]
  CurveColour = null; // TYPE IfcColour = SELECT [IfcColourSpecification, IfcPreDefinedColour]
  ModelOrDraughting = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcCurveStyle, schema);

class IfcCostSchedule extends IfcControl
{
  PredefinedType = null; // TYPE IfcCostScheduleTypeEnum = ENUMERATION OF [BUDGET, COSTPLAN, ESTIMATE, TENDER, PRICEDBILLOFQUANTITIES, UNPRICEDBILLOFQUANTITIES, SCHEDULEOFRATES, USERDEFINED, NOTDEFINED]
  Status = null; // TYPE IfcLabel = STRING
  SubmittedOn = null; // TYPE IfcDateTime = STRING
  UpdateDate = null; // TYPE IfcDateTime = STRING
};
registerIfcClass(IfcCostSchedule, schema);

class IfcProtectiveDeviceTrippingUnit extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcProtectiveDeviceTrippingUnitTypeEnum = ENUMERATION OF [ELECTRONIC, ELECTROMAGNETIC, RESIDUALCURRENT, THERMAL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProtectiveDeviceTrippingUnit, schema);

class IfcTextureVertexList extends IfcPresentationItem
{
  TexCoordsList = null; // LIST[1:0] OF LIST[2:2] OF IfcParameterValue
};
registerIfcClass(IfcTextureVertexList, schema);

class IfcMemberStandardCase extends IfcMember
{
};
registerIfcClass(IfcMemberStandardCase, schema);

class IfcMaterialProfile extends IfcMaterialDefinition
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Material = null; // ENTITY IfcMaterial SUBTYPE OF IfcMaterialDefinition
  Profile = null; // ENTITY IfcProfileDef
  Priority = null; // TYPE IfcInteger = INTEGER
  Category = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcMaterialProfile, schema);

class IfcTendon extends IfcReinforcingElement
{
  PredefinedType = null; // TYPE IfcTendonTypeEnum = ENUMERATION OF [BAR, COATED, STRAND, WIRE, USERDEFINED, NOTDEFINED]
  NominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  CrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  TensionForce = null; // TYPE IfcForceMeasure = REAL
  PreStress = null; // TYPE IfcPressureMeasure = REAL
  FrictionCoefficient = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  AnchorageSlip = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  MinCurvatureRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcTendon, schema);

class IfcSpatialStructureElement extends IfcSpatialElement
{
  CompositionType = null; // TYPE IfcElementCompositionEnum = ENUMERATION OF [COMPLEX, ELEMENT, PARTIAL]
};
registerIfcClass(IfcSpatialStructureElement, schema);

class IfcSpace extends IfcSpatialStructureElement
{
  PredefinedType = null; // TYPE IfcSpaceTypeEnum = ENUMERATION OF [SPACE, PARKING, GFA, INTERNAL, EXTERNAL, USERDEFINED, NOTDEFINED]
  ElevationWithFlooring = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcSpace, schema);

class IfcFastenerType extends IfcElementComponentType
{
  PredefinedType = null; // TYPE IfcFastenerTypeEnum = ENUMERATION OF [GLUE, MORTAR, WELD, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFastenerType, schema);

class IfcResourceApprovalRelationship extends IfcResourceLevelRelationship
{
  RelatedResourceObjects = null; // SET[1:0] OF IfcResourceObjectSelect
  RelatingApproval = null; // ENTITY IfcApproval
};
registerIfcClass(IfcResourceApprovalRelationship, schema);

class IfcGeographicElementType extends IfcElementType
{
  PredefinedType = null; // TYPE IfcGeographicElementTypeEnum = ENUMERATION OF [TERRAIN, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcGeographicElementType, schema);

class IfcTendonType extends IfcReinforcingElementType
{
  PredefinedType = null; // TYPE IfcTendonTypeEnum = ENUMERATION OF [BAR, COATED, STRAND, WIRE, USERDEFINED, NOTDEFINED]
  NominalDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  CrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  SheathDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcTendonType, schema);

class IfcSpatialZone extends IfcSpatialElement
{
  PredefinedType = null; // TYPE IfcSpatialZoneTypeEnum = ENUMERATION OF [CONSTRUCTION, FIRESAFETY, LIGHTING, OCCUPANCY, SECURITY, THERMAL, TRANSPORT, VENTILATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSpatialZone, schema);

class IfcStructuralPlanarAction extends IfcStructuralSurfaceAction
{
};
registerIfcClass(IfcStructuralPlanarAction, schema);

class IfcPileType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcPileTypeEnum = ENUMERATION OF [BORED, DRIVEN, JETGROUTING, COHESION, FRICTION, SUPPORT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPileType, schema);

class IfcRightCircularCylinder extends IfcCsgPrimitive3D
{
  Height = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcRightCircularCylinder, schema);

class IfcBeamStandardCase extends IfcBeam
{
};
registerIfcClass(IfcBeamStandardCase, schema);

class IfcBoundaryNodeCondition extends IfcBoundaryCondition
{
  TranslationalStiffnessX = null; // TYPE IfcTranslationalStiffnessSelect = SELECT [IfcBoolean, IfcLinearStiffnessMeasure]
  TranslationalStiffnessY = null; // TYPE IfcTranslationalStiffnessSelect = SELECT [IfcBoolean, IfcLinearStiffnessMeasure]
  TranslationalStiffnessZ = null; // TYPE IfcTranslationalStiffnessSelect = SELECT [IfcBoolean, IfcLinearStiffnessMeasure]
  RotationalStiffnessX = null; // TYPE IfcRotationalStiffnessSelect = SELECT [IfcBoolean, IfcRotationalStiffnessMeasure]
  RotationalStiffnessY = null; // TYPE IfcRotationalStiffnessSelect = SELECT [IfcBoolean, IfcRotationalStiffnessMeasure]
  RotationalStiffnessZ = null; // TYPE IfcRotationalStiffnessSelect = SELECT [IfcBoolean, IfcRotationalStiffnessMeasure]
};
registerIfcClass(IfcBoundaryNodeCondition, schema);

class IfcBoundaryNodeConditionWarping extends IfcBoundaryNodeCondition
{
  WarpingStiffness = null; // TYPE IfcWarpingStiffnessSelect = SELECT [IfcBoolean, IfcWarpingMomentMeasure]
};
registerIfcClass(IfcBoundaryNodeConditionWarping, schema);

class IfcCondenser extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcCondenserTypeEnum = ENUMERATION OF [AIRCOOLED, EVAPORATIVECOOLED, WATERCOOLED, WATERCOOLEDBRAZEDPLATE, WATERCOOLEDSHELLCOIL, WATERCOOLEDSHELLTUBE, WATERCOOLEDTUBEINTUBE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCondenser, schema);

class IfcElectricAppliance extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcElectricApplianceTypeEnum = ENUMERATION OF [DISHWASHER, ELECTRICCOOKER, FREESTANDINGELECTRICHEATER, FREESTANDINGFAN, FREESTANDINGWATERHEATER, FREESTANDINGWATERCOOLER, FREEZER, FRIDGE_FREEZER, HANDDRYER, KITCHENMACHINE, MICROWAVE, PHOTOCOPIER, REFRIGERATOR, TUMBLEDRYER, VENDINGMACHINE, WASHINGMACHINE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricAppliance, schema);

class IfcValveType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcValveTypeEnum = ENUMERATION OF [AIRRELEASE, ANTIVACUUM, CHANGEOVER, CHECK, COMMISSIONING, DIVERTING, DRAWOFFCOCK, DOUBLECHECK, DOUBLEREGULATING, FAUCET, FLUSHING, GASCOCK, GASTAP, ISOLATING, MIXING, PRESSUREREDUCING, PRESSURERELIEF, REGULATING, SAFETYCUTOFF, STEAMTRAP, STOPCOCK, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcValveType, schema);

class IfcFaceBound extends IfcTopologicalRepresentationItem
{
  Bound = null; // ENTITY IfcLoop SUBTYPE OF IfcTopologicalRepresentationItem
  Orientation = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcFaceBound, schema);

class IfcEngine extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcEngineTypeEnum = ENUMERATION OF [EXTERNALCOMBUSTION, INTERNALCOMBUSTION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcEngine, schema);

class IfcMedicalDevice extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcMedicalDeviceTypeEnum = ENUMERATION OF [AIRSTATION, FEEDAIRUNIT, OXYGENGENERATOR, OXYGENPLANT, VACUUMSTATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMedicalDevice, schema);

class IfcResourceConstraintRelationship extends IfcResourceLevelRelationship
{
  RelatingConstraint = null; // ENTITY IfcConstraint
  RelatedResourceObjects = null; // SET[1:0] OF IfcResourceObjectSelect
};
registerIfcClass(IfcResourceConstraintRelationship, schema);

class IfcBoilerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcBoilerTypeEnum = ENUMERATION OF [WATER, STEAM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBoilerType, schema);

class IfcConversionBasedUnitWithOffset extends IfcConversionBasedUnit
{
  ConversionOffset = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcConversionBasedUnitWithOffset, schema);

class IfcUnitaryControlElementType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcUnitaryControlElementTypeEnum = ENUMERATION OF [ALARMPANEL, CONTROLPANEL, GASDETECTIONPANEL, INDICATORPANEL, MIMICPANEL, HUMIDISTAT, THERMOSTAT, WEATHERSTATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcUnitaryControlElementType, schema);

class IfcPlate extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcPlateTypeEnum = ENUMERATION OF [CURTAIN_PANEL, SHEET, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPlate, schema);

class IfcPlateStandardCase extends IfcPlate
{
};
registerIfcClass(IfcPlateStandardCase, schema);

class IfcBurnerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcBurnerTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBurnerType, schema);

class IfcExternallyDefinedSurfaceStyle extends IfcExternalReference
{
};
registerIfcClass(IfcExternallyDefinedSurfaceStyle, schema);

class IfcDoorType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcDoorTypeEnum = ENUMERATION OF [DOOR, GATE, TRAPDOOR, USERDEFINED, NOTDEFINED]
  OperationType = null; // TYPE IfcDoorTypeOperationEnum = ENUMERATION OF [SINGLE_SWING_LEFT, SINGLE_SWING_RIGHT, DOUBLE_DOOR_SINGLE_SWING, DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT, DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT, DOUBLE_SWING_LEFT, DOUBLE_SWING_RIGHT, DOUBLE_DOOR_DOUBLE_SWING, SLIDING_TO_LEFT, SLIDING_TO_RIGHT, DOUBLE_DOOR_SLIDING, FOLDING_TO_LEFT, FOLDING_TO_RIGHT, DOUBLE_DOOR_FOLDING, REVOLVING, ROLLINGUP, SWING_FIXED_LEFT, SWING_FIXED_RIGHT, USERDEFINED, NOTDEFINED]
  ParameterTakesPrecedence = null; // TYPE IfcBoolean = BOOLEAN
  UserDefinedOperationType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcDoorType, schema);

class IfcIndexedColourMap extends IfcPresentationItem
{
  MappedTo = null; // ENTITY IfcTessellatedFaceSet SUBTYPE OF IfcTessellatedItem
  Opacity = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  Colours = null; // ENTITY IfcColourRgbList SUBTYPE OF IfcPresentationItem
  ColourIndex = null; // LIST[1:0] OF IfcPositiveInteger
};
registerIfcClass(IfcIndexedColourMap, schema);

class IfcWasteTerminalType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcWasteTerminalTypeEnum = ENUMERATION OF [FLOORTRAP, FLOORWASTE, GULLYSUMP, GULLYTRAP, ROOFDRAIN, WASTEDISPOSALUNIT, WASTETRAP, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcWasteTerminalType, schema);

class IfcCurveStyleFontPattern extends IfcPresentationItem
{
  VisibleSegmentLength = null; // TYPE IfcLengthMeasure = REAL
  InvisibleSegmentLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCurveStyleFontPattern, schema);

class IfcPhysicalComplexQuantity extends IfcPhysicalQuantity
{
  HasQuantities = null; // SET[1:0] OF IfcPhysicalQuantity
  Discrimination = null; // TYPE IfcLabel = STRING
  Quality = null; // TYPE IfcLabel = STRING
  Usage = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcPhysicalComplexQuantity, schema);

class IfcStructuralCurveAction extends IfcStructuralAction
{
  ProjectedOrTrue = null; // TYPE IfcProjectedOrTrueLengthEnum = ENUMERATION OF [PROJECTED_LENGTH, TRUE_LENGTH]
  PredefinedType = null; // TYPE IfcStructuralCurveActivityTypeEnum = ENUMERATION OF [CONST, LINEAR, POLYGONAL, EQUIDISTANT, SINUS, PARABOLA, DISCRETE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStructuralCurveAction, schema);

class IfcSurfaceOfLinearExtrusion extends IfcSweptSurface
{
  ExtrudedDirection = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  Depth = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcSurfaceOfLinearExtrusion, schema);

class IfcEdge extends IfcTopologicalRepresentationItem
{
  EdgeStart = null; // ENTITY IfcVertex SUBTYPE OF IfcTopologicalRepresentationItem
  EdgeEnd = null; // ENTITY IfcVertex SUBTYPE OF IfcTopologicalRepresentationItem
};
registerIfcClass(IfcEdge, schema);

class IfcSubedge extends IfcEdge
{
  ParentEdge = null; // ENTITY IfcEdge SUBTYPE OF IfcTopologicalRepresentationItem
};
registerIfcClass(IfcSubedge, schema);

class IfcPropertyReferenceValue extends IfcSimpleProperty
{
  UsageName = null; // TYPE IfcText = STRING
  PropertyReference = null; // TYPE IfcObjectReferenceSelect = SELECT [IfcAddress, IfcAppliedValue, IfcExternalReference, IfcMaterialDefinition, IfcOrganization, IfcPerson, IfcPersonAndOrganization, IfcTable, IfcTimeSeries]
};
registerIfcClass(IfcPropertyReferenceValue, schema);

class IfcStairFlightType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcStairFlightTypeEnum = ENUMERATION OF [STRAIGHT, WINDER, SPIRAL, CURVED, FREEFORM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStairFlightType, schema);

class IfcCartesianPointList2D extends IfcCartesianPointList
{
  CoordList = null; // LIST[1:0] OF LIST[2:2] OF IfcLengthMeasure
};
registerIfcClass(IfcCartesianPointList2D, schema);

class IfcActuator extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcActuatorTypeEnum = ENUMERATION OF [ELECTRICACTUATOR, HANDOPERATEDACTUATOR, HYDRAULICACTUATOR, PNEUMATICACTUATOR, THERMOSTATICACTUATOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcActuator, schema);

class IfcReference extends SchemaBase
{
  TypeIdentifier = null; // TYPE IfcIdentifier = STRING
  AttributeIdentifier = null; // TYPE IfcIdentifier = STRING
  InstanceName = null; // TYPE IfcLabel = STRING
  ListPositions = null; // LIST[1:0] OF IfcInteger
  InnerReference = null; // ENTITY IfcReference
};
registerIfcClass(IfcReference, schema);

class IfcWindowLiningProperties extends IfcPreDefinedPropertySet
{
  LiningDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  LiningThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  TransomThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  MullionThickness = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  FirstTransomOffset = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  SecondTransomOffset = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  FirstMullionOffset = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  SecondMullionOffset = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  ShapeAspectStyle = null; // ENTITY IfcShapeAspect
  LiningOffset = null; // TYPE IfcLengthMeasure = REAL
  LiningToPanelOffsetX = null; // TYPE IfcLengthMeasure = REAL
  LiningToPanelOffsetY = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcWindowLiningProperties, schema);

class IfcStructuralPointReaction extends IfcStructuralReaction
{
};
registerIfcClass(IfcStructuralPointReaction, schema);

class IfcStructuralSurfaceMember extends IfcStructuralMember
{
  PredefinedType = null; // TYPE IfcStructuralSurfaceMemberTypeEnum = ENUMERATION OF [BENDING_ELEMENT, MEMBRANE_ELEMENT, SHELL, USERDEFINED, NOTDEFINED]
  Thickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcStructuralSurfaceMember, schema);

class IfcStructuralSurfaceMemberVarying extends IfcStructuralSurfaceMember
{
};
registerIfcClass(IfcStructuralSurfaceMemberVarying, schema);

class IfcMaterialConstituent extends IfcMaterialDefinition
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Material = null; // ENTITY IfcMaterial SUBTYPE OF IfcMaterialDefinition
  Fraction = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  Category = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcMaterialConstituent, schema);

class IfcShadingDeviceType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcShadingDeviceTypeEnum = ENUMERATION OF [JALOUSIE, SHUTTER, AWNING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcShadingDeviceType, schema);

class IfcSwitchingDevice extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcSwitchingDeviceTypeEnum = ENUMERATION OF [CONTACTOR, DIMMERSWITCH, EMERGENCYSTOP, KEYPAD, MOMENTARYSWITCH, SELECTORSWITCH, STARTER, SWITCHDISCONNECTOR, TOGGLESWITCH, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSwitchingDevice, schema);

class IfcComplexPropertyTemplate extends IfcPropertyTemplate
{
  UsageName = null; // TYPE IfcLabel = STRING
  TemplateType = null; // TYPE IfcComplexPropertyTemplateTypeEnum = ENUMERATION OF [P_COMPLEX, Q_COMPLEX]
  HasPropertyTemplates = null; // SET[1:0] OF IfcPropertyTemplate
};
registerIfcClass(IfcComplexPropertyTemplate, schema);

class IfcFlowInstrumentType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF [PRESSUREGAUGE, THERMOMETER, AMMETER, FREQUENCYMETER, POWERFACTORMETER, PHASEANGLEMETER, VOLTMETER_PEAK, VOLTMETER_RMS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFlowInstrumentType, schema);

class IfcPresentationLayerWithStyle extends IfcPresentationLayerAssignment
{
  LayerOn = null; // TYPE IfcLogical = LOGICAL
  LayerFrozen = null; // TYPE IfcLogical = LOGICAL
  LayerBlocked = null; // TYPE IfcLogical = LOGICAL
  LayerStyles = null; // SET[0:0] OF IfcPresentationStyle
};
registerIfcClass(IfcPresentationLayerWithStyle, schema);

class IfcVector extends IfcGeometricRepresentationItem
{
  Orientation = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
  Magnitude = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcVector, schema);

class IfcExternalReferenceRelationship extends IfcResourceLevelRelationship
{
  RelatingReference = null; // ENTITY IfcExternalReference
  RelatedResourceObjects = null; // SET[1:0] OF IfcResourceObjectSelect
};
registerIfcClass(IfcExternalReferenceRelationship, schema);

class IfcMaterialConstituentSet extends IfcMaterialDefinition
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  MaterialConstituents = null; // SET[1:0] OF IfcMaterialConstituent
};
registerIfcClass(IfcMaterialConstituentSet, schema);

class IfcTimeSeriesValue extends SchemaBase
{
  ListValues = null; // LIST[1:0] OF IfcValue
};
registerIfcClass(IfcTimeSeriesValue, schema);

class IfcGeographicElement extends IfcElement
{
  PredefinedType = null; // TYPE IfcGeographicElementTypeEnum = ENUMERATION OF [TERRAIN, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcGeographicElement, schema);

class IfcSlippageConnectionCondition extends IfcStructuralConnectionCondition
{
  SlippageX = null; // TYPE IfcLengthMeasure = REAL
  SlippageY = null; // TYPE IfcLengthMeasure = REAL
  SlippageZ = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcSlippageConnectionCondition, schema);

class IfcFastener extends IfcElementComponent
{
  PredefinedType = null; // TYPE IfcFastenerTypeEnum = ENUMERATION OF [GLUE, MORTAR, WELD, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFastener, schema);

class IfcImageTexture extends IfcSurfaceTexture
{
  URLReference = null; // TYPE IfcURIReference = STRING
};
registerIfcClass(IfcImageTexture, schema);

class IfcGridPlacement extends IfcObjectPlacement
{
  PlacementLocation = null; // ENTITY IfcVirtualGridIntersection
  PlacementRefDirection = null; // TYPE IfcGridPlacementDirectionSelect = SELECT [IfcDirection, IfcVirtualGridIntersection]
};
registerIfcClass(IfcGridPlacement, schema);

class IfcLShapeProfileDef extends IfcParameterizedProfileDef
{
  Depth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  Width = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  Thickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  EdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  LegSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcLShapeProfileDef, schema);

class IfcDocumentInformation extends IfcExternalInformation
{
  Identification = null; // TYPE IfcIdentifier = STRING
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Location = null; // TYPE IfcURIReference = STRING
  Purpose = null; // TYPE IfcText = STRING
  IntendedUse = null; // TYPE IfcText = STRING
  Scope = null; // TYPE IfcText = STRING
  Revision = null; // TYPE IfcLabel = STRING
  DocumentOwner = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  Editors = null; // SET[1:0] OF IfcActorSelect
  CreationTime = null; // TYPE IfcDateTime = STRING
  LastRevisionTime = null; // TYPE IfcDateTime = STRING
  ElectronicFormat = null; // TYPE IfcIdentifier = STRING
  ValidFrom = null; // TYPE IfcDate = STRING
  ValidUntil = null; // TYPE IfcDate = STRING
  Confidentiality = null; // TYPE IfcDocumentConfidentialityEnum = ENUMERATION OF [PUBLIC, RESTRICTED, CONFIDENTIAL, PERSONAL, USERDEFINED, NOTDEFINED]
  Status = null; // TYPE IfcDocumentStatusEnum = ENUMERATION OF [DRAFT, FINALDRAFT, FINAL, REVISION, NOTDEFINED]
};
registerIfcClass(IfcDocumentInformation, schema);

class IfcPermit extends IfcControl
{
  PredefinedType = null; // TYPE IfcPermitTypeEnum = ENUMERATION OF [ACCESS, BUILDING, WORK, USERDEFINED, NOTDEFINED]
  Status = null; // TYPE IfcLabel = STRING
  LongDescription = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcPermit, schema);

class IfcColourRgbList extends IfcPresentationItem
{
  ColourList = null; // LIST[1:0] OF LIST[3:3] OF IfcNormalisedRatioMeasure
};
registerIfcClass(IfcColourRgbList, schema);

class IfcLampType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcLampTypeEnum = ENUMERATION OF [COMPACTFLUORESCENT, FLUORESCENT, HALOGEN, HIGHPRESSUREMERCURY, HIGHPRESSURESODIUM, LED, METALHALIDE, OLED, TUNGSTENFILAMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcLampType, schema);

class IfcSpaceType extends IfcSpatialStructureElementType
{
  PredefinedType = null; // TYPE IfcSpaceTypeEnum = ENUMERATION OF [SPACE, PARKING, GFA, INTERNAL, EXTERNAL, USERDEFINED, NOTDEFINED]
  LongName = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcSpaceType, schema);

class IfcCostItem extends IfcControl
{
  PredefinedType = null; // TYPE IfcCostItemTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
  CostValues = null; // LIST[1:0] OF IfcCostValue
  CostQuantities = null; // LIST[1:0] OF IfcPhysicalQuantity
};
registerIfcClass(IfcCostItem, schema);

class IfcMaterialLayerSetUsage extends IfcMaterialUsageDefinition
{
  ForLayerSet = null; // ENTITY IfcMaterialLayerSet SUBTYPE OF IfcMaterialDefinition
  LayerSetDirection = null; // TYPE IfcLayerSetDirectionEnum = ENUMERATION OF [AXIS1, AXIS2, AXIS3]
  DirectionSense = null; // TYPE IfcDirectionSenseEnum = ENUMERATION OF [POSITIVE, NEGATIVE]
  OffsetFromReferenceLine = null; // TYPE IfcLengthMeasure = REAL
  ReferenceExtent = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcMaterialLayerSetUsage, schema);

class IfcStairFlight extends IfcBuildingElement
{
  NumberOfRisers = null; // TYPE IfcInteger = INTEGER
  NumberOfTreads = null; // TYPE IfcInteger = INTEGER
  RiserHeight = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TreadLength = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PredefinedType = null; // TYPE IfcStairFlightTypeEnum = ENUMERATION OF [STRAIGHT, WINDER, SPIRAL, CURVED, FREEFORM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStairFlight, schema);

class IfcTask extends IfcProcess
{
  Status = null; // TYPE IfcLabel = STRING
  WorkMethod = null; // TYPE IfcLabel = STRING
  IsMilestone = null; // TYPE IfcBoolean = BOOLEAN
  Priority = null; // TYPE IfcInteger = INTEGER
  TaskTime = null; // ENTITY IfcTaskTime SUBTYPE OF IfcSchedulingTime
  PredefinedType = null; // TYPE IfcTaskTypeEnum = ENUMERATION OF [ATTENDANCE, CONSTRUCTION, DEMOLITION, DISMANTLE, DISPOSAL, INSTALLATION, LOGISTIC, MAINTENANCE, MOVE, OPERATION, REMOVAL, RENOVATION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTask, schema);

class IfcBuildingElementPart extends IfcElementComponent
{
  PredefinedType = null; // TYPE IfcBuildingElementPartTypeEnum = ENUMERATION OF [INSULATION, PRECASTPANEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBuildingElementPart, schema);

class IfcEvaporator extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcEvaporatorTypeEnum = ENUMERATION OF [DIRECTEXPANSION, DIRECTEXPANSIONSHELLANDTUBE, DIRECTEXPANSIONTUBEINTUBE, DIRECTEXPANSIONBRAZEDPLATE, FLOODEDSHELLANDTUBE, SHELLANDCOIL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcEvaporator, schema);

class IfcTendonAnchorType extends IfcReinforcingElementType
{
  PredefinedType = null; // TYPE IfcTendonAnchorTypeEnum = ENUMERATION OF [COUPLER, FIXED_END, TENSIONING_END, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTendonAnchorType, schema);

class IfcRelReferencedInSpatialStructure extends IfcRelConnects
{
  RelatedElements = null; // SET[1:0] OF IfcProduct
  RelatingStructure = null; // ENTITY IfcSpatialElement SUBTYPE OF IfcProduct
};
registerIfcClass(IfcRelReferencedInSpatialStructure, schema);

class IfcStructuralLoadSingleDisplacementDistortion extends IfcStructuralLoadSingleDisplacement
{
  Distortion = null; // TYPE IfcCurvatureMeasure = REAL
};
registerIfcClass(IfcStructuralLoadSingleDisplacementDistortion, schema);

class IfcConnectionPointGeometry extends IfcConnectionGeometry
{
  PointOnRelatingElement = null; // TYPE IfcPointOrVertexPoint = SELECT [IfcPoint, IfcVertexPoint]
  PointOnRelatedElement = null; // TYPE IfcPointOrVertexPoint = SELECT [IfcPoint, IfcVertexPoint]
};
registerIfcClass(IfcConnectionPointGeometry, schema);

class IfcBurner extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcBurnerTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcBurner, schema);

class IfcPresentationStyleAssignment extends SchemaBase
{
  Styles = null; // SET[1:0] OF IfcPresentationStyleSelect
};
registerIfcClass(IfcPresentationStyleAssignment, schema);

class IfcRightCircularCone extends IfcCsgPrimitive3D
{
  Height = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  BottomRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcRightCircularCone, schema);

class IfcChillerType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcChillerTypeEnum = ENUMERATION OF [AIRCOOLED, WATERCOOLED, HEATRECOVERY, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcChillerType, schema);

class IfcSystemFurnitureElementType extends IfcFurnishingElementType
{
  PredefinedType = null; // TYPE IfcSystemFurnitureElementTypeEnum = ENUMERATION OF [PANEL, WORKSURFACE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSystemFurnitureElementType, schema);

class IfcMaterialProfileWithOffsets extends IfcMaterialProfile
{
  OffsetValues = null; // ARRAY[1:2] OF IfcLengthMeasure
};
registerIfcClass(IfcMaterialProfileWithOffsets, schema);

class IfcRelFillsElement extends IfcRelConnects
{
  RelatingOpeningElement = null; // ENTITY IfcOpeningElement SUBTYPE OF IfcFeatureElementSubtraction
  RelatedBuildingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
};
registerIfcClass(IfcRelFillsElement, schema);

class IfcArbitraryOpenProfileDef extends IfcProfileDef
{
  Curve = null; // ENTITY IfcBoundedCurve SUBTYPE OF IfcCurve
};
registerIfcClass(IfcArbitraryOpenProfileDef, schema);

class IfcCenterLineProfileDef extends IfcArbitraryOpenProfileDef
{
  Thickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCenterLineProfileDef, schema);

class IfcLaborResourceType extends IfcConstructionResourceType
{
  PredefinedType = null; // TYPE IfcLaborResourceTypeEnum = ENUMERATION OF [ADMINISTRATION, CARPENTRY, CLEANING, CONCRETE, DRYWALL, ELECTRIC, FINISHING, FLOORING, GENERAL, HVAC, LANDSCAPING, MASONRY, PAINTING, PAVING, PLUMBING, ROOFING, SITEGRADING, STEELWORK, SURVEYING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcLaborResourceType, schema);

class IfcSolarDeviceType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcSolarDeviceTypeEnum = ENUMERATION OF [SOLARCOLLECTOR, SOLARPANEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSolarDeviceType, schema);

class IfcChiller extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcChillerTypeEnum = ENUMERATION OF [AIRCOOLED, WATERCOOLED, HEATRECOVERY, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcChiller, schema);

class IfcMaterialRelationship extends IfcResourceLevelRelationship
{
  RelatingMaterial = null; // ENTITY IfcMaterial SUBTYPE OF IfcMaterialDefinition
  RelatedMaterials = null; // SET[1:0] OF IfcMaterial
  Expression = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcMaterialRelationship, schema);

class IfcWindowStandardCase extends IfcWindow
{
};
registerIfcClass(IfcWindowStandardCase, schema);

class IfcSensorType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcSensorTypeEnum = ENUMERATION OF [COSENSOR, CO2SENSOR, CONDUCTANCESENSOR, CONTACTSENSOR, FIRESENSOR, FLOWSENSOR, FROSTSENSOR, GASSENSOR, HEATSENSOR, HUMIDITYSENSOR, IDENTIFIERSENSOR, IONCONCENTRATIONSENSOR, LEVELSENSOR, LIGHTSENSOR, MOISTURESENSOR, MOVEMENTSENSOR, PHSENSOR, PRESSURESENSOR, RADIATIONSENSOR, RADIOACTIVITYSENSOR, SMOKESENSOR, SOUNDSENSOR, TEMPERATURESENSOR, WINDSENSOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSensorType, schema);

class IfcRelServicesBuildings extends IfcRelConnects
{
  RelatingSystem = null; // ENTITY IfcSystem SUBTYPE OF IfcGroup
  RelatedBuildings = null; // SET[1:0] OF IfcSpatialElement
};
registerIfcClass(IfcRelServicesBuildings, schema);

class IfcTShapeProfileDef extends IfcParameterizedProfileDef
{
  Depth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeEdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebEdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
  FlangeSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcTShapeProfileDef, schema);

class IfcWindowStyle extends IfcTypeProduct
{
  ConstructionType = null; // TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF [ALUMINIUM, HIGH_GRADE_STEEL, STEEL, WOOD, ALUMINIUM_WOOD, PLASTIC, OTHER_CONSTRUCTION, NOTDEFINED]
  OperationType = null; // TYPE IfcWindowStyleOperationEnum = ENUMERATION OF [SINGLE_PANEL, DOUBLE_PANEL_VERTICAL, DOUBLE_PANEL_HORIZONTAL, TRIPLE_PANEL_VERTICAL, TRIPLE_PANEL_BOTTOM, TRIPLE_PANEL_TOP, TRIPLE_PANEL_LEFT, TRIPLE_PANEL_RIGHT, TRIPLE_PANEL_HORIZONTAL, USERDEFINED, NOTDEFINED]
  ParameterTakesPrecedence = null; // TYPE IfcBoolean = BOOLEAN
  Sizeable = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcWindowStyle, schema);

class IfcSIUnit extends IfcNamedUnit
{
  Prefix = null; // TYPE IfcSIPrefix = ENUMERATION OF [EXA, PETA, TERA, GIGA, MEGA, KILO, HECTO, DECA, DECI, CENTI, MILLI, MICRO, NANO, PICO, FEMTO, ATTO]
  Name = null; // TYPE IfcSIUnitName = ENUMERATION OF [AMPERE, BECQUEREL, CANDELA, COULOMB, CUBIC_METRE, DEGREE_CELSIUS, FARAD, GRAM, GRAY, HENRY, HERTZ, JOULE, KELVIN, LUMEN, LUX, METRE, MOLE, NEWTON, OHM, PASCAL, RADIAN, SECOND, SIEMENS, SIEVERT, SQUARE_METRE, STERADIAN, TESLA, VOLT, WATT, WEBER]
};
registerIfcClass(IfcSIUnit, schema);

class IfcConnectionSurfaceGeometry extends IfcConnectionGeometry
{
  SurfaceOnRelatingElement = null; // TYPE IfcSurfaceOrFaceSurface = SELECT [IfcFaceBasedSurfaceModel, IfcFaceSurface, IfcSurface]
  SurfaceOnRelatedElement = null; // TYPE IfcSurfaceOrFaceSurface = SELECT [IfcFaceBasedSurfaceModel, IfcFaceSurface, IfcSurface]
};
registerIfcClass(IfcConnectionSurfaceGeometry, schema);

class IfcBoxedHalfSpace extends IfcHalfSpaceSolid
{
  Enclosure = null; // ENTITY IfcBoundingBox SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcBoxedHalfSpace, schema);

class IfcCooledBeam extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcCooledBeamTypeEnum = ENUMERATION OF [ACTIVE, PASSIVE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCooledBeam, schema);

class IfcLightSourceGoniometric extends IfcLightSource
{
  Position = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
  ColourAppearance = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
  ColourTemperature = null; // TYPE IfcThermodynamicTemperatureMeasure = REAL
  LuminousFlux = null; // TYPE IfcLuminousFluxMeasure = REAL
  LightEmissionSource = null; // TYPE IfcLightEmissionSourceEnum = ENUMERATION OF [COMPACTFLUORESCENT, FLUORESCENT, HIGHPRESSUREMERCURY, HIGHPRESSURESODIUM, LIGHTEMITTINGDIODE, LOWPRESSURESODIUM, LOWVOLTAGEHALOGEN, MAINVOLTAGEHALOGEN, METALHALIDE, TUNGSTENFILAMENT, NOTDEFINED]
  LightDistributionDataSource = null; // TYPE IfcLightDistributionDataSourceSelect = SELECT [IfcExternalReference, IfcLightIntensityDistribution]
};
registerIfcClass(IfcLightSourceGoniometric, schema);

class IfcCylindricalSurface extends IfcElementarySurface
{
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcCylindricalSurface, schema);

class IfcApplication extends SchemaBase
{
  ApplicationDeveloper = null; // ENTITY IfcOrganization
  Version = null; // TYPE IfcLabel = STRING
  ApplicationFullName = null; // TYPE IfcLabel = STRING
  ApplicationIdentifier = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcApplication, schema);

class IfcFlowMeter extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcFlowMeterTypeEnum = ENUMERATION OF [ENERGYMETER, GASMETER, OILMETER, WATERMETER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFlowMeter, schema);

class IfcRectangleHollowProfileDef extends IfcRectangleProfileDef
{
  WallThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  InnerFilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  OuterFilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcRectangleHollowProfileDef, schema);

class IfcEdgeCurve extends IfcEdge
{
  EdgeGeometry = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  SameSense = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcEdgeCurve, schema);

class IfcElementAssemblyType extends IfcElementType
{
  PredefinedType = null; // TYPE IfcElementAssemblyTypeEnum = ENUMERATION OF [ACCESSORY_ASSEMBLY, ARCH, BEAM_GRID, BRACED_FRAME, GIRDER, REINFORCEMENT_UNIT, RIGID_FRAME, SLAB_FIELD, TRUSS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElementAssemblyType, schema);

class IfcSwitchingDeviceType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcSwitchingDeviceTypeEnum = ENUMERATION OF [CONTACTOR, DIMMERSWITCH, EMERGENCYSTOP, KEYPAD, MOMENTARYSWITCH, SELECTORSWITCH, STARTER, SWITCHDISCONNECTOR, TOGGLESWITCH, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSwitchingDeviceType, schema);

class IfcSurfaceCurveSweptAreaSolid extends IfcSweptAreaSolid
{
  Directrix = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  StartParam = null; // TYPE IfcParameterValue = REAL
  EndParam = null; // TYPE IfcParameterValue = REAL
  ReferenceSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcSurfaceCurveSweptAreaSolid, schema);

class IfcRelAssociatesMaterial extends IfcRelAssociates
{
  RelatingMaterial = null; // TYPE IfcMaterialSelect = SELECT [IfcMaterialDefinition, IfcMaterialList, IfcMaterialUsageDefinition]
};
registerIfcClass(IfcRelAssociatesMaterial, schema);

class IfcFillAreaStyleHatching extends IfcGeometricRepresentationItem
{
  HatchLineAppearance = null; // ENTITY IfcCurveStyle SUBTYPE OF IfcPresentationStyle
  StartOfNextHatchLine = null; // TYPE IfcHatchLineDistanceSelect = SELECT [IfcPositiveLengthMeasure, IfcVector]
  PointOfReferenceHatchLine = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
  PatternStart = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
  HatchLineAngle = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcFillAreaStyleHatching, schema);

class IfcMaterialLayerWithOffsets extends IfcMaterialLayer
{
  OffsetDirection = null; // TYPE IfcLayerSetDirectionEnum = ENUMERATION OF [AXIS1, AXIS2, AXIS3]
  OffsetValues = null; // ARRAY[1:2] OF IfcLengthMeasure
};
registerIfcClass(IfcMaterialLayerWithOffsets, schema);

class IfcPlane extends IfcElementarySurface
{
};
registerIfcClass(IfcPlane, schema);

class IfcProtectiveDevice extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcProtectiveDeviceTypeEnum = ENUMERATION OF [CIRCUITBREAKER, EARTHLEAKAGECIRCUITBREAKER, EARTHINGSWITCH, FUSEDISCONNECTOR, RESIDUALCURRENTCIRCUITBREAKER, RESIDUALCURRENTSWITCH, VARISTOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProtectiveDevice, schema);

class IfcMotorConnectionType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcMotorConnectionTypeEnum = ENUMERATION OF [BELTDRIVE, COUPLING, DIRECTDRIVE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMotorConnectionType, schema);

class IfcDerivedUnit extends SchemaBase
{
  Elements = null; // SET[1:0] OF IfcDerivedUnitElement
  UnitType = null; // TYPE IfcDerivedUnitEnum = ENUMERATION OF [ANGULARVELOCITYUNIT, AREADENSITYUNIT, COMPOUNDPLANEANGLEUNIT, DYNAMICVISCOSITYUNIT, HEATFLUXDENSITYUNIT, INTEGERCOUNTRATEUNIT, ISOTHERMALMOISTURECAPACITYUNIT, KINEMATICVISCOSITYUNIT, LINEARVELOCITYUNIT, MASSDENSITYUNIT, MASSFLOWRATEUNIT, MOISTUREDIFFUSIVITYUNIT, MOLECULARWEIGHTUNIT, SPECIFICHEATCAPACITYUNIT, THERMALADMITTANCEUNIT, THERMALCONDUCTANCEUNIT, THERMALRESISTANCEUNIT, THERMALTRANSMITTANCEUNIT, VAPORPERMEABILITYUNIT, VOLUMETRICFLOWRATEUNIT, ROTATIONALFREQUENCYUNIT, TORQUEUNIT, MOMENTOFINERTIAUNIT, LINEARMOMENTUNIT, LINEARFORCEUNIT, PLANARFORCEUNIT, MODULUSOFELASTICITYUNIT, SHEARMODULUSUNIT, LINEARSTIFFNESSUNIT, ROTATIONALSTIFFNESSUNIT, MODULUSOFSUBGRADEREACTIONUNIT, ACCELERATIONUNIT, CURVATUREUNIT, HEATINGVALUEUNIT, IONCONCENTRATIONUNIT, LUMINOUSINTENSITYDISTRIBUTIONUNIT, MASSPERLENGTHUNIT, MODULUSOFLINEARSUBGRADEREACTIONUNIT, MODULUSOFROTATIONALSUBGRADEREACTIONUNIT, PHUNIT, ROTATIONALMASSUNIT, SECTIONAREAINTEGRALUNIT, SECTIONMODULUSUNIT, SOUNDPOWERLEVELUNIT, SOUNDPOWERUNIT, SOUNDPRESSURELEVELUNIT, SOUNDPRESSUREUNIT, TEMPERATUREGRADIENTUNIT, TEMPERATURERATEOFCHANGEUNIT, THERMALEXPANSIONCOEFFICIENTUNIT, WARPINGCONSTANTUNIT, WARPINGMOMENTUNIT, USERDEFINED]
  UserDefinedType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcDerivedUnit, schema);

class IfcMaterial extends IfcMaterialDefinition
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Category = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcMaterial, schema);

class IfcProxy extends IfcProduct
{
  ProxyType = null; // TYPE IfcObjectTypeEnum = ENUMERATION OF [PRODUCT, PROCESS, CONTROL, RESOURCE, ACTOR, GROUP, PROJECT, NOTDEFINED]
  Tag = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcProxy, schema);

class IfcActionRequest extends IfcControl
{
  PredefinedType = null; // TYPE IfcActionRequestTypeEnum = ENUMERATION OF [EMAIL, FAX, PHONE, POST, VERBAL, USERDEFINED, NOTDEFINED]
  Status = null; // TYPE IfcLabel = STRING
  LongDescription = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcActionRequest, schema);

class IfcDraughtingPreDefinedColour extends IfcPreDefinedColour
{
};
registerIfcClass(IfcDraughtingPreDefinedColour, schema);

class IfcPlateType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcPlateTypeEnum = ENUMERATION OF [CURTAIN_PANEL, SHEET, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPlateType, schema);

class IfcStructuralAnalysisModel extends IfcSystem
{
  PredefinedType = null; // TYPE IfcAnalysisModelTypeEnum = ENUMERATION OF [IN_PLANE_LOADING_2D, OUT_PLANE_LOADING_2D, LOADING_3D, USERDEFINED, NOTDEFINED]
  OrientationOf2DPlane = null; // ENTITY IfcAxis2Placement3D SUBTYPE OF IfcPlacement
  LoadedBy = null; // SET[1:0] OF IfcStructuralLoadGroup
  HasResults = null; // SET[1:0] OF IfcStructuralResultGroup
  SharedPlacement = null; // ENTITY IfcObjectPlacement
};
registerIfcClass(IfcStructuralAnalysisModel, schema);

class IfcStructuralLinearAction extends IfcStructuralCurveAction
{
};
registerIfcClass(IfcStructuralLinearAction, schema);

class IfcQuantityVolume extends IfcPhysicalSimpleQuantity
{
  VolumeValue = null; // TYPE IfcVolumeMeasure = REAL
  Formula = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcQuantityVolume, schema);

class IfcIndexedTriangleTextureMap extends IfcIndexedTextureMap
{
  TexCoordIndex = null; // LIST[1:0] OF LIST[3:3] OF IfcPositiveInteger
};
registerIfcClass(IfcIndexedTriangleTextureMap, schema);

class IfcPerson extends SchemaBase
{
  Identification = null; // TYPE IfcIdentifier = STRING
  FamilyName = null; // TYPE IfcLabel = STRING
  GivenName = null; // TYPE IfcLabel = STRING
  MiddleNames = null; // LIST[1:0] OF IfcLabel
  PrefixTitles = null; // LIST[1:0] OF IfcLabel
  SuffixTitles = null; // LIST[1:0] OF IfcLabel
  Roles = null; // LIST[1:0] OF IfcActorRole
  Addresses = null; // LIST[1:0] OF IfcAddress
};
registerIfcClass(IfcPerson, schema);

class IfcIndexedPolyCurve extends IfcBoundedCurve
{
  Points = null; // ENTITY IfcCartesianPointList SUBTYPE OF IfcGeometricRepresentationItem
  Segments = null; // LIST[1:0] OF IfcSegmentIndexSelect
  SelfIntersect = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcIndexedPolyCurve, schema);

class IfcPipeSegment extends IfcFlowSegment
{
  PredefinedType = null; // TYPE IfcPipeSegmentTypeEnum = ENUMERATION OF [CULVERT, FLEXIBLESEGMENT, RIGIDSEGMENT, GUTTER, SPOOL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPipeSegment, schema);

class IfcConnectionPointEccentricity extends IfcConnectionPointGeometry
{
  EccentricityInX = null; // TYPE IfcLengthMeasure = REAL
  EccentricityInY = null; // TYPE IfcLengthMeasure = REAL
  EccentricityInZ = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcConnectionPointEccentricity, schema);

class IfcFlowStorageDeviceType extends IfcDistributionFlowElementType
{
};
registerIfcClass(IfcFlowStorageDeviceType, schema);

class IfcElectricFlowStorageDeviceType extends IfcFlowStorageDeviceType
{
  PredefinedType = null; // TYPE IfcElectricFlowStorageDeviceTypeEnum = ENUMERATION OF [BATTERY, CAPACITORBANK, HARMONICFILTER, INDUCTORBANK, UPS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricFlowStorageDeviceType, schema);

class IfcComplexProperty extends IfcProperty
{
  UsageName = null; // TYPE IfcIdentifier = STRING
  HasProperties = null; // SET[1:0] OF IfcProperty
};
registerIfcClass(IfcComplexProperty, schema);

class IfcRelConnectsWithRealizingElements extends IfcRelConnectsElements
{
  RealizingElements = null; // SET[1:0] OF IfcElement
  ConnectionType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcRelConnectsWithRealizingElements, schema);

class IfcAlarmType extends IfcDistributionControlElementType
{
  PredefinedType = null; // TYPE IfcAlarmTypeEnum = ENUMERATION OF [BELL, BREAKGLASSBUTTON, LIGHT, MANUALPULLBOX, SIREN, WHISTLE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAlarmType, schema);

class IfcFaceOuterBound extends IfcFaceBound
{
};
registerIfcClass(IfcFaceOuterBound, schema);

class IfcSurfaceStyleShading extends IfcPresentationItem
{
  SurfaceColour = null; // ENTITY IfcColourRgb SUBTYPE OF IfcColourSpecification
  Transparency = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcSurfaceStyleShading, schema);

class IfcSurfaceStyleRendering extends IfcSurfaceStyleShading
{
  DiffuseColour = null; // TYPE IfcColourOrFactor = SELECT [IfcColourRgb, IfcNormalisedRatioMeasure]
  TransmissionColour = null; // TYPE IfcColourOrFactor = SELECT [IfcColourRgb, IfcNormalisedRatioMeasure]
  DiffuseTransmissionColour = null; // TYPE IfcColourOrFactor = SELECT [IfcColourRgb, IfcNormalisedRatioMeasure]
  ReflectionColour = null; // TYPE IfcColourOrFactor = SELECT [IfcColourRgb, IfcNormalisedRatioMeasure]
  SpecularColour = null; // TYPE IfcColourOrFactor = SELECT [IfcColourRgb, IfcNormalisedRatioMeasure]
  SpecularHighlight = null; // TYPE IfcSpecularHighlightSelect = SELECT [IfcSpecularExponent, IfcSpecularRoughness]
  ReflectanceMethod = null; // TYPE IfcReflectanceMethodEnum = ENUMERATION OF [BLINN, FLAT, GLASS, MATT, METAL, MIRROR, PHONG, PLASTIC, STRAUSS, NOTDEFINED]
};
registerIfcClass(IfcSurfaceStyleRendering, schema);

class IfcContextDependentUnit extends IfcNamedUnit
{
  Name = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcContextDependentUnit, schema);

class IfcAirTerminalType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcAirTerminalTypeEnum = ENUMERATION OF [DIFFUSER, GRILLE, LOUVRE, REGISTER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAirTerminalType, schema);

class IfcRoundedRectangleProfileDef extends IfcRectangleProfileDef
{
  RoundingRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcRoundedRectangleProfileDef, schema);

class IfcCurtainWallType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcCurtainWallTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCurtainWallType, schema);

class IfcElementQuantity extends IfcQuantitySet
{
  MethodOfMeasurement = null; // TYPE IfcLabel = STRING
  Quantities = null; // SET[1:0] OF IfcPhysicalQuantity
};
registerIfcClass(IfcElementQuantity, schema);

class IfcMaterialList extends SchemaBase
{
  Materials = null; // LIST[1:0] OF IfcMaterial
};
registerIfcClass(IfcMaterialList, schema);

class IfcRegularTimeSeries extends IfcTimeSeries
{
  TimeStep = null; // TYPE IfcTimeMeasure = REAL
  Values = null; // LIST[1:0] OF IfcTimeSeriesValue
};
registerIfcClass(IfcRegularTimeSeries, schema);

class IfcOrganizationRelationship extends IfcResourceLevelRelationship
{
  RelatingOrganization = null; // ENTITY IfcOrganization
  RelatedOrganizations = null; // SET[1:0] OF IfcOrganization
};
registerIfcClass(IfcOrganizationRelationship, schema);

class IfcCrewResource extends IfcConstructionResource
{
  PredefinedType = null; // TYPE IfcCrewResourceTypeEnum = ENUMERATION OF [OFFICE, SITE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCrewResource, schema);

class IfcDerivedUnitElement extends SchemaBase
{
  Unit = null; // ENTITY IfcNamedUnit
  Exponent = null; // INTEGER
};
registerIfcClass(IfcDerivedUnitElement, schema);

class IfcUShapeProfileDef extends IfcParameterizedProfileDef
{
  Depth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  EdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcUShapeProfileDef, schema);

class IfcRelSpaceBoundary1stLevel extends IfcRelSpaceBoundary
{
  ParentBoundary = null; // ENTITY IfcRelSpaceBoundary1stLevel SUBTYPE OF IfcRelSpaceBoundary
};
registerIfcClass(IfcRelSpaceBoundary1stLevel, schema);

class IfcTrimmedCurve extends IfcBoundedCurve
{
  BasisCurve = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  Trim1 = null; // SET[1:2] OF IfcTrimmingSelect
  Trim2 = null; // SET[1:2] OF IfcTrimmingSelect
  SenseAgreement = null; // TYPE IfcBoolean = BOOLEAN
  MasterRepresentation = null; // TYPE IfcTrimmingPreference = ENUMERATION OF [CARTESIAN, PARAMETER, UNSPECIFIED]
};
registerIfcClass(IfcTrimmedCurve, schema);

class IfcVibrationIsolator extends IfcElementComponent
{
  PredefinedType = null; // TYPE IfcVibrationIsolatorTypeEnum = ENUMERATION OF [COMPRESSION, SPRING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcVibrationIsolator, schema);

class IfcProcedureType extends IfcTypeProcess
{
  PredefinedType = null; // TYPE IfcProcedureTypeEnum = ENUMERATION OF [ADVICE_CAUTION, ADVICE_NOTE, ADVICE_WARNING, CALIBRATION, DIAGNOSTIC, SHUTDOWN, STARTUP, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProcedureType, schema);

class IfcCoil extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcCoilTypeEnum = ENUMERATION OF [DXCOOLINGCOIL, ELECTRICHEATINGCOIL, GASHEATINGCOIL, HYDRONICCOIL, STEAMHEATINGCOIL, WATERCOOLINGCOIL, WATERHEATINGCOIL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCoil, schema);

class IfcClassificationReference extends IfcExternalReference
{
  ReferencedSource = null; // TYPE IfcClassificationReferenceSelect = SELECT [IfcClassification, IfcClassificationReference]
  Description = null; // TYPE IfcText = STRING
  Sort = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcClassificationReference, schema);

class IfcPump extends IfcFlowMovingDevice
{
  PredefinedType = null; // TYPE IfcPumpTypeEnum = ENUMERATION OF [CIRCULATOR, ENDSUCTION, SPLITCASE, SUBMERSIBLEPUMP, SUMPPUMP, VERTICALINLINE, VERTICALTURBINE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPump, schema);

class IfcAirTerminalBox extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcAirTerminalBoxTypeEnum = ENUMERATION OF [CONSTANTFLOW, VARIABLEFLOWPRESSUREDEPENDANT, VARIABLEFLOWPRESSUREINDEPENDANT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAirTerminalBox, schema);

class IfcGeometricRepresentationSubContext extends IfcGeometricRepresentationContext
{
  ParentContext = null; // ENTITY IfcGeometricRepresentationContext SUBTYPE OF IfcRepresentationContext
  TargetScale = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
  TargetView = null; // TYPE IfcGeometricProjectionEnum = ENUMERATION OF [GRAPH_VIEW, SKETCH_VIEW, MODEL_VIEW, PLAN_VIEW, REFLECTED_PLAN_VIEW, SECTION_VIEW, ELEVATION_VIEW, USERDEFINED, NOTDEFINED]
  UserDefinedTargetView = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcGeometricRepresentationSubContext, schema);

class IfcMemberType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcMemberTypeEnum = ENUMERATION OF [BRACE, CHORD, COLLAR, MEMBER, MULLION, PLATE, POST, PURLIN, RAFTER, STRINGER, STRUT, STUD, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMemberType, schema);

class IfcStructuralSurfaceReaction extends IfcStructuralReaction
{
  PredefinedType = null; // TYPE IfcStructuralSurfaceActivityTypeEnum = ENUMERATION OF [CONST, BILINEAR, DISCRETE, ISOCONTOUR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStructuralSurfaceReaction, schema);

class IfcFooting extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcFootingTypeEnum = ENUMERATION OF [CAISSON_FOUNDATION, FOOTING_BEAM, PAD_FOOTING, PILE_CAP, STRIP_FOOTING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFooting, schema);

class IfcProtectiveDeviceType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcProtectiveDeviceTypeEnum = ENUMERATION OF [CIRCUITBREAKER, EARTHLEAKAGECIRCUITBREAKER, EARTHINGSWITCH, FUSEDISCONNECTOR, RESIDUALCURRENTCIRCUITBREAKER, RESIDUALCURRENTSWITCH, VARISTOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcProtectiveDeviceType, schema);

class IfcFan extends IfcFlowMovingDevice
{
  PredefinedType = null; // TYPE IfcFanTypeEnum = ENUMERATION OF [CENTRIFUGALFORWARDCURVED, CENTRIFUGALRADIAL, CENTRIFUGALBACKWARDINCLINEDCURVED, CENTRIFUGALAIRFOIL, TUBEAXIAL, VANEAXIAL, PROPELLORAXIAL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFan, schema);

class IfcUnitaryEquipment extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcUnitaryEquipmentTypeEnum = ENUMERATION OF [AIRHANDLER, AIRCONDITIONINGUNIT, DEHUMIDIFIER, SPLITSYSTEM, ROOFTOPUNIT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcUnitaryEquipment, schema);

class IfcSensor extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcSensorTypeEnum = ENUMERATION OF [COSENSOR, CO2SENSOR, CONDUCTANCESENSOR, CONTACTSENSOR, FIRESENSOR, FLOWSENSOR, FROSTSENSOR, GASSENSOR, HEATSENSOR, HUMIDITYSENSOR, IDENTIFIERSENSOR, IONCONCENTRATIONSENSOR, LEVELSENSOR, LIGHTSENSOR, MOISTURESENSOR, MOVEMENTSENSOR, PHSENSOR, PRESSURESENSOR, RADIATIONSENSOR, RADIOACTIVITYSENSOR, SMOKESENSOR, SOUNDSENSOR, TEMPERATURESENSOR, WINDSENSOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSensor, schema);

class IfcElementAssembly extends IfcElement
{
  AssemblyPlace = null; // TYPE IfcAssemblyPlaceEnum = ENUMERATION OF [SITE, FACTORY, NOTDEFINED]
  PredefinedType = null; // TYPE IfcElementAssemblyTypeEnum = ENUMERATION OF [ACCESSORY_ASSEMBLY, ARCH, BEAM_GRID, BRACED_FRAME, GIRDER, REINFORCEMENT_UNIT, RIGID_FRAME, SLAB_FIELD, TRUSS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElementAssembly, schema);

class IfcStructuralResultGroup extends IfcGroup
{
  TheoryType = null; // TYPE IfcAnalysisTheoryTypeEnum = ENUMERATION OF [FIRST_ORDER_THEORY, SECOND_ORDER_THEORY, THIRD_ORDER_THEORY, FULL_NONLINEAR_THEORY, USERDEFINED, NOTDEFINED]
  ResultForLoadGroup = null; // ENTITY IfcStructuralLoadGroup SUBTYPE OF IfcGroup
  IsLinear = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcStructuralResultGroup, schema);

class IfcStairType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcStairTypeEnum = ENUMERATION OF [STRAIGHT_RUN_STAIR, TWO_STRAIGHT_RUN_STAIR, QUARTER_WINDING_STAIR, QUARTER_TURN_STAIR, HALF_WINDING_STAIR, HALF_TURN_STAIR, TWO_QUARTER_WINDING_STAIR, TWO_QUARTER_TURN_STAIR, THREE_QUARTER_WINDING_STAIR, THREE_QUARTER_TURN_STAIR, SPIRAL_STAIR, DOUBLE_RETURN_STAIR, CURVED_RUN_STAIR, TWO_CURVED_RUN_STAIR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcStairType, schema);

class IfcAudioVisualAppliance extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcAudioVisualApplianceTypeEnum = ENUMERATION OF [AMPLIFIER, CAMERA, DISPLAY, MICROPHONE, PLAYER, PROJECTOR, RECEIVER, SPEAKER, SWITCHER, TELEPHONE, TUNER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAudioVisualAppliance, schema);

class IfcReinforcementBarProperties extends IfcPreDefinedProperties
{
  TotalCrossSectionArea = null; // TYPE IfcAreaMeasure = REAL
  SteelGrade = null; // TYPE IfcLabel = STRING
  BarSurface = null; // TYPE IfcReinforcingBarSurfaceEnum = ENUMERATION OF [PLAIN, TEXTURED]
  EffectiveDepth = null; // TYPE IfcLengthMeasure = REAL
  NominalBarDiameter = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  BarCount = null; // TYPE IfcCountMeasure = NUMBER
};
registerIfcClass(IfcReinforcementBarProperties, schema);

class IfcActor extends IfcObject
{
  TheActor = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
};
registerIfcClass(IfcActor, schema);

class IfcMotorConnection extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcMotorConnectionTypeEnum = ENUMERATION OF [BELTDRIVE, COUPLING, DIRECTDRIVE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcMotorConnection, schema);

class IfcTankType extends IfcFlowStorageDeviceType
{
  PredefinedType = null; // TYPE IfcTankTypeEnum = ENUMERATION OF [BASIN, BREAKPRESSURE, EXPANSION, FEEDANDEXPANSION, PRESSUREVESSEL, STORAGE, VESSEL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcTankType, schema);

class IfcEvent extends IfcProcess
{
  PredefinedType = null; // TYPE IfcEventTypeEnum = ENUMERATION OF [STARTEVENT, ENDEVENT, INTERMEDIATEEVENT, USERDEFINED, NOTDEFINED]
  EventTriggerType = null; // TYPE IfcEventTriggerTypeEnum = ENUMERATION OF [EVENTRULE, EVENTMESSAGE, EVENTTIME, EVENTCOMPLEX, USERDEFINED, NOTDEFINED]
  UserDefinedEventTriggerType = null; // TYPE IfcLabel = STRING
  EventOccurenceTime = null; // ENTITY IfcEventTime SUBTYPE OF IfcSchedulingTime
};
registerIfcClass(IfcEvent, schema);

class IfcPropertySet extends IfcPropertySetDefinition
{
  HasProperties = null; // SET[1:0] OF IfcProperty
};
registerIfcClass(IfcPropertySet, schema);

class IfcCableSegmentType extends IfcFlowSegmentType
{
  PredefinedType = null; // TYPE IfcCableSegmentTypeEnum = ENUMERATION OF [BUSBARSEGMENT, CABLESEGMENT, CONDUCTORSEGMENT, CORESEGMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCableSegmentType, schema);

class IfcBuildingSystem extends IfcSystem
{
  PredefinedType = null; // TYPE IfcBuildingSystemTypeEnum = ENUMERATION OF [FENESTRATION, FOUNDATION, LOADBEARING, OUTERSHELL, SHADING, TRANSPORT, USERDEFINED, NOTDEFINED]
  LongName = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcBuildingSystem, schema);

class IfcAirToAirHeatRecoveryType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF [FIXEDPLATECOUNTERFLOWEXCHANGER, FIXEDPLATECROSSFLOWEXCHANGER, FIXEDPLATEPARALLELFLOWEXCHANGER, ROTARYWHEEL, RUNAROUNDCOILLOOP, HEATPIPE, TWINTOWERENTHALPYRECOVERYLOOPS, THERMOSIPHONSEALEDTUBEHEATEXCHANGERS, THERMOSIPHONCOILTYPEHEATEXCHANGERS, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAirToAirHeatRecoveryType, schema);

class IfcShellBasedSurfaceModel extends IfcGeometricRepresentationItem
{
  SbsmBoundary = null; // SET[1:0] OF IfcShell
};
registerIfcClass(IfcShellBasedSurfaceModel, schema);

class IfcSimplePropertyTemplate extends IfcPropertyTemplate
{
  TemplateType = null; // TYPE IfcSimplePropertyTemplateTypeEnum = ENUMERATION OF [P_SINGLEVALUE, P_ENUMERATEDVALUE, P_BOUNDEDVALUE, P_LISTVALUE, P_TABLEVALUE, P_REFERENCEVALUE, Q_LENGTH, Q_AREA, Q_VOLUME, Q_COUNT, Q_WEIGHT, Q_TIME]
  PrimaryMeasureType = null; // TYPE IfcLabel = STRING
  SecondaryMeasureType = null; // TYPE IfcLabel = STRING
  Enumerators = null; // ENTITY IfcPropertyEnumeration SUBTYPE OF IfcPropertyAbstraction
  PrimaryUnit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
  SecondaryUnit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
  Expression = null; // TYPE IfcLabel = STRING
  AccessState = null; // TYPE IfcStateEnum = ENUMERATION OF [READWRITE, READONLY, LOCKED, READWRITELOCKED, READONLYLOCKED]
};
registerIfcClass(IfcSimplePropertyTemplate, schema);

class IfcDuctSegmentType extends IfcFlowSegmentType
{
  PredefinedType = null; // TYPE IfcDuctSegmentTypeEnum = ENUMERATION OF [RIGIDSEGMENT, FLEXIBLESEGMENT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcDuctSegmentType, schema);

class IfcHumidifier extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcHumidifierTypeEnum = ENUMERATION OF [STEAMINJECTION, ADIABATICAIRWASHER, ADIABATICPAN, ADIABATICWETTEDELEMENT, ADIABATICATOMIZING, ADIABATICULTRASONIC, ADIABATICRIGIDMEDIA, ADIABATICCOMPRESSEDAIRNOZZLE, ASSISTEDELECTRIC, ASSISTEDNATURALGAS, ASSISTEDPROPANE, ASSISTEDBUTANE, ASSISTEDSTEAM, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcHumidifier, schema);

class IfcCrewResourceType extends IfcConstructionResourceType
{
  PredefinedType = null; // TYPE IfcCrewResourceTypeEnum = ENUMERATION OF [OFFICE, SITE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcCrewResourceType, schema);

class IfcAlarm extends IfcDistributionControlElement
{
  PredefinedType = null; // TYPE IfcAlarmTypeEnum = ENUMERATION OF [BELL, BREAKGLASSBUTTON, LIGHT, MANUALPULLBOX, SIREN, WHISTLE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAlarm, schema);

class IfcCoordinateOperation extends SchemaBase
{
  SourceCRS = null; // TYPE IfcCoordinateReferenceSystemSelect = SELECT [IfcCoordinateReferenceSystem, IfcGeometricRepresentationContext]
  TargetCRS = null; // ENTITY IfcCoordinateReferenceSystem
};
registerIfcClass(IfcCoordinateOperation, schema);

class IfcMapConversion extends IfcCoordinateOperation
{
  Eastings = null; // TYPE IfcLengthMeasure = REAL
  Northings = null; // TYPE IfcLengthMeasure = REAL
  OrthogonalHeight = null; // TYPE IfcLengthMeasure = REAL
  XAxisAbscissa = null; // TYPE IfcReal = REAL
  XAxisOrdinate = null; // TYPE IfcReal = REAL
  Scale = null; // TYPE IfcReal = REAL
};
registerIfcClass(IfcMapConversion, schema);

class IfcDoorPanelProperties extends IfcPreDefinedPropertySet
{
  PanelDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  PanelOperation = null; // TYPE IfcDoorPanelOperationEnum = ENUMERATION OF [SWINGING, DOUBLE_ACTING, SLIDING, FOLDING, REVOLVING, ROLLINGUP, FIXEDPANEL, USERDEFINED, NOTDEFINED]
  PanelWidth = null; // TYPE IfcNormalisedRatioMeasure = TYPE IfcRatioMeasure = REAL
  PanelPosition = null; // TYPE IfcDoorPanelPositionEnum = ENUMERATION OF [LEFT, MIDDLE, RIGHT, NOTDEFINED]
  ShapeAspectStyle = null; // ENTITY IfcShapeAspect
};
registerIfcClass(IfcDoorPanelProperties, schema);

class IfcPipeFitting extends IfcFlowFitting
{
  PredefinedType = null; // TYPE IfcPipeFittingTypeEnum = ENUMERATION OF [BEND, CONNECTOR, ENTRY, EXIT, JUNCTION, OBSTRUCTION, TRANSITION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcPipeFitting, schema);

class IfcValve extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcValveTypeEnum = ENUMERATION OF [AIRRELEASE, ANTIVACUUM, CHANGEOVER, CHECK, COMMISSIONING, DIVERTING, DRAWOFFCOCK, DOUBLECHECK, DOUBLEREGULATING, FAUCET, FLUSHING, GASCOCK, GASTAP, ISOLATING, MIXING, PRESSUREREDUCING, PRESSURERELIEF, REGULATING, SAFETYCUTOFF, STEAMTRAP, STOPCOCK, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcValve, schema);

class IfcEllipseProfileDef extends IfcParameterizedProfileDef
{
  SemiAxis1 = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  SemiAxis2 = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcEllipseProfileDef, schema);

class IfcCurveStyleFont extends IfcPresentationItem
{
  Name = null; // TYPE IfcLabel = STRING
  PatternList = null; // LIST[1:0] OF IfcCurveStyleFontPattern
};
registerIfcClass(IfcCurveStyleFont, schema);

class IfcCurveBoundedSurface extends IfcBoundedSurface
{
  BasisSurface = null; // ENTITY IfcSurface SUBTYPE OF IfcGeometricRepresentationItem
  Boundaries = null; // SET[1:0] OF IfcBoundaryCurve
  ImplicitOuter = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcCurveBoundedSurface, schema);

class IfcElectricDistributionBoard extends IfcFlowController
{
  PredefinedType = null; // TYPE IfcElectricDistributionBoardTypeEnum = ENUMERATION OF [CONSUMERUNIT, DISTRIBUTIONBOARD, MOTORCONTROLCENTRE, SWITCHBOARD, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricDistributionBoard, schema);

class IfcRelAssociatesLibrary extends IfcRelAssociates
{
  RelatingLibrary = null; // TYPE IfcLibrarySelect = SELECT [IfcLibraryInformation, IfcLibraryReference]
};
registerIfcClass(IfcRelAssociatesLibrary, schema);

class IfcApprovalRelationship extends IfcResourceLevelRelationship
{
  RelatingApproval = null; // ENTITY IfcApproval
  RelatedApprovals = null; // SET[1:0] OF IfcApproval
};
registerIfcClass(IfcApprovalRelationship, schema);

class IfcIntersectionCurve extends IfcSurfaceCurve
{
};
registerIfcClass(IfcIntersectionCurve, schema);

class IfcFilter extends IfcFlowTreatmentDevice
{
  PredefinedType = null; // TYPE IfcFilterTypeEnum = ENUMERATION OF [AIRPARTICLEFILTER, COMPRESSEDAIRFILTER, ODORFILTER, OILFILTER, STRAINER, WATERFILTER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcFilter, schema);

class IfcLine extends IfcCurve
{
  Pnt = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
  Dir = null; // ENTITY IfcVector SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcLine, schema);

class IfcEngineType extends IfcEnergyConversionDeviceType
{
  PredefinedType = null; // TYPE IfcEngineTypeEnum = ENUMERATION OF [EXTERNALCOMBUSTION, INTERNALCOMBUSTION, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcEngineType, schema);

class IfcShapeAspect extends SchemaBase
{
  ShapeRepresentations = null; // LIST[1:0] OF IfcShapeModel
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  ProductDefinitional = null; // TYPE IfcLogical = LOGICAL
  PartOfProductDefinitionShape = null; // TYPE IfcProductRepresentationSelect = SELECT [IfcProductDefinitionShape, IfcRepresentationMap]
};
registerIfcClass(IfcShapeAspect, schema);

class IfcSweptDiskSolid extends IfcSolidModel
{
  Directrix = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  Radius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  InnerRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  StartParam = null; // TYPE IfcParameterValue = REAL
  EndParam = null; // TYPE IfcParameterValue = REAL
};
registerIfcClass(IfcSweptDiskSolid, schema);

class IfcSweptDiskSolidPolygonal extends IfcSweptDiskSolid
{
  FilletRadius = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcSweptDiskSolidPolygonal, schema);

class IfcTextureMap extends IfcTextureCoordinate
{
  Vertices = null; // LIST[3:0] OF IfcTextureVertex
  MappedTo = null; // ENTITY IfcFace SUBTYPE OF IfcTopologicalRepresentationItem
};
registerIfcClass(IfcTextureMap, schema);

class IfcRationalBSplineSurfaceWithKnots extends IfcBSplineSurfaceWithKnots
{
  WeightsData = null; // LIST[2:0] OF LIST[2:0] OF IfcReal
};
registerIfcClass(IfcRationalBSplineSurfaceWithKnots, schema);

class IfcRelProjectsElement extends IfcRelDecomposes
{
  RelatingElement = null; // ENTITY IfcElement SUBTYPE OF IfcProduct
  RelatedFeatureElement = null; // ENTITY IfcFeatureElementAddition SUBTYPE OF IfcFeatureElement
};
registerIfcClass(IfcRelProjectsElement, schema);

class IfcAudioVisualApplianceType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcAudioVisualApplianceTypeEnum = ENUMERATION OF [AMPLIFIER, CAMERA, DISPLAY, MICROPHONE, PLAYER, PROJECTOR, RECEIVER, SPEAKER, SWITCHER, TELEPHONE, TUNER, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcAudioVisualApplianceType, schema);

class IfcRampFlight extends IfcBuildingElement
{
  PredefinedType = null; // TYPE IfcRampFlightTypeEnum = ENUMERATION OF [STRAIGHT, SPIRAL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcRampFlight, schema);

class IfcBuildingStorey extends IfcSpatialStructureElement
{
  Elevation = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcBuildingStorey, schema);

class IfcStructuralCurveConnection extends IfcStructuralConnection
{
  Axis = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcStructuralCurveConnection, schema);

class IfcTextLiteralWithExtent extends IfcTextLiteral
{
  Extent = null; // ENTITY IfcPlanarExtent SUBTYPE OF IfcGeometricRepresentationItem
  BoxAlignment = null; // TYPE IfcBoxAlignment = TYPE IfcLabel = STRING
};
registerIfcClass(IfcTextLiteralWithExtent, schema);

class IfcRelCoversSpaces extends IfcRelConnects
{
  RelatingSpace = null; // ENTITY IfcSpace SUBTYPE OF IfcSpatialStructureElement
  RelatedCoverings = null; // SET[1:0] OF IfcCovering
};
registerIfcClass(IfcRelCoversSpaces, schema);

class IfcDirection extends IfcGeometricRepresentationItem
{
  DirectionRatios = null; // LIST[2:3] OF IfcReal
};
registerIfcClass(IfcDirection, schema);

class IfcSpaceHeaterType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcSpaceHeaterTypeEnum = ENUMERATION OF [CONVECTOR, RADIATOR, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcSpaceHeaterType, schema);

class IfcConstructionProductResourceType extends IfcConstructionResourceType
{
  PredefinedType = null; // TYPE IfcConstructionProductResourceTypeEnum = ENUMERATION OF [ASSEMBLY, FORMWORK, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcConstructionProductResourceType, schema);

class IfcLightFixture extends IfcFlowTerminal
{
  PredefinedType = null; // TYPE IfcLightFixtureTypeEnum = ENUMERATION OF [POINTSOURCE, DIRECTIONSOURCE, SECURITYLIGHTING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcLightFixture, schema);

class IfcApproval extends SchemaBase
{
  Identifier = null; // TYPE IfcIdentifier = STRING
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  TimeOfApproval = null; // TYPE IfcDateTime = STRING
  Status = null; // TYPE IfcLabel = STRING
  Level = null; // TYPE IfcLabel = STRING
  Qualifier = null; // TYPE IfcText = STRING
  RequestingApproval = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  GivingApproval = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
};
registerIfcClass(IfcApproval, schema);

class IfcAsymmetricIShapeProfileDef extends IfcParameterizedProfileDef
{
  BottomFlangeWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  OverallDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  BottomFlangeThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  BottomFlangeFilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  TopFlangeWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TopFlangeThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  TopFlangeFilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  BottomFlangeEdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  BottomFlangeSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
  TopFlangeEdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  TopFlangeSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcAsymmetricIShapeProfileDef, schema);

class IfcChimneyType extends IfcBuildingElementType
{
  PredefinedType = null; // TYPE IfcChimneyTypeEnum = ENUMERATION OF [USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcChimneyType, schema);

class IfcMaterialLayerSet extends IfcMaterialDefinition
{
  MaterialLayers = null; // LIST[1:0] OF IfcMaterialLayer
  LayerSetName = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
};
registerIfcClass(IfcMaterialLayerSet, schema);

class IfcOccupant extends IfcActor
{
  PredefinedType = null; // TYPE IfcOccupantTypeEnum = ENUMERATION OF [ASSIGNEE, ASSIGNOR, LESSEE, LESSOR, LETTINGAGENT, OWNER, TENANT, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcOccupant, schema);

class IfcVibrationIsolatorType extends IfcElementComponentType
{
  PredefinedType = null; // TYPE IfcVibrationIsolatorTypeEnum = ENUMERATION OF [COMPRESSION, SPRING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcVibrationIsolatorType, schema);

class IfcOrientedEdge extends IfcEdge
{
  EdgeElement = null; // ENTITY IfcEdge SUBTYPE OF IfcTopologicalRepresentationItem
  Orientation = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcOrientedEdge, schema);

class IfcHeatExchanger extends IfcEnergyConversionDevice
{
  PredefinedType = null; // TYPE IfcHeatExchangerTypeEnum = ENUMERATION OF [PLATE, SHELLANDTUBE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcHeatExchanger, schema);

class IfcClassification extends IfcExternalInformation
{
  Source = null; // TYPE IfcLabel = STRING
  Edition = null; // TYPE IfcLabel = STRING
  EditionDate = null; // TYPE IfcDate = STRING
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  Location = null; // TYPE IfcURIReference = STRING
  ReferenceTokens = null; // LIST[1:0] OF IfcIdentifier
};
registerIfcClass(IfcClassification, schema);

class IfcBoundingBox extends IfcGeometricRepresentationItem
{
  Corner = null; // ENTITY IfcCartesianPoint SUBTYPE OF IfcPoint
  XDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  YDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  ZDim = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcBoundingBox, schema);

class IfcAnnotationFillArea extends IfcGeometricRepresentationItem
{
  OuterBoundary = null; // ENTITY IfcCurve SUBTYPE OF IfcGeometricRepresentationItem
  InnerBoundaries = null; // SET[1:0] OF IfcCurve
};
registerIfcClass(IfcAnnotationFillArea, schema);

class IfcInterceptorType extends IfcFlowTreatmentDeviceType
{
  PredefinedType = null; // TYPE IfcInterceptorTypeEnum = ENUMERATION OF [CYCLONIC, GREASE, OIL, PETROL, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcInterceptorType, schema);

class IfcAxis1Placement extends IfcPlacement
{
  Axis = null; // ENTITY IfcDirection SUBTYPE OF IfcGeometricRepresentationItem
};
registerIfcClass(IfcAxis1Placement, schema);

class IfcTaskTime extends IfcSchedulingTime
{
  DurationType = null; // TYPE IfcTaskDurationEnum = ENUMERATION OF [ELAPSEDTIME, WORKTIME, NOTDEFINED]
  ScheduleDuration = null; // TYPE IfcDuration = STRING
  ScheduleStart = null; // TYPE IfcDateTime = STRING
  ScheduleFinish = null; // TYPE IfcDateTime = STRING
  EarlyStart = null; // TYPE IfcDateTime = STRING
  EarlyFinish = null; // TYPE IfcDateTime = STRING
  LateStart = null; // TYPE IfcDateTime = STRING
  LateFinish = null; // TYPE IfcDateTime = STRING
  FreeFloat = null; // TYPE IfcDuration = STRING
  TotalFloat = null; // TYPE IfcDuration = STRING
  IsCritical = null; // TYPE IfcBoolean = BOOLEAN
  StatusTime = null; // TYPE IfcDateTime = STRING
  ActualDuration = null; // TYPE IfcDuration = STRING
  ActualStart = null; // TYPE IfcDateTime = STRING
  ActualFinish = null; // TYPE IfcDateTime = STRING
  RemainingTime = null; // TYPE IfcDuration = STRING
  Completion = null; // TYPE IfcPositiveRatioMeasure = TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcTaskTime, schema);

class IfcTaskTimeRecurring extends IfcTaskTime
{
  Recurrence = null; // ENTITY IfcRecurrencePattern
};
registerIfcClass(IfcTaskTimeRecurring, schema);

class IfcVirtualGridIntersection extends SchemaBase
{
  IntersectingAxes = null; // LIST[2:2] OF IfcGridAxis
  OffsetDistances = null; // LIST[2:3] OF IfcLengthMeasure
};
registerIfcClass(IfcVirtualGridIntersection, schema);

class IfcEventType extends IfcTypeProcess
{
  PredefinedType = null; // TYPE IfcEventTypeEnum = ENUMERATION OF [STARTEVENT, ENDEVENT, INTERMEDIATEEVENT, USERDEFINED, NOTDEFINED]
  EventTriggerType = null; // TYPE IfcEventTriggerTypeEnum = ENUMERATION OF [EVENTRULE, EVENTMESSAGE, EVENTTIME, EVENTCOMPLEX, USERDEFINED, NOTDEFINED]
  UserDefinedEventTriggerType = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcEventType, schema);

class IfcConnectionVolumeGeometry extends IfcConnectionGeometry
{
  VolumeOnRelatingElement = null; // TYPE IfcSolidOrShell = SELECT [IfcClosedShell, IfcSolidModel]
  VolumeOnRelatedElement = null; // TYPE IfcSolidOrShell = SELECT [IfcClosedShell, IfcSolidModel]
};
registerIfcClass(IfcConnectionVolumeGeometry, schema);

class IfcConstructionEquipmentResourceType extends IfcConstructionResourceType
{
  PredefinedType = null; // TYPE IfcConstructionEquipmentResourceTypeEnum = ENUMERATION OF [DEMOLISHING, EARTHMOVING, ERECTING, HEATING, LIGHTING, PAVING, PUMPING, TRANSPORTING, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcConstructionEquipmentResourceType, schema);

class IfcRelDefinesByObject extends IfcRelDefines
{
  RelatedObjects = null; // SET[1:0] OF IfcObject
  RelatingObject = null; // ENTITY IfcObject SUBTYPE OF IfcObjectDefinition
};
registerIfcClass(IfcRelDefinesByObject, schema);

class IfcRelConnectsPortToElement extends IfcRelConnects
{
  RelatingPort = null; // ENTITY IfcPort SUBTYPE OF IfcProduct
  RelatedElement = null; // ENTITY IfcDistributionElement SUBTYPE OF IfcElement
};
registerIfcClass(IfcRelConnectsPortToElement, schema);

class IfcIrregularTimeSeriesValue extends SchemaBase
{
  TimeStamp = null; // TYPE IfcDateTime = STRING
  ListValues = null; // LIST[1:0] OF IfcValue
};
registerIfcClass(IfcIrregularTimeSeriesValue, schema);

class IfcMaterialProfileSet extends IfcMaterialDefinition
{
  Name = null; // TYPE IfcLabel = STRING
  Description = null; // TYPE IfcText = STRING
  MaterialProfiles = null; // LIST[1:0] OF IfcMaterialProfile
  CompositeProfile = null; // ENTITY IfcCompositeProfileDef SUBTYPE OF IfcProfileDef
};
registerIfcClass(IfcMaterialProfileSet, schema);

class IfcWallStandardCase extends IfcWall
{
};
registerIfcClass(IfcWallStandardCase, schema);

class IfcPropertyListValue extends IfcSimpleProperty
{
  ListValues = null; // LIST[1:0] OF IfcValue
  Unit = null; // TYPE IfcUnit = SELECT [IfcDerivedUnit, IfcMonetaryUnit, IfcNamedUnit]
};
registerIfcClass(IfcPropertyListValue, schema);

class IfcOutletType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcOutletTypeEnum = ENUMERATION OF [AUDIOVISUALOUTLET, COMMUNICATIONSOUTLET, POWEROUTLET, DATAOUTLET, TELEPHONEOUTLET, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcOutletType, schema);

class IfcElectricApplianceType extends IfcFlowTerminalType
{
  PredefinedType = null; // TYPE IfcElectricApplianceTypeEnum = ENUMERATION OF [DISHWASHER, ELECTRICCOOKER, FREESTANDINGELECTRICHEATER, FREESTANDINGFAN, FREESTANDINGWATERHEATER, FREESTANDINGWATERCOOLER, FREEZER, FRIDGE_FREEZER, HANDDRYER, KITCHENMACHINE, MICROWAVE, PHOTOCOPIER, REFRIGERATOR, TUMBLEDRYER, VENDINGMACHINE, WASHINGMACHINE, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricApplianceType, schema);

class IfcRelSpaceBoundary2ndLevel extends IfcRelSpaceBoundary1stLevel
{
  CorrespondingBoundary = null; // ENTITY IfcRelSpaceBoundary2ndLevel SUBTYPE OF IfcRelSpaceBoundary1stLevel
};
registerIfcClass(IfcRelSpaceBoundary2ndLevel, schema);

class IfcElectricTimeControlType extends IfcFlowControllerType
{
  PredefinedType = null; // TYPE IfcElectricTimeControlTypeEnum = ENUMERATION OF [TIMECLOCK, TIMEDELAY, RELAY, USERDEFINED, NOTDEFINED]
};
registerIfcClass(IfcElectricTimeControlType, schema);

class IfcBuilding extends IfcSpatialStructureElement
{
  ElevationOfRefHeight = null; // TYPE IfcLengthMeasure = REAL
  ElevationOfTerrain = null; // TYPE IfcLengthMeasure = REAL
  BuildingAddress = null; // ENTITY IfcPostalAddress SUBTYPE OF IfcAddress
};
registerIfcClass(IfcBuilding, schema);

class IfcBlobTexture extends IfcSurfaceTexture
{
  RasterFormat = null; // TYPE IfcIdentifier = STRING
  RasterCode = null; // TYPE IfcBinary = BINARY
};
registerIfcClass(IfcBlobTexture, schema);

class IfcIShapeProfileDef extends IfcParameterizedProfileDef
{
  OverallWidth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  OverallDepth = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  WebThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeThickness = null; // TYPE IfcPositiveLengthMeasure = TYPE IfcLengthMeasure = REAL
  FilletRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeEdgeRadius = null; // TYPE IfcNonNegativeLengthMeasure = TYPE IfcLengthMeasure = REAL
  FlangeSlope = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcIShapeProfileDef, schema);

class IfcAsset extends IfcGroup
{
  Identification = null; // TYPE IfcIdentifier = STRING
  OriginalValue = null; // ENTITY IfcCostValue SUBTYPE OF IfcAppliedValue
  CurrentValue = null; // ENTITY IfcCostValue SUBTYPE OF IfcAppliedValue
  TotalReplacementCost = null; // ENTITY IfcCostValue SUBTYPE OF IfcAppliedValue
  Owner = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  User = null; // TYPE IfcActorSelect = SELECT [IfcOrganization, IfcPerson, IfcPersonAndOrganization]
  ResponsiblePerson = null; // ENTITY IfcPerson
  IncorporationDate = null; // TYPE IfcDate = STRING
  DepreciatedValue = null; // ENTITY IfcCostValue SUBTYPE OF IfcAppliedValue
};
registerIfcClass(IfcAsset, schema);

class IfcProjectLibrary extends IfcContext
{
};
registerIfcClass(IfcProjectLibrary, schema);

class IfcRelConnectsPathElements extends IfcRelConnectsElements
{
  RelatingPriorities = null; // LIST[0:0] OF IfcInteger
  RelatedPriorities = null; // LIST[0:0] OF IfcInteger
  RelatedConnectionType = null; // TYPE IfcConnectionTypeEnum = ENUMERATION OF [ATPATH, ATSTART, ATEND, NOTDEFINED]
  RelatingConnectionType = null; // TYPE IfcConnectionTypeEnum = ENUMERATION OF [ATPATH, ATSTART, ATEND, NOTDEFINED]
};
registerIfcClass(IfcRelConnectsPathElements, schema);

class IfcSite extends IfcSpatialStructureElement
{
  RefLatitude = null; // TYPE IfcCompoundPlaneAngleMeasure = LIST[3:4] OF INTEGER
  RefLongitude = null; // TYPE IfcCompoundPlaneAngleMeasure = LIST[3:4] OF INTEGER
  RefElevation = null; // TYPE IfcLengthMeasure = REAL
  LandTitleNumber = null; // TYPE IfcLabel = STRING
  SiteAddress = null; // ENTITY IfcPostalAddress SUBTYPE OF IfcAddress
};
registerIfcClass(IfcSite, schema);

class IfcFillAreaStyle extends IfcPresentationStyle
{
  FillStyles = null; // SET[1:0] OF IfcFillStyleSelect
  ModelorDraughting = null; // TYPE IfcBoolean = BOOLEAN
};
registerIfcClass(IfcFillAreaStyle, schema);


class IfcMassFlowRateMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMassFlowRateMeasure, schema);

class IfcTemperatureRateOfChangeMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcTemperatureRateOfChangeMeasure, schema);

class IfcDynamicViscosityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcDynamicViscosityMeasure, schema);

class IfcComplexNumber
{
  Value = null; // ARRAY[1:2] OF REAL
};
registerIfcClass(IfcComplexNumber, schema);

class IfcSoundPowerLevelMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSoundPowerLevelMeasure, schema);

class IfcTextDecoration
{
  Value = null; // STRING
};
registerIfcClass(IfcTextDecoration, schema);

class IfcDateTime
{
  Value = null; // STRING
};
registerIfcClass(IfcDateTime, schema);

class IfcURIReference
{
  Value = null; // STRING
};
registerIfcClass(IfcURIReference, schema);

class IfcMagneticFluxDensityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMagneticFluxDensityMeasure, schema);

class IfcLogical
{
  Value = null; // LOGICAL
};
registerIfcClass(IfcLogical, schema);

class IfcMassMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMassMeasure, schema);

class IfcElectricChargeMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcElectricChargeMeasure, schema);

class IfcBoolean
{
  Value = null; // BOOLEAN
};
registerIfcClass(IfcBoolean, schema);

class IfcLinearForceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLinearForceMeasure, schema);

class IfcRatioMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcRatioMeasure, schema);

class IfcTextTransformation
{
  Value = null; // STRING
};
registerIfcClass(IfcTextTransformation, schema);

class IfcArcIndex
{
  Value = null; // LIST[3:3] OF IfcPositiveInteger
};
registerIfcClass(IfcArcIndex, schema);

class IfcLinearMomentMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLinearMomentMeasure, schema);

class IfcSolidAngleMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSolidAngleMeasure, schema);

class IfcThermalConductivityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcThermalConductivityMeasure, schema);

class IfcDayInWeekNumber
{
  Value = null; // INTEGER
};
registerIfcClass(IfcDayInWeekNumber, schema);

class IfcMagneticFluxMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMagneticFluxMeasure, schema);

class IfcSoundPressureLevelMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSoundPressureLevelMeasure, schema);

class IfcRotationalStiffnessMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcRotationalStiffnessMeasure, schema);

class IfcAreaDensityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcAreaDensityMeasure, schema);

class IfcCountMeasure
{
  Value = null; // NUMBER
};
registerIfcClass(IfcCountMeasure, schema);

class IfcPropertySetDefinitionSet
{
  Value = null; // SET[1:0] OF IfcPropertySetDefinition
};
registerIfcClass(IfcPropertySetDefinitionSet, schema);

class IfcMomentOfInertiaMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMomentOfInertiaMeasure, schema);

class IfcSectionModulusMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSectionModulusMeasure, schema);

class IfcLuminousIntensityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLuminousIntensityMeasure, schema);

class IfcModulusOfSubgradeReactionMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcModulusOfSubgradeReactionMeasure, schema);

class IfcReal
{
  Value = null; // REAL
};
registerIfcClass(IfcReal, schema);

class IfcLanguageId
{
  Value = null; // TYPE IfcIdentifier = STRING
};
registerIfcClass(IfcLanguageId, schema);

class IfcSpecularExponent
{
  Value = null; // REAL
};
registerIfcClass(IfcSpecularExponent, schema);

class IfcShearModulusMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcShearModulusMeasure, schema);

class IfcTimeMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcTimeMeasure, schema);

class IfcIdentifier
{
  Value = null; // STRING
};
registerIfcClass(IfcIdentifier, schema);

class IfcModulusOfRotationalSubgradeReactionMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcModulusOfRotationalSubgradeReactionMeasure, schema);

class IfcLinearVelocityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLinearVelocityMeasure, schema);

class IfcModulusOfLinearSubgradeReactionMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcModulusOfLinearSubgradeReactionMeasure, schema);

class IfcMolecularWeightMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMolecularWeightMeasure, schema);

class IfcElectricVoltageMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcElectricVoltageMeasure, schema);

class IfcDescriptiveMeasure
{
  Value = null; // STRING
};
registerIfcClass(IfcDescriptiveMeasure, schema);

class IfcTime
{
  Value = null; // STRING
};
registerIfcClass(IfcTime, schema);

class IfcBinary
{
  Value = null; // BINARY
};
registerIfcClass(IfcBinary, schema);

class IfcElectricCurrentMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcElectricCurrentMeasure, schema);

class IfcThermalResistanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcThermalResistanceMeasure, schema);

class IfcCurvatureMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcCurvatureMeasure, schema);

class IfcElectricResistanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcElectricResistanceMeasure, schema);

class IfcPHMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcPHMeasure, schema);

class IfcPowerMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcPowerMeasure, schema);

class IfcLabel
{
  Value = null; // STRING
};
registerIfcClass(IfcLabel, schema);

class IfcFrequencyMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcFrequencyMeasure, schema);

class IfcLinearStiffnessMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLinearStiffnessMeasure, schema);

class IfcLuminousIntensityDistributionMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLuminousIntensityDistributionMeasure, schema);

class IfcFontWeight
{
  Value = null; // STRING
};
registerIfcClass(IfcFontWeight, schema);

class IfcIsothermalMoistureCapacityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcIsothermalMoistureCapacityMeasure, schema);

class IfcSoundPressureMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSoundPressureMeasure, schema);

class IfcMonetaryMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMonetaryMeasure, schema);

class IfcLengthMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLengthMeasure, schema);

class IfcTextAlignment
{
  Value = null; // STRING
};
registerIfcClass(IfcTextAlignment, schema);

class IfcEnergyMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcEnergyMeasure, schema);

class IfcTextFontName
{
  Value = null; // STRING
};
registerIfcClass(IfcTextFontName, schema);

class IfcPlanarForceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcPlanarForceMeasure, schema);

class IfcCompoundPlaneAngleMeasure
{
  Value = null; // LIST[3:4] OF INTEGER
};
registerIfcClass(IfcCompoundPlaneAngleMeasure, schema);

class IfcCardinalPointReference
{
  Value = null; // INTEGER
};
registerIfcClass(IfcCardinalPointReference, schema);

class IfcText
{
  Value = null; // STRING
};
registerIfcClass(IfcText, schema);

class IfcThermalAdmittanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcThermalAdmittanceMeasure, schema);

class IfcRotationalMassMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcRotationalMassMeasure, schema);

class IfcLuminousFluxMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcLuminousFluxMeasure, schema);

class IfcTimeStamp
{
  Value = null; // INTEGER
};
registerIfcClass(IfcTimeStamp, schema);

class IfcSpecificHeatCapacityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSpecificHeatCapacityMeasure, schema);

class IfcFontStyle
{
  Value = null; // STRING
};
registerIfcClass(IfcFontStyle, schema);

class IfcThermodynamicTemperatureMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcThermodynamicTemperatureMeasure, schema);

class IfcIntegerCountRateMeasure
{
  Value = null; // INTEGER
};
registerIfcClass(IfcIntegerCountRateMeasure, schema);

class IfcNumericMeasure
{
  Value = null; // NUMBER
};
registerIfcClass(IfcNumericMeasure, schema);

class IfcElectricCapacitanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcElectricCapacitanceMeasure, schema);

class IfcInteger
{
  Value = null; // INTEGER
};
registerIfcClass(IfcInteger, schema);

class IfcPositivePlaneAngleMeasure
{
  Value = null; // TYPE IfcPlaneAngleMeasure = REAL
};
registerIfcClass(IfcPositivePlaneAngleMeasure, schema);

class IfcHeatFluxDensityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcHeatFluxDensityMeasure, schema);

class IfcPositiveInteger
{
  Value = null; // TYPE IfcInteger = INTEGER
};
registerIfcClass(IfcPositiveInteger, schema);

class IfcTorqueMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcTorqueMeasure, schema);

class IfcWarpingMomentMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcWarpingMomentMeasure, schema);

class IfcRotationalFrequencyMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcRotationalFrequencyMeasure, schema);

class IfcNormalisedRatioMeasure
{
  Value = null; // TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcNormalisedRatioMeasure, schema);

class IfcDuration
{
  Value = null; // STRING
};
registerIfcClass(IfcDuration, schema);

class IfcRadioActivityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcRadioActivityMeasure, schema);

class IfcContextDependentMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcContextDependentMeasure, schema);

class IfcDimensionCount
{
  Value = null; // INTEGER
};
registerIfcClass(IfcDimensionCount, schema);

class IfcGloballyUniqueId
{
  Value = null; // STRING
};
registerIfcClass(IfcGloballyUniqueId, schema);

class IfcModulusOfElasticityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcModulusOfElasticityMeasure, schema);

class IfcMonthInYearNumber
{
  Value = null; // INTEGER
};
registerIfcClass(IfcMonthInYearNumber, schema);

class IfcAbsorbedDoseMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcAbsorbedDoseMeasure, schema);

class IfcNonNegativeLengthMeasure
{
  Value = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcNonNegativeLengthMeasure, schema);

class IfcElectricConductanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcElectricConductanceMeasure, schema);

class IfcKinematicViscosityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcKinematicViscosityMeasure, schema);

class IfcPresentableText
{
  Value = null; // STRING
};
registerIfcClass(IfcPresentableText, schema);

class IfcParameterValue
{
  Value = null; // REAL
};
registerIfcClass(IfcParameterValue, schema);

class IfcPressureMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcPressureMeasure, schema);

class IfcInductanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcInductanceMeasure, schema);

class IfcMassPerLengthMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMassPerLengthMeasure, schema);

class IfcIonConcentrationMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcIonConcentrationMeasure, schema);

class IfcForceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcForceMeasure, schema);

class IfcDoseEquivalentMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcDoseEquivalentMeasure, schema);

class IfcMassDensityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMassDensityMeasure, schema);

class IfcPositiveRatioMeasure
{
  Value = null; // TYPE IfcRatioMeasure = REAL
};
registerIfcClass(IfcPositiveRatioMeasure, schema);

class IfcHeatingValueMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcHeatingValueMeasure, schema);

class IfcMoistureDiffusivityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcMoistureDiffusivityMeasure, schema);

class IfcSoundPowerMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSoundPowerMeasure, schema);

class IfcAccelerationMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcAccelerationMeasure, schema);

class IfcAngularVelocityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcAngularVelocityMeasure, schema);

class IfcFontVariant
{
  Value = null; // STRING
};
registerIfcClass(IfcFontVariant, schema);

class IfcTemperatureGradientMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcTemperatureGradientMeasure, schema);

class IfcWarpingConstantMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcWarpingConstantMeasure, schema);

class IfcThermalTransmittanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcThermalTransmittanceMeasure, schema);

class IfcSectionalAreaIntegralMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcSectionalAreaIntegralMeasure, schema);

class IfcVolumeMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcVolumeMeasure, schema);

class IfcSpecularRoughness
{
  Value = null; // REAL
};
registerIfcClass(IfcSpecularRoughness, schema);

class IfcVolumetricFlowRateMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcVolumetricFlowRateMeasure, schema);

class IfcIlluminanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcIlluminanceMeasure, schema);

class IfcThermalExpansionCoefficientMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcThermalExpansionCoefficientMeasure, schema);

class IfcPositiveLengthMeasure
{
  Value = null; // TYPE IfcLengthMeasure = REAL
};
registerIfcClass(IfcPositiveLengthMeasure, schema);

class IfcVaporPermeabilityMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcVaporPermeabilityMeasure, schema);

class IfcDate
{
  Value = null; // STRING
};
registerIfcClass(IfcDate, schema);

class IfcBoxAlignment
{
  Value = null; // TYPE IfcLabel = STRING
};
registerIfcClass(IfcBoxAlignment, schema);

class IfcPlaneAngleMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcPlaneAngleMeasure, schema);

class IfcLineIndex
{
  Value = null; // LIST[2:0] OF IfcPositiveInteger
};
registerIfcClass(IfcLineIndex, schema);

class IfcAreaMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcAreaMeasure, schema);

class IfcDayInMonthNumber
{
  Value = null; // INTEGER
};
registerIfcClass(IfcDayInMonthNumber, schema);

class IfcAmountOfSubstanceMeasure
{
  Value = null; // REAL
};
registerIfcClass(IfcAmountOfSubstanceMeasure, schema);

